{
  "version": 3,
  "sources": ["../src/unpoly/namespace.js", "../src/unpoly/mockable.js", "../src/unpoly/util.js", "../src/unpoly/error.js", "../src/unpoly/migrate_stub.js", "../src/unpoly/browser.js", "../src/unpoly/element.sass", "../src/unpoly/element.js", "../src/unpoly/errors/error.js", "../src/unpoly/errors/not_implemented.js", "../src/unpoly/errors/aborted.js", "../src/unpoly/errors/cannot_match.js", "../src/unpoly/errors/cannot_parse.js", "../src/unpoly/errors/cannot_target.js", "../src/unpoly/errors/offline.js", "../src/unpoly/classes/record.js", "../src/unpoly/classes/config.js", "../src/unpoly/classes/log_config.js", "../src/unpoly/classes/options_parser.js", "../src/unpoly/classes/fifo_cache.js", "../src/unpoly/classes/rect.js", "../src/unpoly/classes/body_shifter.js", "../src/unpoly/classes/change/change.js", "../src/unpoly/classes/change/addition.js", "../src/unpoly/classes/render_job.js", "../src/unpoly/classes/change/removal.js", "../src/unpoly/classes/change/destroy_fragment.js", "../src/unpoly/classes/change/open_layer.js", "../src/unpoly/classes/change/update_layer.js", "../src/unpoly/classes/change/update_steps.js", "../src/unpoly/classes/change/close_layer.js", "../src/unpoly/classes/change/from_url.js", "../src/unpoly/classes/change/from_response.js", "../src/unpoly/classes/change/from_content.js", "../src/unpoly/classes/compiler_pass.js", "../src/unpoly/classes/css_transition.js", "../src/unpoly/classes/destructor_pass.js", "../src/unpoly/classes/event_emitter.js", "../src/unpoly/classes/event_listener.js", "../src/unpoly/classes/event_listener_group.js", "../src/unpoly/classes/field_watcher.js", "../src/unpoly/classes/form_validator.js", "../src/unpoly/classes/focus_capsule.js", "../src/unpoly/classes/fragment_processor.js", "../src/unpoly/classes/fragment_finder.js", "../src/unpoly/classes/fragment_focus.js", "../src/unpoly/classes/fragment_polling.js", "../src/unpoly/classes/fragment_scrolling.js", "../src/unpoly/classes/layer/base.js", "../src/unpoly/classes/layer/overlay.js", "../src/unpoly/classes/layer/overlay_with_tether.js", "../src/unpoly/classes/layer/overlay_with_viewport.js", "../src/unpoly/classes/layer/root.js", "../src/unpoly/classes/layer/modal.js", "../src/unpoly/classes/layer/popup.js", "../src/unpoly/classes/layer/drawer.js", "../src/unpoly/classes/layer/cover.js", "../src/unpoly/classes/layer_lookup.js", "../src/unpoly/classes/layer_stack.js", "../src/unpoly/classes/link_feedback_urls.js", "../src/unpoly/classes/link_preloader.js", "../src/unpoly/classes/motion_controller.js", "../src/unpoly/classes/nonceable_callback.js", "../src/unpoly/classes/overlay_focus.js", "../src/unpoly/classes/params.js", "../src/unpoly/classes/progress_bar.js", "../src/unpoly/classes/render_options.js", "../src/unpoly/classes/render_result.js", "../src/unpoly/classes/request.js", "../src/unpoly/classes/request/cache.js", "../src/unpoly/classes/request/queue.js", "../src/unpoly/classes/request/form_renderer.js", "../src/unpoly/classes/request/xhr_renderer.js", "../src/unpoly/classes/response.js", "../src/unpoly/classes/response_doc.js", "../src/unpoly/classes/reveal_motion.js", "../src/unpoly/classes/selector.js", "../src/unpoly/classes/tether.js", "../src/unpoly/classes/url_pattern.js", "../src/unpoly/framework.js", "../src/unpoly/event.js", "../src/unpoly/protocol.js", "../src/unpoly/log.js", "../src/unpoly/script.js", "../src/unpoly/history.js", "../src/unpoly/fragment.sass", "../src/unpoly/fragment.js", "../src/unpoly/viewport.sass", "../src/unpoly/viewport.js", "../src/unpoly/motion.js", "../src/unpoly/network.sass", "../src/unpoly/network.js", "../src/unpoly/layer.sass", "../src/unpoly/layer.js", "../src/unpoly/link.sass", "../src/unpoly/link.js", "../src/unpoly/form.js", "../src/unpoly/feedback.js", "../src/unpoly/radio.js", "../src/unpoly/rails.js", "../src/unpoly.js"],
  "sourcesContent": ["/***\n@module up\n*/\nwindow.up = {\n  version: '3.0.0'\n}\n", "up.mockable = function(originalFn) {\n  if (window.jasmine) {\n    let name = originalFn.name\n    let obj = { [name]: originalFn }\n    let mockableFn = function() {\n      return obj[name].apply(this, arguments)\n    }\n    mockableFn.mock = () => spyOn(obj, name) // eslint-disable-line no-undef\n    return mockableFn\n  } else {\n    return originalFn\n  }\n}\n", "/*-\nUtility functions\n=================\n\nThe `up.util` module contains functions to facilitate the work with basic JavaScript\nvalues like lists, strings or functions.\n\nYou will recognize many functions form other utility libraries like [Lodash](https://lodash.com/).\nWhile feature parity with Lodash is not a goal of `up.util`, you might find it sufficient\nto not include another library in your asset bundle.\n\n@see url-patterns\n\n@module up.util\n*/\nup.util = (function() {\n\n  /*-\n  A function that does nothing.\n\n  @function up.util.noop\n  @experimental\n  */\n  function noop() {\n  }\n\n  /*-\n  A function that returns a resolved promise.\n\n  @function up.util.asyncNoop\n  @internal\n  */\n  function asyncNoop(){\n    return Promise.resolve()\n  }\n\n  /*-\n  Ensures that the given function can only be called a single time.\n  Subsequent calls will return the return value of the first call.\n\n  Note that this is a simple implementation that\n  doesn't distinguish between argument lists.\n\n  @function up.util.memoize\n  @internal\n  */\n  function memoize(func) {\n    let cachedValue, cached\n    return function(...args) {\n      if (cached) {\n        return cachedValue\n      } else {\n        cached = true\n        return cachedValue = func.apply(this, args)\n      }\n    }\n  }\n\n  const NORMALIZE_URL_DEFAULTS = {\n    host: 'cross-domain',\n  }\n\n  /*-\n  Returns a normalized version of the given URL string.\n\n  Two URLs that point to the same resource should normalize to the same string.\n\n  ### Comparing normalized URLs\n\n  The main purpose of this function is to normalize two URLs for string comparison:\n\n  ```js\n  up.util.normalizeURL('http://current-host/path') === up.util.normalizeURL('/path') // => true\n  ```\n\n  By default the hostname is only included if it points to a different origin:\n\n  ```js\n  up.util.normalizeURL('http://current-host/path') // => '/path'\n  up.util.normalizeURL('http://other-host/path') // => 'http://other-host/path'\n  ```\n\n  Relative paths are normalized to absolute paths:\n\n  ```js\n  up.util.normalizeURL('index.html') // => '/path/index.html'\n  ```\n\n  ### Excluding URL components\n\n  You may pass options to exclude URL components from the normalized string:\n\n  ```js\n  up.util.normalizeURL('/foo?query=bar', { query: false }) => '/foo'\n  up.util.normalizeURL('/bar#hash', { hash: false }) => '/bar'\n  ```\n\n  ### Limitations\n\n  - Username and password are always omitted from the normalized URL.\n  - Only `http` and `https` schemes are supported.\n\n  @function up.util.normalizeURL\n  @param {string|URL} the URL to normalize\n  @param {boolean} [options.host='cross-domain']\n    Whether to include protocol, hostname and port in the normalized URL.\n\n    When set to `'cross-domain'` (the default), the host is only included if it differ's from the page's hostname.\n\n    The port is omitted if the port is the standard port for the given protocol, e.g. `:443` for `https://`.\n  @param {boolean} [options.hash=true]\n    Whether to include an `#hash` anchor in the normalized URL.\n  @param {boolean} [options.search=true]\n    Whether to include a `?query` string in the normalized URL.\n  @param {boolean} [options.trailingSlash=true]\n    Whether to include a trailing slash from the pathname.\n  @return {string}\n    The normalized URL.\n  @experimental\n  */\n  function normalizeURL(url, options) {\n    options = newOptions(options, NORMALIZE_URL_DEFAULTS)\n\n    const parts = parseURL(url)\n    let normalized = ''\n\n    if (options.host === 'cross-domain') {\n      options.host = isCrossOrigin(parts)\n    }\n\n    if (options.host) {\n      normalized += parts.protocol + \"//\" + parts.host\n    }\n\n    let { pathname } = parts\n    if (options.trailingSlash === false && pathname !== '/') {\n      pathname = pathname.replace(/\\/$/, '')\n    }\n    normalized += pathname\n\n    if (options.search !== false) {\n      normalized += parts.search\n    }\n\n    if (options.hash !== false) {\n      normalized += parts.hash\n    }\n\n    return normalized\n  }\n\n  function matchURLs(leftURL, rightURL) {\n    return normalizeURL(leftURL) === normalizeURL(rightURL)\n  }\n\n  // We're calling isCrossOrigin() a lot.\n  // Accessing location.protocol and location.hostname every time\n  // is much slower than comparing cached strings.\n  // https://jsben.ch/kBATt\n  const APP_PROTOCOL = location.protocol\n  const APP_HOSTNAME = location.hostname\n\n  function isCrossOrigin(urlOrAnchor) {\n    // If the given URL does not contain a hostname we know it cannot be cross-origin.\n    // In that case we don't need to parse the URL.\n    if (isString(urlOrAnchor) && (urlOrAnchor.indexOf('//') === -1)) {\n      return false\n    }\n\n    const parts = parseURL(urlOrAnchor)\n    return (APP_HOSTNAME !== parts.hostname) || (APP_PROTOCOL !== parts.protocol)\n  }\n\n  /*-\n  Parses the given URL into components such as hostname and path.\n\n  If the given URL is not fully qualified, it is assumed to be relative\n  to the current page.\n\n  ### Example\n\n  ```js\n  let parsed = up.util.parseURL('/path?foo=value')\n  parsed.pathname // => '/path'\n  parsed.search // => '/?foo=value'\n  parsed.hash // => ''\n  ```\n\n  @function up.util.parseURL\n  @param {string|URL} the URL to parse\n  @return {Object}\n    The parsed URL as an object with\n    `{ protocol, hostname, port, pathname, search, hash }` properties.\n  @stable\n  */\n  function parseURL(url) {\n    if (url.pathname) {\n      return url\n    }\n\n    // We would prefer to use `new URL(url, location.href)` here, but that is 30% slower\n    // than creating a link (see benchmark at https://jsbench.me/l7l2x9cruf/1).\n    // We're parsing a *lot* of URLs for [up-active], so this matters.\n    let link = document.createElement('a')\n    link.href = url\n    return link\n  }\n\n  /*-\n  @function up.util.normalizeMethod\n  @internal\n  */\n  function normalizeMethod(method) {\n    return method ? method.toUpperCase() : 'GET'\n  }\n\n  /*-\n  @function up.util.methodAllowsPayload\n  @internal\n  */\n  function methodAllowsPayload(method) {\n    return (method !== 'GET') && (method !== 'HEAD')\n  }\n\n  function iteratee(block) {\n    if (isString(block)) {\n      return item => item[block]\n    } else {\n      return block\n    }\n  }\n\n  /*-\n  Translate all items in a [list](/up.util.isList) to new array of items.\n\n  @function up.util.map\n  @param {List|Iterator} list\n  @param {Function(element, index): any|string} block\n    A function that will be called with each element and (optional) iteration index.\n\n    You can also pass a property name as a String,\n    which will be collected from each item in the list.\n  @return {Array}\n    A new array containing the result of each function call.\n  @stable\n  */\n  function map(list, block) {\n    if (list.length === 0) { return [] }\n    block = iteratee(block)\n    let mapped = []\n    let i = 0\n    for (let item of list) {\n      mapped.push(block(item, i++))\n    }\n    return mapped\n  }\n\n  /*-\n  @function up.util.mapObject\n  @internal\n  */\n  function mapObject(array, pairer) {\n    const merger = function(object, pair) {\n      object[pair[0]] = pair[1]\n      return object\n    }\n    return map(array, pairer).reduce(merger, {})\n  }\n\n  /*-\n  Calls the given function for each element (and, optional, index)\n  of the given [list](/up.util.isList) or iterator.\n\n  @function up.util.each\n  @param {List|Iterator} list\n  @param {Function(element, index)} block\n    A function that will be called with each element and (optional) iteration index.\n  @stable\n  */\n  function each(array, block) {\n    // note that the native Array.forEach is very slow (https://jsperf.com/fast-array-foreach)\n    let i = 0\n    for (let item of array) {\n      block(item, i++)\n    }\n  }\n\n  /*-\n  Returns whether the given argument is `null`.\n\n  @function up.util.isNull\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isNull(object) {\n    return object === null\n  }\n\n  /*-\n  Returns whether the given argument is `undefined`.\n\n  @function up.util.isUndefined\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isUndefined(object) {\n    return object === undefined\n  }\n\n\n  /*-\n  Returns whether the given argument is not `undefined`.\n\n  @function up.util.isDefined\n  @param object\n  @return {boolean}\n  @stable\n  */\n  const isDefined = negate(isUndefined)\n\n  /*-\n  Returns whether the given argument is either `undefined` or `null`.\n\n  Note that empty strings or zero are *not* considered to be \"missing\".\n\n  For the opposite of `up.util.isMissing()` see [`up.util.isGiven()`](/up.util.isGiven).\n\n  @function up.util.isMissing\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isMissing(object) {\n    return isUndefined(object) || isNull(object)\n  }\n\n  /*-\n  Returns whether the given argument is neither `undefined` nor `null`.\n\n  For the opposite of `up.util.isGiven()` see [`up.util.isMissing()`](/up.util.isMissing).\n\n  > [IMPORTANT]\n  > Unpoly's concept of \"given\" does not correspond to JavaScript's concept of [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy).\n  > Empty strings or the number zero are not truthy, but *are* considered to be \"given\".\n\n  @function up.util.isGiven\n  @param object\n  @return {boolean}\n  @stable\n  */\n  const isGiven = negate(isMissing)\n\n  // isNan = (object) ->\n  //   isNumber(value) && value != +value\n\n  /*-\n  Return whether the given argument is considered to be blank.\n\n  By default, this function returns `true` for:\n\n  - `undefined`\n  - `null`\n  - Empty strings\n  - Empty arrays\n  - A plain object without own enumerable properties\n\n  All other arguments return `false`.\n\n  To check implement blank-ness checks for user-defined classes,\n  see `up.util.isBlank.key`.\n\n  @function up.util.isBlank\n  @param value\n    The value is to check.\n  @return {boolean}\n    Whether the value is blank.\n  @stable\n  */\n  function isBlank(value) {\n    if (isMissing(value)) {\n      return true\n    }\n    if (isObject(value) && value[isBlank.key]) {\n      return value[isBlank.key]()\n    }\n    if (isString(value) || isList(value)) {\n      return value.length === 0\n    }\n    if (isOptions(value)) {\n      return Object.keys(value).length === 0\n    }\n    return false\n  }\n\n  /*-\n  This property contains the name of a method that user-defined classes\n  may implement to hook into the `up.util.isBlank()` protocol.\n\n  ### Example\n\n  We have a user-defined `Account` class that we want to use with `up.util.isBlank()`:\n\n  ```js\n  class Account {\n    constructor(email) {\n      this.email = email\n    }\n\n    [up.util.isBlank.key]() {\n      return up.util.isBlank(this.email)\n    }\n  }\n  ```\n\n  > [NOTE]\n  > The protocol method is not actually named `'up.util.isBlank.key'`.\n  > Instead it is named after the *value* of the `up.util.isBlank.key` property.\n  > To do so, the code sample above is using a\n  > [computed property name](https://medium.com/front-end-weekly/javascript-object-creation-356e504173a8)\n  > in square brackets.\n\n  We may now use `Account` instances with `up.util.isBlank()`:\n\n  ```js\n  let foo = new Account('foo@foo.com')\n  let bar = new Account('')\n\n  console.log(up.util.isBlank(foo)) // prints false\n  console.log(up.util.isBlank(bar)) // prints true\n  ```\n\n  @property up.util.isBlank.key\n  @experimental\n  */\n  isBlank.key = 'up.util.isBlank'\n\n  /*-\n  Returns the given argument if the argument is [present](/up.util.isPresent),\n  otherwise returns `undefined`.\n\n  @function up.util.presence\n  @param value\n  @param {Function(value): boolean} [tester=up.util.isPresent]\n    The function that will be used to test whether the argument is present.\n  @return {any|undefined}\n  @stable\n  */\n  function presence(value, tester = isPresent) {\n    if (tester(value)) {\n      return value\n    }\n  }\n\n  /*-\n  Returns whether the given argument is not [blank](/up.util.isBlank).\n\n  @function up.util.isPresent\n  @param object\n  @return {boolean}\n  @stable\n  */\n  const isPresent = negate(isBlank)\n\n  /*-\n  Returns whether the given argument is a function.\n\n  @function up.util.isFunction\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isFunction(object) {\n    return typeof(object) === 'function'\n  }\n\n  /*-\n  Returns whether the given argument is a string.\n\n  @function up.util.isString\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isString(object) {\n    return (typeof(object) === 'string') || object instanceof String\n  }\n\n  /*-\n  Returns whether the given argument is a boolean value.\n\n  @function up.util.isBoolean\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isBoolean(object) {\n    return (typeof(object) === 'boolean') || object instanceof Boolean\n  }\n\n  /*-\n  Returns whether the given argument is a number.\n\n  Note that this will check the argument's *type*.\n  It will return `false` for a string like `\"123\"`.\n\n  @function up.util.isNumber\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isNumber(object) {\n    return (typeof(object) === 'number') || object instanceof Number\n  }\n\n  /*-\n  Returns whether the given argument is an options hash,\n\n  Differently from [`up.util.isObject()`], this returns false for\n  functions, jQuery collections, promises, `FormData` instances and arrays.\n\n  @function up.util.isOptions\n  @param object\n  @return {boolean}\n  @internal\n  */\n  function isOptions(object) {\n    return (typeof(object) === 'object') && !isNull(object) && (isUndefined(object.constructor) || (object.constructor === Object))\n  }\n\n  /*-\n  Returns whether the given argument is an object.\n\n  This also returns `true` for functions, which may behave like objects in JavaScript.\n\n  @function up.util.isObject\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isObject(object) {\n    const typeOfResult = typeof(object)\n    return ((typeOfResult === 'object') && !isNull(object)) || (typeOfResult === 'function')\n  }\n\n  /*-\n  Returns whether the given argument is a [DOM element](https://developer.mozilla.org/de/docs/Web/API/Element).\n\n  @function up.util.isElement\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isElement(object) {\n    return object instanceof Element\n  }\n\n  /*-\n  Returns whether the given argument is a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\n\n  @function up.util.isRegExp\n  @param object\n  @return {boolean}\n  @internal\n  */\n  function isRegExp(object) {\n    return object instanceof RegExp\n  }\n\n  /*-\n  Returns whether the given argument is an error instance.\n\n  @function up.util.isError\n  @param object\n  @return {boolean}\n  @internal\n  */\n  function isError(object) {\n    return object instanceof Error\n  }\n\n  /*-\n  Returns whether the given argument is a [jQuery collection](https://learn.jquery.com/using-jquery-core/jquery-object/).\n\n  @function up.util.isJQuery\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isJQuery(object) {\n    return up.browser.canJQuery() && object instanceof jQuery\n  }\n\n  /*-\n  @function up.util.isElementish\n  @param object\n  @return {boolean}\n  @internal\n  */\n  function isElementish(object) {\n    return !!(object && (object.addEventListener || object[0]?.addEventListener))\n  }\n\n  /*-\n  Returns whether the given argument is an object with a `then` method.\n\n  @function up.util.isPromise\n  @param object\n  @return {boolean}\n  @stable\n  */\n  function isPromise(object) {\n    return isObject(object) && isFunction(object.then)\n  }\n\n  /*-\n  Returns whether the given argument is an array.\n\n  @function up.util.isArray\n  @param object\n  @return {boolean}\n  @stable\n  */\n  // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n  const { isArray } = Array\n\n  /*-\n  Returns whether the given argument is a `FormData` instance.\n\n  Always returns `false` in browsers that don't support `FormData`.\n\n  @function up.util.isFormData\n  @param object\n  @return {boolean}\n  @internal\n  */\n  function isFormData(object) {\n    return object instanceof FormData\n  }\n\n  /*-\n  Converts the given [array-like value](/up.util.isList) into an array.\n\n  If the given value is already an array, it is returned unchanged.\n\n  @function up.util.toArray\n  @param object\n  @return {Array}\n  @stable\n  */\n  function toArray(value) {\n    return isArray(value) ? value : copyArrayLike(value)\n  }\n\n  /*-\n  Returns whether the given argument is an array-like value.\n\n  Return true for `Array`, a\n  [`NodeList`](https://developer.mozilla.org/en-US/docs/Web/API/NodeList),\n   the [arguments object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)\n   or a jQuery collection.\n\n  Use [`up.util.isArray()`](/up.util.isArray) to test whether a value is an actual `Array`.\n\n  @function up.util.isList\n  @param value\n  @return {boolean}\n  @stable\n  */\n  function isList(value) {\n    return isArray(value) ||\n      isNodeList(value) ||\n      isArguments(value) ||\n      isJQuery(value) ||\n      isHTMLCollection(value)\n  }\n\n  /*-\n  Returns whether the given value is a [`NodeList`](https://developer.mozilla.org/en-US/docs/Web/API/NodeList).\n\n  `NodeLists` are array-like objects returned by [`document.querySelectorAll()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll).\n\n  @function up.util.isNodeList\n  @param value\n  @return {boolean}\n  @internal\n  */\n  function isNodeList(value) {\n    return value instanceof NodeList\n  }\n\n  function isHTMLCollection(value) {\n    return value instanceof HTMLCollection\n  }\n\n  /*-\n  Returns whether the given value is an [arguments object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments).\n\n  @function up.util.isArguments\n  @param value\n  @return {boolean}\n  @internal\n  */\n  function isArguments(value) {\n    return Object.prototype.toString.call(value) === '[object Arguments]'\n  }\n\n  function nullToUndefined(value) {\n    if (!isNull(value)) {\n      return value\n    }\n  }\n\n  /*-\n  Returns the given value if it is [array-like](/up.util.isList), otherwise\n  returns an array with the given value as its only element.\n\n  Returns an empty array if called with `null` or `undefined`.\n\n  ### Example\n\n  ```js\n  up.util.wrapList([1, 2, 3]) // => [1, 2, 3]\n  up.util.wrapList('foo') // => ['foo']\n  up.util.wrapList(undefined) // => []\n  up.util.wrapList(null) // => []\n  ```\n\n  @function up.util.wrapList\n  @param {any} value\n  @return {Array|NodeList|jQuery}\n  @experimental\n  */\n  function wrapList(value) {\n    if (isList(value)) {\n      return value\n    } else if (isMissing(value)) {\n      return []\n    } else {\n      return [value]\n    }\n  }\n\n  /*-\n  Returns a shallow copy of the given value.\n\n  ### Copying protocol\n\n  - By default `up.util.copy()` can copy [array-like values](/up.util.isList),\n    plain objects and `Date` instances.\n  - Array-like objects are copied into new arrays.\n  - Unsupported types of values are returned unchanged.\n  - To make the copying protocol work with user-defined class,\n    see `up.util.copy.key`.\n  - Immutable objects, like strings or numbers, do not need to be copied.\n\n  @function up.util.copy\n  @param {any} object\n  @return {any}\n  @stable\n  */\n  function copy(value)  {\n    if (isObject(value) && value[copy.key]) {\n      value = value[copy.key]()\n    } else if (isList(value)) {\n      value = copyArrayLike(value)\n    } else if (isOptions(value)) {\n      value = Object.assign({}, value)\n    }\n    return value\n  }\n\n  function copyArrayLike(arrayLike) {\n    return Array.prototype.slice.call(arrayLike)\n  }\n\n  /*-\n  This property contains the name of a method that user-defined classes\n  may implement to hook into the `up.util.copy()` protocol.\n\n  ### Example\n\n  We have a user-defined `Account` class that we want to use with `up.util.copy()`:\n\n  ```js\n  class Account {\n    constructor(email) {\n      this.email = email\n    }\n\n    [up.util.copy.key]() {\n      return new Account(this.email)\n    }\n  }\n  ```\n\n  > [NOTE]\n  > The protocol method is not actually named `'up.util.copy.key'`.\n  > Instead it is named after the *value* of the `up.util.copy.key` property.\n  > To do so, the code sample above is using a\n  > [computed property name](https://medium.com/front-end-weekly/javascript-object-creation-356e504173a8)\n  > in square brackets.\n\n  We may now use `Account` instances with `up.util.copy()`:\n\n  ```\n  original = new User('foo@foo.com')\n\n  copy = up.util.copy(original)\n  console.log(copy.email) // prints 'foo@foo.com'\n\n  original.email = 'bar@bar.com' // change the original\n  console.log(copy.email) // still prints 'foo@foo.com'\n  ```\n\n  @property up.util.copy.key\n  @param {string} key\n  @experimental\n  */\n  copy.key = 'up.util.copy'\n\n  // Implement up.util.copy protocol for Date\n  Date.prototype[copy.key] = function() { return new Date(+this) }\n\n  /*-\n  Creates a new object by merging together the properties from the given objects.\n\n  ### Example\n\n  ```js\n  let a = { a: '1', b: '2' }\n  let b = { b: '3', c: '4' }\n  up.util.merge(a, b) // => { a: '1', b: '3', c: '4' }\n  ```\n\n  @function up.util.merge\n  @param {Array<Object>} sources...\n  @return Object\n  @stable\n  */\n  function merge(...sources) {\n    return Object.assign({}, ...sources)\n  }\n\n  /*-\n  @function up.util.mergeDefined\n  @param {Array<Object>} sources...\n  @return Object\n  @internal\n  */\n  function mergeDefined(...sources) {\n    const result = {}\n    for (let source of sources) {\n      if (source) {\n        for (let key in source) {\n          const value = source[key]\n          if (isDefined(value)) {\n            result[key] = value\n          }\n        }\n      }\n    }\n    return result\n  }\n\n  /*-\n  Creates an options hash from the given argument and some defaults.\n\n  The semantics of this function are confusing.\n  We want to get rid of this in the future.\n\n  @function up.util.options\n  @param {Object} object\n  @param {Object} [defaults]\n  @return {Object}\n  @internal\n  */\n  function newOptions(object, defaults) {\n    if (defaults) {\n      return merge(defaults, object)\n    } else if (object) {\n      return copy(object)\n    } else {\n      return {}\n    }\n  }\n\n  function parseArgIntoOptions(args, argKey) {\n    let options = extractOptions(args)\n    if (isDefined(args[0])) {\n      options = copy(options)\n      options[argKey] = args[0]\n    }\n    return options\n  }\n\n  /*-\n  Passes each element in the given [array-like value](/up.util.isList) to the given function.\n  Returns the first element for which the function returns a truthy value.\n\n  If no object matches, returns `undefined`.\n\n  @function up.util.find\n  @param {List<T>} list\n  @param {Function(value): boolean} tester\n  @return {T|undefined}\n  @stable\n  */\n  function findInList(list, tester) {\n    tester = iteratee(tester)\n    let match\n    for (let element of list) {\n      if (tester(element)) {\n        match = element\n        break\n      }\n    }\n    return match\n  }\n\n  /*-\n  Returns whether the given function returns a truthy value\n  for any element in the given [array-like value](/up.util.isList).\n\n  @function up.util.some\n  @param {List} list\n  @param {Function(value, index): boolean} tester\n    A function that will be called with each element and (optional) iteration index.\n\n  @return {boolean}\n  @stable\n  */\n  function some(list, tester) {\n    return !!findResult(list, tester)\n  }\n\n  /*-\n  Consecutively calls the given function which each element\n  in the given list. Returns the first truthy return value.\n\n  Returned `undefined` iff the function does not return a truthy\n  value for any element in the list.\n\n  @function up.util.findResult\n  @param {List|Iterator} list\n  @param {Function(element): any} tester\n    A function that will be called with each element and (optional) iteration index.\n\n  @return {any|undefined}\n  @experimental\n  */\n  function findResult(list, tester) {\n    tester = iteratee(tester)\n    let i = 0\n    for (let item of list) {\n      const result = tester(item, i++)\n      if (result) {\n        return result\n      }\n    }\n  }\n\n  /*-\n  Returns whether the given function returns a truthy value\n  for all elements in the given [list](/up.util.isList) or iterator.\n\n  @function up.util.every\n  @param {List|Iterator} list\n  @param {Function(element, index): boolean} tester\n    A function that will be called with each element and (optional) iteration index.\n\n  @return {boolean}\n  @experimental\n  */\n  function every(list, tester) {\n    tester = iteratee(tester)\n    let match = true\n    let i = 0\n    for (let item of list) {\n      if (!tester(item, i++)) {\n        match = false\n        break\n      }\n    }\n    return match\n  }\n\n  /*-\n  Returns all elements from the given [list](/up.util.isList) that are\n  neither `null` or `undefined`.\n\n  @function up.util.compact\n  @param {List<T>} list\n  @return {Array<T>}\n  @stable\n  */\n  function compact(array) {\n    return filterList(array, isGiven)\n  }\n\n  function filterMap(list, mapping) {\n    return filterList(map(list, mapping), isDefined)\n  }\n\n  function compactObject(object) {\n    return pickBy(object, isGiven)\n  }\n\n  /*-\n  Returns the given array without duplicates.\n\n  @function up.util.uniq\n  @param {Array<T>} array\n  @return {Array<T>}\n  @stable\n  */\n  function uniq(array) {\n    if (array.length < 2) { return array }\n    return Array.from(new Set(array))\n  }\n\n  /*-\n  This function is like [`uniq`](/up.util.uniq), accept that\n  the given function is invoked for each element to generate the value\n  for which uniquness is computed.\n\n  @function up.util.uniqBy\n  @param {Array} array\n  @param {Function(value): any} array\n  @return {Array}\n  @experimental\n  */\n  function uniqBy(array, mapper) {\n    if (array.length < 2) { return array }\n    mapper = iteratee(mapper)\n    const seenElements = new Set()\n    return filterList(array, function(elem, index) {\n      const mapped = mapper(elem, index)\n      if (seenElements.has(mapped)) {\n        return false\n      } else {\n        seenElements.add(mapped)\n        return true\n      }\n    })\n  }\n\n  /*-\n  Returns all elements from the given [list](/up.util.isList) that return\n  a truthy value when passed to the given function.\n\n  @function up.util.filter\n  @param {List|Iterator} list\n  @param {Function(value, index): boolean} tester\n  @return {Array}\n  @stable\n  */\n  function filterList(list, tester) {\n    tester = iteratee(tester)\n    const matches = []\n    each(list, function(element, index) {\n      if (tester(element, index)) {\n        return matches.push(element)\n      }\n    })\n    return matches\n  }\n\n  /*-\n  Returns all elements from the given [array-like value](/up.util.isList) that do not return\n  a truthy value when passed to the given function.\n\n  @function up.util.reject\n  @param {List} list\n  @param {Function(element, index): boolean} tester\n  @return {Array}\n  @stable\n  */\n  function reject(list, tester) {\n    tester = negate(iteratee(tester))\n    return filterList(list, tester)\n  }\n\n  /*-\n  Returns the intersection of the given two arrays.\n\n  Implementation is not optimized. Don't use it for large arrays.\n\n  @function up.util.intersect\n  @internal\n  */\n  function intersect(array1, array2) {\n    return filterList(array1, element => contains(array2, element))\n  }\n\n  /*-\n  Waits for the given number of milliseconds, the runs the given callback.\n\n  Instead of `up.util.timer(0, fn)` you can also use [`up.util.task(fn)`](/up.util.task).\n\n  @function up.util.timer\n  @param {number} millis\n  @param {Function()} callback\n  @return {number}\n    The ID of the scheduled timeout.\n\n    You may pass this ID to `clearTimeout()` to un-schedule the timeout.\n  @stable\n  */\n  function scheduleTimer(millis, callback) {\n    return setTimeout(callback, millis)\n  }\n\n  /*-\n  Pushes the given function to the [JavaScript task queue](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/) (also \"macrotask queue\").\n\n  Equivalent to calling `setTimeout(fn, 0)`.\n\n  Also see `up.util.microtask()`.\n\n  @function up.util.task\n  @param {Function()} block\n  @stable\n  */\n  function queueTask(task) {\n    return setTimeout(task)\n  }\n\n  /*-\n  Pushes the given function to the [JavaScript microtask queue](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/).\n\n  @function up.util.microtask\n  @param {Function()} task\n  @return {Promise}\n    A promise that is resolved with the return value of `task`.\n\n    If `task` throws an error, the promise is rejected with that error.\n  @experimental\n  */\n  function queueMicrotask(task) {\n    return Promise.resolve().then(task)\n  }\n\n  /*-\n  Returns the last element of the given array or string.\n\n  @function up.util.last\n  @param {Array<T>|string} array\n  @return {T|string}\n  @stable\n  */\n  function last(value) {\n    return value[value.length - 1]\n  }\n\n  /*-\n  Returns whether the given value contains another value.\n\n  If `value` is a string, this returns whether `subValue` is a sub-string of `value`.\n\n  If `value` is an array, this returns whether `subValue` is an element of `value`.\n\n  @function up.util.contains\n  @param {Array|NodeList|string} value\n  @param {any} subValue\n  @stable\n  */\n  function contains(value, subValue) {\n    let indexOf = value.indexOf || Array.prototype.indexOf\n    return indexOf.call(value, subValue) >= 0\n  }\n\n  /*-\n  Returns whether `object`'s entries are a superset\n  of `subObject`'s entries.\n\n  @function up.util.objectContains\n  @param {Object} object\n  @param {Object} subObject\n  @internal\n  */\n  function objectContains(object, subObject) {\n    const reducedValue = pick(object, Object.keys(subObject))\n    return isEqual(subObject, reducedValue)\n  }\n\n  /*-\n  Returns a copy of the given object that only contains\n  the given keys.\n\n  @function up.util.pick\n  @param {Object} object\n  @param {Array} keys\n  @return {Object}\n  @stable\n  */\n  function pick(object, keys) {\n    const filtered = {}\n    for (let key of keys) {\n      if (key in object) {\n        filtered[key] = object[key]\n      }\n    }\n    return filtered\n  }\n\n  /*-\n  Returns a copy of the given object that only contains\n  properties that pass the given tester function.\n\n  @function up.util.pickBy\n  @param {Object} object\n  @param {Function(string, string, object): boolean} tester\n    A function that will be called with each property.\n\n    The arguments are the property value, key and the entire object.\n  @return {Object}\n  @experimental\n  */\n  function pickBy(object, tester) {\n    tester = iteratee(tester)\n    const filtered = {}\n    for (let key in object) {\n      const value = object[key]\n      if (tester(value, key, object)) {\n        filtered[key] = object[key]\n      }\n    }\n    return filtered\n  }\n\n  /*-\n  Returns a copy of the given object that contains all except\n  the given keys.\n\n  @function up.util.omit\n  @param {Object} object\n  @param {Array} keys\n  @stable\n  */\n  function omit(object, keys) {\n    return pickBy(object, (_value, key) => !contains(keys, key))\n  }\n\n  /*-\n  Returns a promise that will never be resolved.\n\n  @function up.util.unresolvablePromise\n  @internal\n  */\n  function unresolvablePromise() {\n    return new Promise(noop)\n  }\n\n  /*-\n  Removes the given element from the given array.\n\n  This changes the given array.\n\n  @function up.util.remove\n  @param {Array<T>} array\n    The array to change.\n  @param {T} element\n    The element to remove.\n  @return {T|undefined}\n    The removed element, or `undefined` if the array didn't contain the element.\n  @stable\n  */\n  function remove(array, element) {\n    const index = array.indexOf(element)\n    if (index >= 0) {\n      array.splice(index, 1)\n      return element\n    }\n  }\n\n  /*-\n  If the given `value` is a function, calls the function with the given `args`.\n  Otherwise it just returns `value`.\n\n  ### Example\n\n  ```js\n  up.util.evalOption(5) // => 5\n\n  let fn = () => 1 + 2\n  up.util.evalOption(fn) // => 3\n  ```\n\n  @function up.util.evalOption\n  @param {any} value\n  @param {Array} ...args\n  @return {any}\n  @experimental\n  */\n  function evalOption(value, ...args) {\n    return isFunction(value) ? value(...args) : value\n  }\n\n  function evalAutoOption(value, autoMeans, ...args) {\n    value = evalOption(value, ...args)\n    // Allow functions to return 'auto'\n    if (value === 'auto') {\n      value = evalOption(autoMeans, ...args)\n    }\n    return value\n  }\n\n  const ESCAPE_HTML_ENTITY_MAP = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#x27;'\n  }\n\n  /*-\n  Escapes the given string of HTML by replacing control chars with their HTML entities.\n\n  @function up.util.escapeHTML\n  @param {string} string\n    The text that should be escaped.\n  @stable\n  */\n  function escapeHTML(string) {\n    return string.replace(/[&<>\"']/g, char => ESCAPE_HTML_ENTITY_MAP[char])\n  }\n\n  /*-\n  @function up.util.escapeRegExp\n  @internal\n  */\n  function escapeRegExp(string) {\n    // From https://github.com/benjamingr/RegExp.escape\n    return string.replace(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n  }\n\n  // function groupBy(list, block) {\n  //   block = iteratee(block)\n  //   let groups = {}\n  //   for (let entry in list) {\n  //     let key = block(entry)\n  //     let group = (groups[key] ||= [])\n  //     group.push(entry)\n  //   }\n  //   return groups\n  // }\n\n  /*-\n  Deletes the property with the given key from the given object\n  and returns its value.\n\n  @function up.util.pluckKey\n  @param {Object} object\n  @param {string} key\n  @return {any}\n  @experimental\n  */\n  function pluckKey(object, key) {\n    const value = object[key]\n    delete object[key]\n    return value\n  }\n\n  function renameKey(object, oldKey, newKey) {\n    return object[newKey] = pluckKey(object, oldKey)\n  }\n\n  function extractLastArg(args, tester) {\n    if (tester(last(args))) {\n      return args.pop()\n    }\n  }\n\n//  extractFirstArg = (args, tester) ->\n//    firstArg = args[0]\n//    if tester(firstArg)\n//      return args.shift()\n\n  function extractCallback(args) {\n    return extractLastArg(args, isFunction)\n  }\n\n  function extractOptions(args) {\n    return extractLastArg(args, isOptions) || {}\n  }\n\n//  partial = (fn, fixedArgs...) ->\n//    return (callArgs...) ->\n//      fn.apply(this, fixedArgs.concat(callArgs))\n//\n//  partialRight = (fn, fixedArgs...) ->\n//    return (callArgs...) ->\n//      fn.apply(this, callArgs.concat(fixedArgs))\n\n//function throttle(callback, limit) { // From https://jsfiddle.net/jonathansampson/m7G64/\n//  var wait = false                   // Initially, we're not waiting\n//  return function () {               // We return a throttled function\n//    if (!wait) {                     // If we're not waiting\n//      callback.call()                // Execute users function\n//      wait = true                    // Prevent future invocations\n//      setTimeout(function () {       // After a period of time\n//        wait = false                 // And allow future invocations\n//      }, limit)\n//    }\n//  }\n//}\n\n  function identity(arg) {\n    return arg\n  }\n\n//  ###**\n//  ###\n//  parsePath = (input) ->\n//    path = []\n//    pattern = /([^\\.\\[\\]\\\"\\']+)|\\[\\'([^\\']+?)\\'\\]|\\[\\\"([^\\\"]+?)\\\"\\]|\\[([^\\]]+?)\\]/g\n//    while match = pattern.exec(input)\n//      path.push(match[1] || match[2] || match[3] || match[4])\n//    path\n\n//  ###**\n//  Given an async function that will return a promise, returns a proxy function\n//  with an additional `.promise` attribute.\n//\n//  When the proxy is called, the inner function is called.\n//  The proxy's `.promise` attribute is available even before the function is called\n//  and will resolve when the inner function's returned promise resolves.\n//\n//  If the inner function does not return a promise, the proxy's `.promise` attribute\n//  will resolve as soon as the inner function returns.\n//\n//  @function up.util.previewable\n//  @internal\n//  ###\n//  previewable = (fun) ->\n//    deferred = newDeferred()\n//    preview = (args...) ->\n//      funValue = fun(args...)\n//      # If funValue is again a Promise, it will defer resolution of `deferred`\n//      # until `funValue` is resolved.\n//      deferred.resolve(funValue)\n//      funValue\n//    preview.promise = deferred.promise()\n//    preview\n\n  /*-\n  @function up.util.sequence\n  @param {Array<Function()>} functions\n  @return {Function()}\n    A function that will call all `functions` if called.\n  @internal\n  */\n  function sequence(functions) {\n    functions = compact(functions)\n    return (...args) => map(functions, fn => fn(...args))\n  }\n\n//  ###**\n//  @function up.util.race\n//  @internal\n//  ###\n//  race = (promises...) ->\n//    raceDone = newDeferred()\n//    each promises, (promise) ->\n//      promise.then -> raceDone.resolve()\n//    raceDone.promise()\n\n//  ###**\n//  Returns `'left'` if the center of the given element is in the left 50% of the screen.\n//  Otherwise returns `'right'`.\n//\n//  @function up.util.horizontalScreenHalf\n//  @internal\n//  ###\n//  horizontalScreenHalf = (element) ->\n//    elementDims = element.getBoundingClientRect()\n//    elementMid = elementDims.left + 0.5 * elementDims.width\n//    screenMid = 0.5 * up.viewport.rootWidth()\n//    if elementMid < screenMid\n//      'left'\n//    else\n//      'right'\n\n  /*-\n  Flattens the given `array` a single depth level.\n\n  ### Example\n\n  ```js\n  let nested = [1, [2, 3], [4]]\n  up.util.flatten(nested) // => [1, 2, 3, 4]\n\n  @function up.util.flatten\n  @param {Array} array\n    An array which might contain other arrays\n  @return {Array}\n    The flattened array\n  @experimental\n  */\n  function flatten(array) {\n    const flattened = []\n    for (let object of array) {\n      if (isList(object)) {\n        flattened.push(...object)\n      } else {\n        flattened.push(object)\n      }\n    }\n    return flattened\n  }\n\n//  flattenObject = (object) ->\n//    result = {}\n//    for key, value of object\n//      result[key] = value\n//    result\n\n  /*-\n  Maps each element using a mapping function,\n  then [flattens](/up.util.flatten) the result into a new array.\n\n  @function up.util.flatMap\n  @param {List|Iterator} list\n  @param {Function(element)} mapping\n  @return {Array}\n  @experimental\n  */\n  function flatMap(array, block) {\n    return flatten(map(array, block))\n  }\n\n  /*-\n  Sets the given callback as both fulfillment and rejection handler for the given promise.\n\n  [Unlike `promise#finally()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally#Description), `up.util.always()` may change the settlement value\n  of the given promise.\n\n  ### Example: Callback style\n\n  ```js\n  let process = (value) => console.log(value)\n  up.always(promise, process)\n  ```\n\n  ### Example with `await`\n\n  ```js\n  let value = await up.always(promise)\n  console.log(value)\n  ```\n\n  @function up.util.always\n  @internal\n  */\n  function always(promise, callback = identity) {\n    return promise.then(callback, callback)\n  }\n\n  /*-\n  @function up.util.newDeferred\n  @internal\n  */\n  function newDeferred() {\n    let resolveFn\n    let rejectFn\n    const nativePromise = new Promise(function(givenResolve, givenReject) {\n      resolveFn = givenResolve\n      rejectFn = givenReject\n    })\n    nativePromise.resolve = resolveFn\n    nativePromise.reject = rejectFn\n    return nativePromise\n  }\n\n//  ###**\n//  Calls the given block. If the block throws an exception,\n//  a rejected promise is returned instead.\n//\n//  @function up.util.rejectOnError\n//  @internal\n//  ###\n//  rejectOnError = (block) ->\n//    try\n//      block()\n//    catch error\n//      Promise.reject(error)\n\n//  sum = (list, block) ->\n//    block = iteratee(block)\n//    totalValue = 0\n//    for entry in list\n//      entryValue = block(entry)\n//      if isGiven(entryValue) # ignore undefined/null, like SQL would do\n//        totalValue += entryValue\n//    totalValue\n\n  function isBasicObjectProperty(k) {\n    return Object.prototype.hasOwnProperty(k) // eslint-disable-line no-prototype-builtins\n  }\n\n  /*-\n  Returns whether the two arguments are equal by value.\n\n  ### Comparison protocol\n\n  - By default `up.util.isEqual()` can compare strings, numbers,\n    [array-like values](/up.util.isList), plain objects and `Date` objects.\n  - To make the copying protocol work with user-defined classes,\n    see `up.util.isEqual.key`.\n  - Objects without a defined comparison protocol are\n    defined by reference (`===`).\n\n  @function up.util.isEqual\n  @param {any} a\n  @param {any} b\n  @return {boolean}\n    Whether the arguments are equal by value.\n  @experimental\n  */\n  function isEqual(a, b) {\n    if (a?.valueOf) { a = a.valueOf() } // Date, String objects, Number objects\n    if (b?.valueOf) { b = b.valueOf() } // Date, String objects, Number objects\n    if (typeof(a) !== typeof(b)) {\n      return false\n    } else if (isList(a) && isList(b)) {\n      return isEqualList(a, b)\n    } else if (isObject(a) && a[isEqual.key]) {\n      return a[isEqual.key](b)\n    } else if (isOptions(a) && isOptions(b)) {\n      const aKeys = Object.keys(a)\n      const bKeys = Object.keys(b)\n      if (isEqualList(aKeys, bKeys)) {\n        return every(aKeys, aKey => isEqual(a[aKey], b[aKey]))\n      } else {\n        return false\n      }\n    } else {\n      return a === b\n    }\n  }\n\n  /*-\n  This property contains the name of a method that user-defined classes\n  may implement to hook into the `up.util.isEqual()` protocol.\n\n  ### Example\n\n  We have a user-defined `Account` class that we want to use with `up.util.isEqual()`:\n\n  ```\n  class Account {\n    constructor(email) {\n      this.email = email\n    }\n\n    [up.util.isEqual.key](other) {\n      return this.email === other.email\n    }\n  }\n  ```\n\n  Note that the protocol method is not actually named `'up.util.isEqual.key'`.\n  Instead it is named after the *value* of the `up.util.isEqual.key` property.\n  To do so, the code sample above is using a\n  [computed property name](https://medium.com/front-end-weekly/javascript-object-creation-356e504173a8)\n  in square brackets.\n\n  We may now use `Account` instances with `up.util.isEqual()`:\n\n  ```js\n  let one = new User('foo@foo.com')\n  let two = new User('foo@foo.com')\n  let three = new User('bar@bar.com')\n\n  up.util.isEqual(one, two)   // returns true\n  up.util.isEqual(one, three) // returns false\n  ```\n\n  @property up.util.isEqual.key\n  @param {string} key\n  @experimental\n  */\n  isEqual.key = 'up.util.isEqual'\n\n  function isEqualList(a, b) {\n    return (a.length === b.length) && every(a, (elem, index) => isEqual(elem, b[index]))\n  }\n\n  const PARSE_TOKEN_PATTERNS = {\n    'space/or': /\\s+(?:or\\s+)?/,\n    'or': /\\s+or\\s+/,\n    'comma': /\\s*,\\s*/\n  }\n\n  function parseTokens(value, options = {}) {\n    if (isString(value)) {\n      value = value.trim()\n      if (options.json && /^\\[.*]$/.test(value)) {\n        return JSON.parse(value)\n      } else {\n        let separator = options.separator || 'space/or'\n        let pattern = PARSE_TOKEN_PATTERNS[separator]\n        return value.split(pattern)\n      }\n    } else {\n      return wrapList(value)\n    }\n  }\n\n  function wrapValue(constructor, ...args) {\n    return (args[0] instanceof constructor) ? args[0] : new constructor(...args)\n  }\n\n//  wrapArray = (objOrArray) ->\n//    if isUndefined(objOrArray)\n//      []\n//    else if isArray(objOrArray)\n//      objOrArray\n//    else\n//      [objOrArray]\n\n  let nextUid = 0\n\n  function uid() {\n    return nextUid++\n  }\n\n  /*-\n  Returns a copy of the given list, in reversed order.\n\n  @function up.util.reverse\n  @param {List<T>} list\n  @return {Array<T>}\n  @internal\n  */\n  function reverse(list) {\n    return copy(list).reverse()\n  }\n\n//  ###**\n//  Returns a copy of the given `object` with the given `prefix` removed\n//  from its camel-cased keys.\n//\n//  @function up.util.unprefixKeys\n//  @param {Object} object\n//  @param {string} prefix\n//  @return {Object}\n//  @internal\n//  ###\n//  unprefixKeys = (object, prefix) ->\n//    unprefixed = {}\n//    prefixLength = prefix.length\n//    for key, value of object\n//      if key.indexOf(prefix) == 0\n//        key = unprefixCamelCase(key, prefixLength)\n//      unprefixed[key] = value\n//    unprefixed\n\n//  replaceValue = (value, matchValue, replaceValueFn) ->\n//    if value == matchValue\n//      return replaceValueFn()\n//    else\n//      return value\n\n  function renameKeys(object, renameKeyFn) {\n    const renamed = {}\n    for (let key in object) {\n      renamed[renameKeyFn(key)] = object[key]\n    }\n    return renamed\n  }\n\n  function camelToKebabCase(str) {\n    return str.replace(/[A-Z]/g, char => '-' + char.toLowerCase())\n  }\n\n  // function prefixCamelCase(str, prefix) {\n  //   return prefix + upperCaseFirst(str)\n  // }\n  //\n  // function unprefixCamelCase(str, prefix) {\n  //   const pattern = new RegExp('^' + prefix + '(.+)$')\n  //   let match = str.match(pattern)\n  //   if (match) {\n  //     return lowerCaseFirst(match[1])\n  //   }\n  // }\n\n  function lowerCaseFirst(str) {\n    return str[0].toLowerCase() + str.slice(1)\n  }\n\n  function upperCaseFirst(str) {\n    return str[0].toUpperCase() + str.slice(1)\n  }\n\n  function defineDelegates(object, props, targetProvider) {\n    for (let prop of props) {\n      Object.defineProperty(object, prop, {\n        get() {\n          const target = targetProvider.call(this)\n          let value = target[prop]\n          if (isFunction(value)) {\n            value = value.bind(target)\n          }\n          return value\n        },\n        set(newValue) {\n          const target = targetProvider.call(this)\n          target[prop] = newValue\n        }\n      })\n    }\n  }\n\n  // function defineTemporaryDelegates(object, props, targetProvider) {\n  //   let undo = sequence(props.map((prop) => {\n  //     let oldDescriptor = Object.getOwnPropertyDescriptor(object, prop)\n  //     // There's a case where Object.getOwnPropertyDescriptor() is missing because it is\n  //     // a inherited property. In this case it is non-trivial to undo the temporary delegation.\n  //     // Since we don't need that case, we don't handle it.\n  //     return () => Object.defineProperty(object, prop, oldDescriptor)\n  //     }\n  //   ))\n  //   defineDelegates(object, props, targetProvider)\n  //   return undo\n  // }\n\n  function stringifyArg(arg, placeholder = '%o') {\n    let string\n    const maxLength = 200\n\n    // Discard color styles: https://developer.mozilla.org/en-US/docs/Web/API/Console#styling_console_output\n    if (placeholder === '%c') {\n      return ''\n    }\n\n    // In the browser console %s always stringifies the output.\n    // Objects become \"[object Object]\".\n    if (placeholder === '%s' && isGiven(arg)) {\n      arg = arg.toString()\n    }\n\n    if (isString(arg)) {\n      string = arg.trim().replace(/[\\n\\r\\t ]+/g, ' ')\n\n      // In the browser console %o displays a string with quotes\n      if (placeholder === '%o') {\n        string = JSON.stringify(string)\n      }\n    } else if (isUndefined(arg)) {\n      // JSON.stringify(undefined) is actually undefined\n      string = 'undefined'\n    } else if (isNumber(arg) || isFunction(arg)) {\n      string = arg.toString()\n    } else if (isArray(arg)) {\n      string = `[${map(arg, stringifyArg).join(', ')}]`\n    } else if (isJQuery(arg)) {\n      string = `$(${map(arg, stringifyArg).join(', ')})`\n    } else if (isElement(arg)) {\n      string = `<${arg.tagName.toLowerCase()}`\n      for (let attr of ['id', 'up-id', 'name', 'class']) {\n        let value = arg.getAttribute(attr)\n        if (value) {\n          string += ` ${attr}=\"${value}\"`\n        }\n      }\n      string += \">\"\n    } else if (isRegExp(arg) || isError(arg)) {\n      string = arg.toString()\n    } else { // object, null\n      try {\n        string = JSON.stringify(arg)\n      } catch (error) {\n        if (error.name === 'TypeError') {\n          string = '(circular structure)'\n        } else {\n          throw error\n        }\n      }\n    }\n\n    if (string.length > maxLength) {\n      string = `${string.substr(0, maxLength)}\u2026${last(string)}`\n    }\n    return string\n  }\n\n  const SPRINTF_PLACEHOLDERS = /%[oOdisfc]/g\n\n  /*-\n  See https://developer.mozilla.org/en-US/docs/Web/API/Console#Using_string_substitutions\n\n  @function up.util.sprintf\n  @internal\n  */\n  function sprintf(message, ...args) {\n    return message.replace(SPRINTF_PLACEHOLDERS, (placeholder) => stringifyArg(args.shift(), placeholder))\n  }\n\n  function negate(fn) {\n    return function(...args) {\n      return !fn(...args)\n    }\n  }\n\n  function useMemoizeCacheEntry(cacheEntry) {\n    if (cacheEntry.error) {\n      throw cacheEntry.error\n    } else {\n      return cacheEntry.value\n    }\n  }\n\n  function buildMemoizeCacheEntry(oldImpl, self, args) {\n    try {\n      return { value: oldImpl.apply(self, args) }\n    } catch (e) {\n      return { error: e }\n    }\n  }\n\n  // function memoizeMethodOrGetter(object, propLiteral) {\n  //   // We're accepting the property names as the keys of an object. We don't care about the values.\n  //   // We do this so that object's keys go through the same property mangling as the rest of the code.\n  //   for (let prop in propLiteral) {\n  //     let originalDescriptor = Object.getOwnPropertyDescriptor(object, prop)\n  //\n  //     let oldImpl = originalDescriptor.get || originalDescriptor.value\n  //\n  //     let cachingImpl = function(...args) {\n  //       let cache = this[`__${prop}MemoizeCache`] ||= {}\n  //       let cacheKey = JSON.stringify(args)\n  //       cache[cacheKey] ||= buildMemoizeCacheEntry(oldImpl, this, args)\n  //       return useMemoizeCacheEntry(cache[cacheKey])\n  //     }\n  //\n  //     if (originalDescriptor.get) {\n  //       Object.defineProperty(object, prop, {\n  //         get: cachingImpl\n  //       })\n  //     } else {\n  //       object[prop] = cachingImpl\n  //     }\n  //\n  //   }\n  // }\n\n  function memoizeMethod(object, propLiteral) {\n    // We're accepting the property names as the keys of an object. We don't care about the values.\n    // We do this so that object's keys go through the same property mangling as the rest of the code.\n    for (let prop in propLiteral) {\n      let originalDescriptor = Object.getOwnPropertyDescriptor(object, prop)\n\n      let oldImpl = originalDescriptor.value\n\n      let cachingImpl = function(...args) {\n        let cache = this[`__${prop}MemoizeCache`] ||= {}\n        let cacheKey = JSON.stringify(args)\n        cache[cacheKey] ||= buildMemoizeCacheEntry(oldImpl, this, args)\n        return useMemoizeCacheEntry(cache[cacheKey])\n      }\n\n      object[prop] = cachingImpl\n    }\n  }\n\n  function safeStringifyJSON(value) {\n    let json = JSON.stringify(value)\n    return escapeHighASCII(json)\n  }\n\n  function escapeHighASCII(string) {\n    let unicodeEscape = (char) => \"\\\\u\" + char.charCodeAt(0).toString(16).padStart(4, '0')\n    return string.replace(/[^\\x00-\\x7F]/g, unicodeEscape)\n  }\n\n  function variant(source, changes = {}) {\n    let variant = Object.create(source)\n    Object.assign(variant, changes)\n    return variant\n  }\n\n  return {\n    parseURL,\n    normalizeURL,\n    matchURLs,\n    normalizeMethod,\n    methodAllowsPayload,\n    copy,\n    copyArrayLike,\n    merge,\n    mergeDefined,\n    options: newOptions,\n    parseArgIntoOptions,\n    each,\n    map,\n    flatMap,\n    mapObject,\n    findResult,\n    some,\n    every,\n    find: findInList,\n    filter: filterList,\n    filterMap: filterMap,\n    reject,\n    intersect,\n    compact,\n    compactObject,\n    uniq,\n    uniqBy,\n    last,\n    isNull,\n    isDefined,\n    isUndefined,\n    isGiven,\n    isMissing,\n    isPresent,\n    isBlank,\n    presence,\n    isObject,\n    isFunction,\n    isString,\n    isBoolean,\n    isNumber,\n    isElement,\n    isJQuery,\n    isElementish,\n    isPromise,\n    isOptions,\n    isArray,\n    isFormData,\n    // isNodeList,\n    // isArguments,\n    isList,\n    isRegExp,\n    timer: scheduleTimer,\n    contains,\n    objectContains,\n    toArray,\n    pick,\n    pickBy,\n    omit,\n    unresolvablePromise,\n    remove,\n    memoize,\n    pluckKey,\n    renameKey,\n    extractOptions,\n    extractCallback,\n    noop,\n    asyncNoop,\n    identity,\n    escapeHTML,\n    escapeRegExp,\n    sequence,\n    evalOption,\n    evalAutoOption,\n    flatten,\n    newDeferred,\n    always,\n    isBasicObjectProperty,\n    isCrossOrigin,\n    task: queueTask,\n    microtask: queueMicrotask,\n    isEqual,\n    parseTokens,\n    wrapList,\n    wrapValue,\n    uid,\n    upperCaseFirst,\n    lowerCaseFirst,\n    delegate: defineDelegates,\n    // temporaryDelegate: defineTemporaryDelegates,\n    reverse,\n    // prefixCamelCase,\n    // unprefixCamelCase,\n    camelToKebabCase,\n    nullToUndefined,\n    sprintf,\n    renameKeys,\n    negate,\n    memoizeMethod,\n    safeStringifyJSON,\n    // groupBy,\n    variant,\n  }\n})()\n", "up.error = (function() {\n\n  /*-\n  Throws a [JavaScript error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)\n  with the given message.\n\n  The message may contain [substitution marks](https://developer.mozilla.org/en-US/docs/Web/API/console#Using_string_substitutions).\n\n  ### Examples\n\n      up.fail('Division by zero')\n      up.fail('Unexpected result %o', result)\n\n  @function up.fail\n  @param {string} message\n    A message with details about the error.\n\n    The message can contain [substitution marks](https://developer.mozilla.org/en-US/docs/Web/API/console#Using_string_substitutions)\n    like `%s` or `%o`.\n  @param {Array<string>} vars...\n    A list of variables to replace any substitution marks in the error message.\n  @internal\n  */\n  function fail(...args) {\n    // Yes, we pass the message plus all substitution vars as an array in the first arg slot.\n    throw new up.Error(args)\n  }\n\n  function isCritical(error) {\n    return (typeof error !== 'object') || ((error.name !== 'AbortError') && !(error instanceof up.RenderResult) && !(error instanceof up.Response))\n  }\n\n  /*-\n  Registers an empty rejection handler in case the given promise\n  rejects with an uncritical error.\n\n  This prevents browsers from printing \"Uncaught (in promise)\" to the error\n  console when the promise is rejected.\n\n  This is helpful for event handlers where it is clear that no rejection\n  handler will be registered:\n\n  ```js\n  up.on('submit', 'form[up-target]', (event, form) => {\n    promise = up.submit(form)\n    up.error.muteUncriticalRejection(promise)\n  })\n  ```\n\n  Uncriticial errors include:\n\n  - `AbortError`\n  - A failed `up.Response`\n  - A failed `up.RenderResult`\n\n  Other types of errors will not be muted.\n\n  @function up.error.muteUncriticalRejection\n  @param {Promise} promise\n  @return {Promise}\n  @internal\n  */\n  function muteUncriticalRejection(promise) {\n    return promise.catch(throwCritical)\n  }\n\n  function muteUncriticalSync(block) {\n    try {\n      return block()\n    } catch (e) {\n      throwCritical(e)\n    }\n  }\n\n  function throwCritical(value) {\n    if (isCritical(value)) {\n      throw value\n    }\n  }\n\n  // Replace this with window.reportError() once the browser support is there:\n  // https://caniuse.com/mdn-api_reporterror\n  function report(error) {\n    console.error('Uncaught %o', error)\n    let event = new ErrorEvent('error', { error, message: 'Uncaught ' + error })\n    window.dispatchEvent(event)\n  }\n\n  function guard(fn) {\n    try {\n      return fn()\n    } catch (error) {\n      report(error)\n    }\n  }\n\n  function guardFn(fn) {\n    return (...args) => guard(() => fn(...args))\n  }\n\n  return {\n    fail,\n    throwCritical,\n    muteUncriticalRejection,\n    muteUncriticalSync,\n    guard,\n    guardFn,\n  }\n})()\n\nup.fail = up.error.fail\n", "// This object will gain properties when users load the optional unpoly-migrate.js\nup.migrate = { config: {} }\n", "/*-\nBrowser interface\n=================\n\nWe tunnel some browser APIs through this module for easier mocking in tests.\n\n@module up.browser\n*/\nup.browser = (function() {\n  const u = up.util\n\n  /*-\n  Submits the given form with a full page load.\n\n  For mocking in specs.\n\n  @function up.browser.submitForm\n  @internal\n  */\n  function submitForm(form) {\n    form.submit()\n  }\n\n  /*-\n  Returns whether this browser supports manipulation of the current URL\n  via [`history.pushState`](https://developer.mozilla.org/en-US/docs/Web/API/History/pushState).\n\n  When `pushState`  (e.g. through [`up.follow()`](/up.follow)), it will gracefully\n  fall back to a full page load.\n\n  > [NOTE]\n  > Unpoly will not use `pushState` if the initial page was loaded with a request method other than GET.\n\n  @function up.browser.canPushState\n  @return {boolean}\n  @internal\n  */\n  function canPushState() {\n    // We cannot use pushState if the initial request method is a POST for two reasons:\n    //\n    // 1. Unpoly replaces the initial state so it can handle the pop event when the\n    //    user goes back to the initial URL later. If the initial request was a POST,\n    //    Unpoly will wrongly assumed that it can restore the state by reloading with GET.\n    //\n    // 2. Some browsers have a bug where the initial request method is used for all\n    //    subsequently pushed states. That means if the user reloads the page on a later\n    //    GET state, the browser will wrongly attempt a POST request.\n    //    This issue affects Safari 9 and 10 (last tested in 2017-08).\n    //    Modern Firefoxes, Chromes and IE10+ don't have this behavior.\n    //\n    // The way that we work around this is that we don't support pushState if the\n    // initial request method was anything other than GET (but allow the rest of the\n    // Unpoly framework to work). This way Unpoly will fall back to full page loads until\n    // the framework was booted from a GET request.\n    return up.protocol.initialRequestMethod() === 'GET'\n  }\n\n  // Don't memoize so a build may publish window.jQuery after Unpoly was loaded\n  function canJQuery() {\n    return !!window.jQuery\n  }\n\n  const canHasSelector = u.memoize(() => CSS.supports('selector(:has(*))'))\n\n  function popCookie(name) {\n    let value = document.cookie.match(new RegExp(name+\"=(\\\\w+)\"))?.[1]\n    if (value) {\n      document.cookie = name + '=;Max-Age=0;Path=/'\n      return value\n    }\n  }\n\n  /*-\n  @return {boolean}\n  @function up.browser.ensureConfirmed\n  @param {string} options.confirm\n  @param {boolean} options.preload\n  @internal\n  */\n  function assertConfirmed(options) {\n    const confirmed = !options.confirm || window.confirm(options.confirm)\n    if (!confirmed) {\n      throw new up.Aborted('User canceled action')\n    }\n    return true\n  }\n\n  return {\n    submitForm,\n    canPushState,\n    canJQuery,\n    assertConfirmed,\n    popCookie,\n    canHasSelector,\n  }\n})()\n", "[hidden][hidden] {\n  display: none !important;\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiL2hvbWUvaGVubmluZy9Qcm9qZWN0cy91bnBvbHkvc3JjL3VucG9seSIsInNvdXJjZXMiOlsiZWxlbWVudC5zYXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVdBO0VBQ0UiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBuZWVkIHRvIGZpeCB0d28gdGhpbmdzIGFib3V0IHRoZSBzdGFuZGFyZCBgW2hpZGRlbl1gIGF0dHJpYnV0ZTpcbi8vXG4vLyAtIFdlIG5lZWQgdG8gc3RyZW5ndGhlbiB0aGUgZGVmYXVsdCBzdHlsZSBmcm9tIGBkaXNwbGF5OiBoaWRkZW5gIHRvIGBkaXNwbGF5OiBoaWRkZW4gIWltcG9ydGFudGAuXG4vLyAgIE90aGVyd2lzZSAqYW55KiBvdGhlciBgZGlzcGxheWAgcnVsZSBtYXRjaGluZyB0aGUgZWxlbWVudCB3b3VsZCBjYXVzZSB0aGUgaGlkZGVuIGVsZW1lbnRcbi8vICAgdG8gc2hvdy4gRm9yIGV4YW1wbGUgYSBydWxlIGxpa2UgYC5lbGVtZW50IHsgZGlzcGxheTogZmxleDsgfWAuIFNlZSBodHRwczovL21lb3duaS5jYS9oaWRkZW4uaXMuYS5saWUuaHRtbFxuLy8gICBUaGlzIGlzIGFsc28gZG9uZSBieSBDU1MgZnJhbWV3b3JrcyBsaWtlIEJvb3RzdHJhcDogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC4xL2NvbnRlbnQvcmVib290LyNodG1sNS1oaWRkZW4tYXR0cmlidXRlXG4vL1xuLy8gLSBXZSBhbHNvIHRvIGluY3JlYXNlIHRoZSBzcGVjaWZpY2l0eSBvZiBvdXIgbmV3IHJ1bGUgZnJvbSAoMCwgMSwgMCkgdG8gKDAsIDIsIDApLlxuLy8gICBPdGhlcndpc2UgdXNpbmcgYW55IHV0aWxpdHkgY2xhc3Mgb24gdGhlIHNhbWUgZWxlbWVudCB3b3VsZCBjYXVzZSB0aGUgaGlkZGVuIGVsZW1lbnRcbi8vICAgc2hvdyBpZiB0aGUgdXRpbGl0eSBDU1Mgd2FzIGxvYWRlZCBhZnRlciBVbnBvbHkuIEZvciBleGFtcGxlIEJvb3RzdHJhcCB1dGlsaXRpZXNcbi8vICAgbGlrZSBgZC1mbGV4YC4gVGhpcyBpcyBhbHNvIGRvbmUgYnkgR2l0SHViJ3MgUHJpbWVyIGZyYW1ld29yazogaHR0cHM6Ly9naXRodWIuY29tL3ByaW1lci9jc3MvcHVsbC81NjEvZmlsZXNcbltoaWRkZW5dW2hpZGRlbl1cbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50XG4iXX0= */", "require('./element.sass')\n\n/*-\nDOM helpers\n===========\n\nThe `up.element` module offers functions for DOM manipulation and traversal.\n\nIt complements [native `Element` methods](https://www.w3schools.com/jsref/dom_obj_all.asp) and works across all [supported browsers](/up.framework.isSupported).\n\n\n### Differences to `up.fragment`\n\n`up.element` is a low-level API to work with DOM elements directly. Unpoly also a higher-level API in `up.fragment`:\n\n- By default `up.fragment` functions will only see elements from the [current layer](/up.layer.current).\n  `up.element` is not aware of layers and always sees the entire DOM.\n- `up.fragment` functions will ignore elements that are [being destroyed](/up-destroying),\n  but are still finishing an exit [animation](/up.motion) (e.g. fading out).\n- Functions in `up.fragment` support non-standard CSS extensions like `:main` or `:layer`.\n  Functions in `up.element` only understands the CSS selectors supported by the current browser.\n\n@module up.element\n*/\nup.element = (function() {\n\n  const u = up.util\n\n  /*-\n  Returns the first descendant element matching the given selector.\n\n  @function first\n  @param {Element} [parent=document]\n    The parent element whose descendants to search.\n\n    If omitted, all elements in the `document` will be searched.\n  @param {string} selector\n    The CSS selector to match.\n  @return {Element|undefined|null}\n    The first element matching the selector.\n\n    Returns `null` or `undefined` if no element macthes.\n  @internal\n  */\n  function first(...args) {\n    const selector = args.pop()\n    const root = args[0] || document\n    return root.querySelector(selector)\n  }\n\n  /*-\n  Returns a list of the given parent's descendants matching the given selector.\n  The list will also include the parent element if it matches the selector itself.\n\n  @function up.element.subtree\n  @param {Element} parent\n    The parent element for the search.\n  @param {string} selector\n    The CSS selector to match.\n  @return {NodeList<Element>|Array<Element>}\n    A list of all matching elements.\n  @stable\n  */\n  function subtree(root, selector) {\n    const results = []\n\n    if (root.matches(selector)) {\n      results.push(root)\n    }\n\n    results.push(...root.querySelectorAll(selector))\n\n    return results\n  }\n\n  /*-\n  Returns whether the given element is either the given root element\n  or its descendants.\n\n  @function contains\n  @internal\n  */\n  function contains(root, selectorOrElement) {\n    const element = getOne(selectorOrElement)\n    // We cannot use `root.contains(element)` as <form> elements with an input named \"contains\"\n    // would define `root.contains` to return that input (GH#507).\n    return Node.prototype.contains.call(root, element)\n  }\n\n  /*-\n  @function up.element.ancestor\n  @internal\n  */\n  function ancestor(element, selector) {\n    return element.parentNode?.closest(selector)\n  }\n\n  function around(element, selector) {\n    return getList(element.closest(selector), subtree(element, selector))\n  }\n\n  /*-\n  Returns the native [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) for the given value.\n\n  This function is not aware of [layers](/up.layer) or [transitions](/up-destroying)\n  and does not support non-standard selectors like `:main`. For this use `up.fragment.get()`.\n\n  ### Casting rules\n\n  - If given an element, returns that element.\n  - If given a CSS selector string, returns the first element matching that selector.\n  - If given a jQuery collection , returns the first element in the collection.\n    Throws an error if the collection contains more than one element.\n  - If given any other argument (`undefined`, `null`, `document`, `window`\u2026), returns the argument unchanged.\n\n  ### Example\n\n  Passing a CSS selector will return the first matching element:\n\n  ```js\n  up.element.get('.foo') // returns the first matching element\n  ```\n\n  @function up.element.get\n  @param {Element} [parent=document]\n    The parent element whose descendants to search if `value` is a CSS selector string.\n\n    If omitted, all elements in the `document` will be searched.\n  @param {Element|jQuery|string} value\n    The value to look up.\n  @return {Element}\n    The obtained `Element`.\n  @stable\n  */\n  function getOne(...args) {\n    const value = args.pop()\n\n    if (u.isElement(value)) { // Return an element before we run any other expensive checks\n      return value\n    } else if (u.isString(value)) {\n      return first(...args, value)\n    } else if (u.isList(value)) {\n      if (value.length > 1) {\n        up.fail('up.element.get(): Cannot cast multiple elements (%o) to a single element', value)\n      }\n      return value[0]\n    } else {\n      // undefined, null, Window, Document, DocumentFragment, ...\n      return value\n    }\n  }\n\n  /*-\n  Composes a list of elements from the given arguments.\n\n  ### Casting rules\n\n  - If given a string, returns the all elements matching that string.\n  - If given any other argument, returns the argument [wrapped as a list](/up.util.wrapList).\n\n  ### Example\n\n  ```javascript\n  $jquery = $('.jquery')                          // returns jQuery (2) [div.jquery, div.jquery]\n  nodeList = document.querySelectorAll('.node')   // returns NodeList (2) [div.node, div.node]\n  element = document.querySelector('.element')    // returns Element div.element\n  selector = '.selector'                          // returns String '.selector'\n\n  elements = up.element.list($jquery, nodeList, undefined, element, selector)\n  // returns [div.jquery, div.jquery, div.node, div.node, div.element, div.selector]\n  ```\n\n  @function up.element.list\n  @param {Array<jQuery|Element|Array<Element>|string|undefined|null>} ...args\n  @return {Array<Element>}\n  @internal\n  */\n  function getList(...args) {\n    return u.flatMap(args, valueToList)\n  }\n\n  function valueToList(value) {\n    if (u.isString(value)) {\n      return document.querySelectorAll(value)\n    } else {\n      return u.wrapList(value)\n    }\n  }\n\n  /*-\n  Hides the given element.\n\n  Also see `up.element.show()` and `up.element.toggle()`.\n\n  ### Implementation\n\n  The element is hidden by setting an `[hidden]` attribute.\n  This effectively gives the element a `display: none` rule.\n\n  To customize the CSS rule for hiding, see `[hidden]`.\n\n  @function up.element.hide\n  @param {Element} element\n  @stable\n  */\n  function hide(element) {\n    // Set an attribute that the user can style with custom \"hidden\" styles.\n    // E.g. certain JavaScript components cannot initialize properly within a\n    // { display: none }, as such an element has no width or height.\n    element.setAttribute('hidden', '')\n  }\n\n  /*-\n  Elements with this attribute are hidden from the page.\n\n  While `[hidden]` is a [standard HTML attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)\n  its default implementation is [not very useful](https://meowni.ca/hidden.is.a.lie.html).\n  In particular it cannot hide elements with any `display` rule.\n  Unpoly improves the default CSS styles of `[hidden]` so it can hide arbitrary elements.\n\n  ## Customizing the CSS\n\n  Unpoly's default styles for `[hidden]` look like this:\n\n  ```css\n  [hidden][hidden] {\n    display: none !important;\n  }\n  ```\n\n  You can override the CSS to hide an element in a different way, e.g. by giving it a zero height:\n\n  ```css\n  .my-element[hidden] {\n    display: block !important;\n    height: 0 !important;\n  }\n  ```\n\n  > [IMPORTANT]\n  > Any overriding selector must have a [specificity of `(0, 2, 0)`](https://polypane.app/css-specificity-calculator/#selector=.element%5Bhidden%5D).\n  > Also all rules should be defined with [`!important`](https://www.w3schools.com/css/css_important.asp) to override other\n  > styles defined on that element.\n\n  @selector [hidden]\n  @experimental\n  */\n\n  /*-\n  Shows the given element.\n\n  Also see `up.element.hide()` and `up.element.toggle()`.\n\n  ### Limitations\n\n  The element is shown by removing the `[hidden]` attribute set by `up.element.hide()`.\n  In case the element is hidden by an inline style (`[style=\"display: none\"]`),\n  that inline style is also removed.\n\n  You may have CSS rules causing the element to remain hidden after calling `up.element.show(element)`.\n  Unpoly will *not* handle such cases in order to keep this function performant. As a workaround, you may\n  manually set `element.style.display = 'block'`.\n\n  @function up.element.show\n  @param {Element} element\n  @stable\n  */\n  function show(element) {\n    // Remove the attribute set by `up.element.hide()`.\n    element.removeAttribute('hidden')\n\n    // In case the element was manually hidden through an inline style\n    // of `display: none`, we also remove that.\n    if (element.style.display === 'none') {\n      element.style.display = ''\n    }\n  }\n\n  /*-\n  Changes whether the given element is [shown](/up.element.show) or [hidden](/up.element.hide).\n\n  @function up.element.toggle\n  @param {Element} element\n  @param {boolean} [newVisible]\n    Pass `true` to show the element or `false` to hide it.\n\n    If omitted, the element will be hidden if shown and shown if hidden.\n  @stable\n  */\n  function toggle(element, newVisible) {\n    if (newVisible == null) { newVisible = !isVisible(element) }\n    (newVisible ? show : hide)(element)\n  }\n\n\n  function toggleAttr(element, attr, value, newPresent) {\n    if (newPresent == null) { newPresent = !element.hasAttribute(attr) }\n    if (newPresent) {\n      return element.setAttribute(attr, value)\n    } else {\n      return element.removeAttribute(attr)\n    }\n  }\n\n  /*-\n  Sets all key/values from the given object as attributes on the given element.\n\n  ### Example\n\n      up.element.setAttrs(element, { title: 'Tooltip', tabindex: 1 })\n\n  @function up.element.setAttrs\n  @param {Element} element\n    The element on which to set attributes.\n  @param {Object} attributes\n    An object of attributes to set.\n  @stable\n  */\n  function setAttrs(element, attrs) {\n    for (let key in attrs) {\n      const value = attrs[key]\n      if (u.isGiven(value)) {\n        element.setAttribute(key, value)\n      } else {\n        element.removeAttribute(key)\n      }\n    }\n  }\n\n  function setTemporaryAttrs(element, attrs) {\n    const oldAttrs = {}\n    for (let key of Object.keys(attrs)) {\n      oldAttrs[key] = element.getAttribute(key)\n    }\n    setAttrs(element, attrs)\n    return () => setAttrs(element, oldAttrs)\n  }\n\n  /*-\n  @function up.element.metaContent\n  @internal\n  */\n  function metaContent(name) {\n    const selector = \"meta\" + attrSelector('name', name)\n    return first(selector)?.getAttribute('content')\n  }\n\n  /*-\n  @function up.element.insertBefore\n  @internal\n  */\n  function insertBefore(existingElement, newElement) {\n    existingElement.insertAdjacentElement('beforebegin', newElement)\n  }\n\n  /*-\n  Creates an element matching the given CSS selector.\n\n  The created element will not yet be attached to the DOM tree.\n  Attach it with [`Element#appendChild()`](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)\n  or use `up.element.affix()` to create an already-attached element.\n\n  Use `up.hello()` to activate [JavaScript behavior](/up.script) within the created element.\n\n  ### Examples\n\n  To create an element with a given tag name:\n\n  ```js\n  element = up.element.createFromSelector('span')\n  // element is <span></span>\n  ```\n\n  To create an element with a given class:\n\n  ```js\n  element = up.element.createFromSelector('.klass')\n  // element is <div class=\"klass\"></div>\n  ```\n\n  To create an element with a given ID:\n\n  ```js\n  element = up.element.createFromSelector('#foo')\n  // element is <div id=\"foo\"></div>\n  ```\n\n  ### Setting attributes\n\n  To create an element with a given boolean attribute:\n\n  ```js\n  element = up.element.createFromSelector('[attr]')\n  // element is <div attr></div>\n  ```\n\n  To create an element with a given attribute value:\n\n  ```js\n  element = up.element.createFromSelector('[attr=\"value\"]')\n  // element is <div attr=\"value\"></div>\n  ```\n\n  You may also pass an object of attribute names/values as a second argument:\n\n  ```js\n  element = up.element.createFromSelector('div', { attr: 'value' })\n  // element is <div attr=\"value\"></div>\n  ```\n\n  ### Passing child nodes\n\n  You may set the element's inner text by passing a `{ text }` option (HTML control characters will\n  be escaped):\n\n  ```js\n  element = up.element.createFromSelector('div', { text: 'inner text' })\n  // element is <div>inner text</div>\n  ```\n\n  You may set the element's inner HTML by passing a `{ content }` option:\n\n  ```js\n  element = up.element.createFromSelector('div', { content: '<span>inner text</span>' })\n  // element is <div>inner text</div>\n  ```\n\n  ### Setting inline styles\n\n  You may set inline styles by passing an object of CSS properties as a `{ style }` option:\n\n  ```js\n  element = up.element.createFromSelector('div', { style: { color: 'red' }})\n  // element is <div style=\"color: red\"></div>\n  ```\n\n  @function up.element.createFromSelector\n  @param {string} selector\n    The CSS selector from which to create an element.\n  @param {Object} [attrs]\n    An object of attributes to set on the created element.\n  @param {Object} [attrs.text]\n    The [text content](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent) of the created element.\n  @param {Object} [attrs.content]\n    The [inner HTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) of the created element.\n  @param {Object|string} [attrs.style]\n    An object of CSS properties that will be set as the inline style\n    of the created element. The given object may use kebab-case or camelCase keys.\n\n    You may also pass a string with semicolon-separated styles.\n\n  @return {Element}\n    The created element.\n  @stable\n  */\n  function createFromSelector(selector, attrs = {}) {\n    let { includePath } = parseSelector(selector)\n\n    let rootElement\n    let depthElement\n    let previousElement\n\n    for (let includeSegment of includePath) {\n      let { tagName, id, classNames, attributes } = includeSegment\n\n      if (!tagName || tagName === '*') {\n        tagName = 'div'\n      }\n\n      depthElement = document.createElement(tagName)\n\n      if (!rootElement) {\n        rootElement = depthElement\n      }\n\n      if (id) {\n        depthElement.id = id\n      }\n\n      for (let className of classNames) {\n        depthElement.classList.add(className)\n      }\n\n      for (let attributeName in attributes) {\n        let attributeValue = attributes[attributeName]\n        depthElement.setAttribute(attributeName, attributeValue || '')\n      }\n\n      previousElement?.appendChild(depthElement)\n      previousElement = depthElement\n    }\n\n    for (let key in attrs) {\n      let value = attrs[key]\n      if (key === 'class') {\n        for (let klass of u.wrapList(value)) {\n          rootElement.classList.add(klass)\n        }\n      } else if (key === 'style') {\n        setInlineStyle(rootElement, value)\n      } else if (key === 'text') {\n        rootElement.textContent = value\n      } else if (key === 'content') {\n        rootElement.innerHTML = value\n      } else {\n        rootElement.setAttribute(key, value)\n      }\n    }\n\n    return rootElement\n  }\n\n  /*-\n  Parses a not-too-complex CSS selector.\n\n  ### Example\n\n  ```js\n  up.element.parseSelector('.content > form[action=\"/\"]:not(.bar)')\n  => {\n       include: [\n         { classNames: ['.content'],\n           attributes: {}\n         },\n         { tagName: 'form',\n           classNames: [],\n           attributes: { action: \"/\" }\n         }\n       ],\n       exclude: {\n         raw: \".bar\"\n       }\n     }\n  ```\n\n  @function up.element.parseSelector\n  @internal\n  */\n  function parseSelector(selector) {\n    let excludeRaw\n\n    const includeRaw = selector.replace(/:not\\([^)]+\\)/, function(match) {\n      excludeRaw = match\n      return ''\n    })\n\n    // Extract attribute values before we match the string.\n    // Attribute values might contain spaces, and then we would incorrectly\n    // split depths at that space.\n    const [includeSelectorWithoutAttrValues, attrValues] = removeAttrSelectorValues(includeRaw)\n\n    const includeSegments = includeSelectorWithoutAttrValues.split(/[ >]+/)\n\n    let includePath = includeSegments.map(function(depthSelector) {\n      let parsed = {\n        tagName: null,\n        classNames: [],\n        id: null,\n        attributes: {}\n      }\n\n      depthSelector = depthSelector.replace(/^[\\w-*]+/, function(match) {\n        parsed.tagName = match\n        return ''\n      })\n\n      depthSelector = depthSelector.replace(/#([\\w-]+)/, function(_match, id) {\n        parsed.id = id\n        return ''\n      })\n\n      depthSelector = depthSelector.replace(/\\.([\\w-]+)/g, function(_match, className) {\n        parsed.classNames.push(className)\n        return ''\n      })\n\n      // If we have stripped out attrValues at the beginning of the function,\n      // they have been replaced with the attribute name only (as \"[name]\").\n      if (attrValues.length) {\n        depthSelector = replaceAttrSelectors(depthSelector, function({ name }) {\n          parsed.attributes[name] = attrValues.shift()\n          return ''\n        })\n      }\n\n      if (depthSelector) {\n        up.fail('Cannot parse selector: ' + selector)\n      }\n\n      return parsed\n    })\n\n    return {\n      includePath,\n      includeRaw,\n      excludeRaw,\n    }\n  }\n\n  const ATTR_SELECTOR_PATTERN = /\\[([\\w-]+)(?:([~|^$*]?=)([\"'])?([^\\3\\]]*?)\\3)?]/g\n\n  function replaceAttrSelectors(string, replacement) {\n    return string.replace(ATTR_SELECTOR_PATTERN, function(_match, name, operator, quote, value) {\n      if (value) {\n        value = value.replace(/\\\\([\\\\\"'])/, '$1')\n      }\n      return replacement({ name, operator, quote, value })\n    })\n  }\n\n  function removeAttrSelectorValues(selector) {\n    let values = []\n    selector = replaceAttrSelectors(selector, function({ name, value }) {\n      values.push(value)\n      return `[${name}]`\n    })\n    return [selector, values]\n  }\n\n  /*-\n  Creates an element matching the given CSS selector and attaches it to the given parent element.\n\n  To create a detached element from a selector, see `up.element.createFromSelector()`.\n\n  Use `up.hello()` to activate [JavaScript behavior](/up.script) within the created element.\n\n  ### Example\n\n  ```js\n  element = up.element.affix(document.body, '.klass')\n  element.parentElement // returns document.body\n  element.className // returns 'klass'\n  ```\n\n  See `up.element.createFromSelector()` for many more examples.\n\n  @function up.element.affix\n  @param {Element} parent\n    The parent to which to attach the created element.\n  @param {string} [position='beforeend']\n    The position of the new element in relation to `parent`.\n    Can be one of the following values:\n\n    - `'beforebegin'`: Before `parent`, as a new sibling.\n    - `'afterbegin'`: Just inside `parent`, before its first child.\n    - `'beforeend'`: Just inside `parent`, after its last child.\n    - `'afterend'`: After `parent`, as a new sibling.\n  @param {string} selector\n    The CSS selector from which to create an element.\n  @param {Object} [attrs]\n    An object of attributes to set on the created element.\n  @param {Object} [attrs.text]\n    The [text content](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent) of the created element.\n  @param {Object} [attrs.content]\n    The [inner HTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) of the created element.\n  @param {Object|string} [attrs.style]\n    An object of CSS properties that will be set as the inline style\n    of the created element.\n\n    The given object may use kebab-case or camelCase keys.\n  @return {Element}\n    The created element.\n  @stable\n  */\n  function affix(parent, ...args) {\n    let position, selector\n    const attributes = u.extractOptions(args)\n\n    if (args.length === 2) {\n      [position, selector] = args\n    } else {\n      position = 'beforeend'\n      selector = args[0]\n    }\n\n    const element = createFromSelector(selector, attributes)\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement\n\n    parent.insertAdjacentElement(position, element)\n    return element\n  }\n\n  const SINGLETON_TAG_NAMES = ['HTML', 'BODY', 'HEAD', 'TITLE']\n\n  /*-\n  @function up.element.isSingleton\n  @internal\n  */\n  const isSingleton = up.mockable(element => element.matches(SINGLETON_TAG_NAMES.join()))\n\n  function elementTagName(element) {\n    return element.tagName.toLowerCase()\n  }\n\n  /*-\n  @function up.element.attrSelector\n  @internal\n  */\n  function attrSelector(attribute, value) {\n    if (u.isGiven(value)) {\n      value = value.replace(/\"/g, '\\\\\"')\n      // We could get away with omitting the quotes for simple alphanumeric strings,\n      // but e.g. not for a string with quotes or spaces or a string that is all numbers.\n      // Better add the quotes in all cases.\n      return `[${attribute}=\"${value}\"]`\n    } else {\n      return `[${attribute}]`\n    }\n  }\n\n  function idSelector(id) {\n    if (id.match(/^[a-z0-9\\-_]+$/i)) {\n      return `#${id}`\n    } else {\n      return attrSelector('id', id)\n    }\n  }\n\n  /*-\n  @function up.element.classSelector\n  @internal\n  */\n  function classSelector(klass) {\n    klass = klass.replace(/[^\\w-]/g, '\\\\$&')\n    return `.${klass}`\n  }\n\n  /*-\n  Parses a new `Document` instance from the given HTML.\n\n  This function always creates a full document with a <html> root,\n  even if the given `html` string only contains a fragment.\n\n  Due to quirks in the `DOMParser` spec, `<script>` and `<noscript>`\n  elements in the returned document will be inert. To make them active,\n  use `up.element.fixParserDamage()`.\n\n  @function up.element.createBrokenDocumentFromHTML\n  @param {string} html\n  @return {Document}\n  @internal\n  */\n  function createBrokenDocumentFromHTML(html) {\n    return new DOMParser().parseFromString(html, 'text/html')\n  }\n\n  /*-\n  Fixes `<script>` and `<noscript>` elements in documents parsed by `up.element.createBrokenDocumentFromHTML()`.\n\n  This addresses two [quirks in the `DOMParser` spec](http://w3c.github.io/DOM-Parsing/#dom-domparser-parsefromstring):\n\n  1. Children of a <nonscript> tag are expected to be a verbatim text node in a scripting-capable browser.\n     However, `DOMParser` parses children into actual DOM nodes.\n     This confuses libraries that work with <noscript> tags, such as lazysizes.\n  2. <script> elements are inert and will not run code when inserted into the main `document`.\n\n  @function up.element.fixParserDamage\n  @param {Element} scriptish\n    A `<script>` or `<noscript>` element.\n  @internal\n  */\n  function fixParserDamage(scriptish) {\n    // We cannot use `scriptish.cloneNode(true)` as this does not fix broken <noscript> elements\n    let clone = createFromHTML(scriptish.outerHTML)\n    scriptish.replaceWith(clone)\n  }\n\n  /*-\n  Creates an element from the given HTML fragment string.\n\n  Use `up.hello()` to activate [JavaScript behavior](/up.script) within the created element.\n\n  ### Example\n\n  ```js\n  element = up.element.createFromHTML('<div class=\"foo\"><span>text</span></div>')\n  element.className // returns 'foo'\n  element.children[0] // returns <span> element\n  element.children[0].textContent // returns 'text'\n  ```\n\n  @function up.element.createFromHTML\n  @param {string} html\n    A string of HTML from which to create the element.\n\n    The given HTML must have a single tag at its root or an error is thrown.\n  @stable\n  */\n  function createFromHTML(html) {\n    // (1) We cannot use createBrokenDocumentFromHTML() here, since up.ResponseDoc\n    //     needs to create <noscript> elements, and DOMParser cannot create those.\n    //     Also it always parses a full document, and we would need to rediscover our element\n    //     root within that.\n    // (2) We cannot use innerHTML on an anonymous element here, since up.ResponseDoc\n    //     needs to create executable <script> elements and setting innerHTML will\n    //     create intert <script> elements.\n    // (3) Using Range#createContextualFragment() is significantly faster than setting\n    //     innerHTML on Chrome. See https://jsben.ch/QQngJ\n    const range = document.createRange()\n    range.setStart(document.body, 0)\n    const fragment = range.createContextualFragment(html.trim())\n    let elements = fragment.childNodes\n    if (elements.length !== 1) {\n      throw new Error('HTML must have a single root element')\n    }\n    return elements[0]\n  }\n\n  /*-\n  @function up.element.root\n  @internal\n  */\n  function getRoot() {\n    return document.documentElement\n  }\n\n  /*-\n  Forces the browser to paint the given element now.\n\n  @function up.element.paint\n  @internal\n  */\n  function paint(element) {\n    element.offsetHeight\n  }\n\n  /*-\n  @function up.element.concludeCSSTransition\n  @internal\n  */\n  function concludeCSSTransition(element) {\n    const undo = setTemporaryStyle(element, {transition: 'none'})\n    // Browsers need to paint at least one frame without a transition to stop the\n    // animation. In theory we could just wait until the next paint, but in case\n    // someone will set another transition after us, let's force a repaint here.\n    paint(element)\n    return undo\n  }\n\n  /*-\n  Returns whether the given element has a CSS transition set.\n\n  @function up.element.hasCSSTransition\n  @return {boolean}\n  @internal\n  */\n  function hasCSSTransition(elementOrStyleHash) {\n    let styleHash\n    if (u.isOptions(elementOrStyleHash)) {\n      styleHash = elementOrStyleHash\n    } else {\n      styleHash = computedStyle(elementOrStyleHash)\n    }\n\n    const prop = styleHash.transitionProperty\n    const duration = styleHash.transitionDuration\n    // The default transition for elements is actually \"all 0s ease 0s\"\n    // instead of \"none\", although that has the same effect as \"none\".\n    const noTransition = ((prop === 'none') || ((prop === 'all') && (duration === 0)))\n    return !noTransition\n  }\n\n  /*-\n  @function up.element.fixedToAbsolute\n  @internal\n  */\n  function fixedToAbsolute(element) {\n    const elementRectAsFixed = element.getBoundingClientRect()\n\n    // Set the position to 'absolute' so it gains an offsetParent\n    element.style.position = 'absolute'\n\n    const offsetParentRect = element.offsetParent.getBoundingClientRect()\n\n    setInlineStyle(element, {\n      left: elementRectAsFixed.left - computedStyleNumber(element, 'margin-left') - offsetParentRect.left,\n      top: elementRectAsFixed.top - computedStyleNumber(element, 'margin-top') - offsetParentRect.top,\n      right: '',\n      bottom: ''\n    })\n  }\n\n  /*-\n  On the given element, set attributes that are still missing.\n\n  @function up.element.setMissingAttrs\n  @internal\n  */\n  function setMissingAttrs(element, attrs) {\n    for (let key in attrs) {\n      setMissingAttr(element, key, attrs[key])\n    }\n  }\n\n  function setMissingAttr(element, key, value) {\n    if (u.isMissing(element.getAttribute(key))) {\n      element.setAttribute(key, value)\n    }\n  }\n\n  /*-\n  @function up.element.unwrap\n  @internal\n  */\n  function unwrap(wrapper) {\n    preservingFocus(function() {\n      const parent = wrapper.parentNode\n      const wrappedNodes = u.toArray(wrapper.childNodes)\n      u.each(wrappedNodes, wrappedNode => parent.insertBefore(wrappedNode, wrapper))\n      parent.removeChild(wrapper)\n    })\n  }\n\n  function wrapChildren(element) {\n    let childNode\n    const wrapper = document.createElement('up-wrapper')\n    while ((childNode = element.firstChild)) {\n      wrapper.appendChild(childNode)\n    }\n    element.appendChild(wrapper)\n    return wrapper\n  }\n\n  function isWrapper(element) {\n    return element.matches('up-wrapper')\n  }\n\n  function preservingFocus(fn) {\n    const oldFocusElement = document.activeElement\n    try {\n      return fn()\n    } finally {\n      if (oldFocusElement && oldFocusElement !== document.activeElement) {\n        oldFocusElement.focus({ preventScroll: true })\n      }\n    }\n  }\n\n  /*-\n  Returns the given `attribute` value for the given `element`.\n\n  If the element does not have the given attribute, it returns `undefined`.\n  This is a difference to the native `Element#getAttribute()`, which [mostly returns `null` in that case](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute#Non-existing_attributes).\n\n  If the element has the attribute but without value (e.g. `<input readonly>`), it returns an empty string.\n\n  @function up.element.attr\n  @stable\n  */\n  function stringAttr(element, attribute) {\n    return u.nullToUndefined(element.getAttribute(attribute))\n  }\n\n  /*-\n  Returns the value of the given attribute on the given element, cast as a boolean value.\n\n  If the attribute value cannot be cast to `true` or `false`, `undefined` is returned.\n\n  ### Casting rules\n\n  This function deviates from the\n  [HTML Standard for boolean attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes)\n  in order to allow `undefined` values. When an attribute is missing, Unpoly considers the value to be `undefined`\n  (where the standard would assume `false`).\n\n  Unpoly also allows `\"true\"` and `\"false\"` as attribute values.\n\n  The table below shows return values for `up.element.booleanAttr(element, 'foo')` given different elements:\n\n  | Element             | Return value |\n  |---------------------|--------------|\n  | `<div foo>`         | `true`       |\n  | `<div foo=\"foo\">`   | `true`       |\n  | `<div foo=\"true\">`  | `true`       |\n  | `<div foo=\"\">`      | `true`       |\n  | `<div foo=\"false\">` | `false`      |\n  | `<div>`             | `undefined`  |\n  | `<div foo=\"bar\">`   | `true`       |\n\n  @function up.element.booleanAttr\n  @param {Element} element\n    The element from which to retrieve the attribute value.\n  @param {string} attribute\n    The attribute name.\n  @return {boolean|undefined}\n    The cast attribute value.\n  @stable\n  */\n  function booleanAttr(element, attribute, pass) {\n    if (!element.hasAttribute(attribute)) return\n\n    const value = stringAttr(element, attribute)\n    switch (value) {\n      case 'false': {\n        return false\n      }\n      case 'true':\n      case '':\n      case attribute: {\n        return true\n      }\n      default: {\n        if (pass) {\n          return value\n        } else {\n          return true\n        }\n      }\n    }\n  }\n\n  /*-\n  Returns the given attribute value cast as boolean.\n\n  If the attribute value cannot be cast, returns the attribute value unchanged.\n\n  @function up.element.booleanOrStringAttr\n  @param {Element} element\n    The element from which to retrieve the attribute value.\n  @param {string} attribute\n    The attribute name.\n  @internal\n  */\n  function booleanOrStringAttr(element, attribute) {\n    return booleanAttr(element, attribute, true)\n  }\n\n  /*-\n  Returns the value of the given attribute on the given element, cast to a number.\n\n  If the attribute value cannot be cast to a number, `undefined` is returned.\n\n  @function up.element.numberAttr\n  @param {Element} element\n    The element from which to retrieve the attribute value.\n  @param {string} attribute\n    The attribute name.\n  @return {number|undefined}\n    The cast attribute value.\n  @stable\n  */\n  function numberAttr(element, attribute) {\n    let value = element.getAttribute(attribute)\n    if (value) {\n      value = value.replace(/_/g, '')\n      if (value.match(/^[\\d.]+$/)) {\n        return parseFloat(value)\n      }\n    }\n  }\n\n  /*-\n  Reads the given attribute from the element, parsed as [JSON](https://www.json.org/).\n\n  Returns `undefined` if the attribute value is [blank](/up.util.isBlank).\n\n  Throws a `SyntaxError` if the attribute value is an invalid JSON string.\n\n  @function up.element.jsonAttr\n  @param {Element} element\n    The element from which to retrieve the attribute value.\n  @param {string} attribute\n    The attribute name.\n  @return {Object|undefined}\n    The cast attribute value.\n  @stable\n  */\n  function jsonAttr(element, attribute) {\n    // The document does not respond to #getAttribute()\n    let json = element.getAttribute?.(attribute)?.trim()\n    if (json) {\n      return JSON.parse(json)\n    }\n  }\n\n  function callbackAttr(link, attr, { exposedKeys = [], mainKey = 'event' } = {}) {\n    let code = link.getAttribute(attr)\n    if (code) {\n      // Users can prefix a CSP nonce like this: <a href=\"/path\" up-on-loaded=\"nonce-kO52Iphm8B alert()\">\n      // In up.ResponseDoc#finalizeElement() we have rewritten the attribute nonce to the current page's nonce\n      // IFF the attribute nonce matches the fragment response's nonce.\n      const callback = up.NonceableCallback.fromString(code).toFunction(mainKey, ...exposedKeys)\n      return function(event) {\n        // Allow callbacks to refer to an exposed property directly instead of through `event.value`.\n        const exposedValues = Object.values(u.pick(event, exposedKeys))\n\n        // Emulate the behavior of the `onclick` attribute,\n        // where `this` refers to the clicked element.\n        return callback.call(link, event, ...exposedValues)\n      }\n    }\n  }\n\n  function closestAttr(element, attr, parseFn = stringAttr) {\n    let match = element.closest('[' + attr + ']')\n    if (match) {\n      return parseFn(match, attr)\n    }\n  }\n\n  /*-\n  Temporarily sets the inline CSS styles on the given element.\n\n  Returns a function that restores the original inline styles when called.\n\n  ### Example\n\n      element = document.querySelector('div')\n      unhide = up.element.setTemporaryStyle(element, { 'visibility': 'hidden' })\n      // do things while element is invisible\n      unhide()\n      // element is visible again\n\n  @function up.element.setTemporaryStyle\n  @param {Element} element\n    The element to style.\n  @param {Object} styles\n    An object of CSS property names and values.\n  @return {Function()}\n    A function that restores the original inline styles when called.\n  @internal\n  */\n  function setTemporaryStyle(element, newStyles) {\n    const oldStyles = inlineStyle(element, Object.keys(newStyles))\n    setInlineStyle(element, newStyles)\n    return () => setInlineStyle(element, oldStyles)\n  }\n\n  function addTemporaryClass(element, klass) {\n    element.classList.add(klass)\n    return () => element.classList.remove(klass)\n  }\n\n  function setTemporaryAttr(element, attr, value) {\n    element.setAttribute(attr, value)\n    return () => element.removeAttribute(element, attr)\n  }\n\n  /*-\n  Receives [computed CSS styles](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle)\n  for the given element.\n\n  ### Examples\n\n  When requesting a single CSS property, its value will be returned as a string:\n\n      value = up.element.style(element, 'font-size')\n      // value is '16px'\n\n  When requesting multiple CSS properties, the function returns an object of property names and values:\n\n      value = up.element.style(element, ['font-size', 'margin-top'])\n      // value is { 'font-size': '16px', 'margin-top': '10px' }\n\n  @function up.element.style\n  @param {Element} element\n  @param {string|Array} propOrProps\n    One or more CSS property names in kebab-case or camelCase.\n  @return {string|Object}\n  @stable\n  */\n  function computedStyle(element, props) {\n    const style = window.getComputedStyle(element)\n    return extractFromStyleObject(style, props)\n  }\n\n  /*-\n  Receives a [computed CSS property value](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle)\n  for the given element, casted as a number.\n\n  The value is casted by removing the property's [unit](https://www.w3schools.com/cssref/css_units.asp) (which is usually `px` for computed properties).\n  The result is then parsed as a floating point number.\n\n  Returns `undefined` if the property value is missing, or if it cannot\n  be parsed as a number.\n\n  ### Examples\n\n  When requesting a single CSS property, its value will be returned as a string:\n\n      value = up.element.style(element, 'font-size')\n      // value is '16px'\n\n      value = up.element.styleNumber(element, 'font-size')\n      // value is 16\n\n  @function up.element.styleNumber\n  @param {Element} element\n  @param {string} prop\n    A single property name in kebab-case or camelCase.\n  @return {number|undefined}\n  @stable\n  */\n  function computedStyleNumber(element, prop) {\n    const rawValue = computedStyle(element, prop)\n    if (u.isGiven(rawValue)) {\n      return parseFloat(rawValue)\n    }\n  }\n\n  /*-\n  Gets the given inline style(s) from the given element's `[style]` attribute.\n\n  @function up.element.inlineStyle\n  @param {Element} element\n  @param {string|Array} propOrProps\n    One or more CSS property names in kebab-case or camelCase.\n  @return {string|Object}\n  @internal\n  */\n  function inlineStyle(element, props) {\n    const { style } = element\n    return extractFromStyleObject(style, props)\n  }\n\n  function extractFromStyleObject(style, keyOrKeys) {\n    if (u.isString(keyOrKeys)) {\n      return style[keyOrKeys]\n    } else { // array\n      return u.pick(style, keyOrKeys)\n    }\n  }\n\n  /*-\n  Sets the given CSS properties as inline styles on the given element.\n\n  @function up.element.setStyle\n  @param {Element} element\n  @param {Object} props\n    One or more CSS properties with kebab-case keys or camelCase keys.\n  @return {string|Object}\n  @stable\n  */\n  function setInlineStyle(element, props) {\n    if (u.isString(props)) {\n      element.setAttribute('style', props)\n    } else {\n      const { style } = element\n      for (let key in props) {\n        let value = props[key]\n        value = normalizeStyleValueForWrite(key, value)\n        style[key] = value\n      }\n    }\n  }\n\n  function normalizeStyleValueForWrite(key, value) {\n    if (u.isMissing(value)) {\n      value = ''\n    } else if (CSS_LENGTH_PROPS.has(key.toLowerCase().replace(/-/, ''))) {\n      value = cssLength(value)\n    }\n    return value\n  }\n\n  const CSS_LENGTH_PROPS = new Set([\n    'top', 'right', 'bottom', 'left',\n    'padding', 'paddingtop', 'paddingright', 'paddingbottom', 'paddingleft',\n    'margin', 'margintop', 'marginright', 'marginbottom', 'marginleft',\n    'borderwidth', 'bordertopwidth', 'borderrightwidth', 'borderbottomwidth', 'borderleftwidth',\n    'width', 'height',\n    'maxwidth', 'maxheight',\n    'minwidth', 'minheight',\n  ])\n\n  /*-\n  Converts the given value to a CSS length value, adding a `px` unit if required.\n\n  @function cssLength\n  @internal\n  */\n  function cssLength(obj) {\n    if (u.isNumber(obj) || (u.isString(obj) && /^\\d+$/.test(obj))) {\n      return obj.toString() + \"px\"\n    } else {\n      return obj\n    }\n  }\n\n  /*-\n  Returns whether the given element is currently visible.\n\n  An element is considered visible if it consumes space in the document.\n  Elements with `{ visibility: hidden }` or `{ opacity: 0 }` are considered visible, since they still consume space in the layout.\n\n  Elements not attached to the DOM are considered hidden.\n\n  @function up.element.isVisible\n  @param {Element} element\n    The element to check.\n  @return {boolean}\n  @stable\n  */\n  function isVisible(element) {\n    // From https://github.com/jquery/jquery/blame/9cb162f6b62b6d4403060a0f0d2065d3ae96bbcc/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length)\n  }\n\n  function isUpPrefixed(string) {\n    return /^up-/.test(string)\n  }\n\n  function upAttrs(element) {\n    let attrNames = u.filter(element.getAttributeNames(), isUpPrefixed)\n    return u.mapObject(attrNames, (name) => [name, element.getAttribute(name)])\n  }\n\n  function upClasses(element) {\n    return u.filter(element.classList.values(), isUpPrefixed)\n  }\n\n  /*-\n  Cleans up internal jQuery caches for the given element.\n\n  As a side effect the element is removed from the DOM.\n\n  @function up.element.safeRemove\n  @param {Element} element\n  @internal\n  */\n  function cleanJQuery(element) {\n    if (up.browser.canJQuery()) {\n      // jQuery elements store internal attributes in a global cache.\n      // We need to remove the element via jQuery or we will leak memory.\n      // See https://makandracards.com/makandra/31325-how-to-create-memory-leaks-in-jquery\n      jQuery(element).remove()\n    }\n  }\n\n  /*-\n  Returns whether the given element has no content.\n\n  An element is considered to have content if it has either child elements or non-whitespace text.\n\n  ### Examples\n\n  These `<div>` elments are all considered empty:\n\n  ```html\n  <div></div>\n\n  <div>   </div>\n\n  <div attr=\"text\"></div>\n  ```\n\n  These `<div>` elements are *not* considered empty:\n\n  ```html\n  <div>\n    Text\n  </div>\n\n  <div>\n    <span>Text</span>\n  </div>\n\n  <div>\n    <span></span>\n  </div>\n  ```\n\n  @function up.element.isEmpty\n  @param {Element} element\n  @return {boolean}\n    Whether the given element is empty.\n  @experimental\n  */\n  function isEmpty(element) {\n    return !element.children.length > 0 && !element.innerText.trim()\n  }\n\n  function crossOriginSelector(attr) {\n    return `[${attr}*=\"//\"]:not([${attr}*=\"//${location.host}/\"])`\n  }\n\n  return {\n    subtree, // practical\n    contains,\n    closestAttr,\n    ancestor, // not practical. we use it in up.feedback\n    around,\n    get: getOne, // practical for code that also works with jQuery\n    list: getList, // practical for composing multiple collections, or wrapping.\n    toggle, // practical\n    hide, // practical\n    show, // practical\n    metaContent, // internal\n    insertBefore, // internal shortcut, people can use insertAdjacentElement and i don't want to support insertAfter when I don't need it.\n    createFromSelector, // practical for element creation.\n    setAttrs, // practical\n    setTemporaryAttrs,\n    affix, // practical for element creation\n    idSelector,\n    classSelector,\n    isSingleton, // internal\n    attrSelector, // internal\n    tagName: elementTagName,\n    createBrokenDocumentFromHTML, // internal\n    fixParserDamage,\n    createFromHTML, // practical for element creation\n    get root() { return getRoot() }, // internal\n    paint, // internal\n    concludeCSSTransition, // internal\n    hasCSSTransition, // internal\n    fixedToAbsolute, // internal\n    setMissingAttrs, // internal\n    setMissingAttr, // internal\n    unwrap, // practical for jQuery migration\n    wrapChildren,\n    isWrapper,\n    // presentAttr: presentAttr # experimental\n    attr: stringAttr,\n    booleanAttr, // it's practical, but i cannot find a good name. people might expect it to cast to number, too. but i don't need that for my own code. maybe booleanAttr?\n    numberAttr, // practical\n    jsonAttr, // practical\n    callbackAttr,\n    booleanOrStringAttr,\n    setTemporaryStyle, // practical\n    style: computedStyle, // practical.\n    styleNumber: computedStyleNumber, // practical.\n    inlineStyle, // internal\n    setStyle: setInlineStyle, // practical.\n    isVisible, // practical\n    upAttrs,\n    upClasses,\n    toggleAttr,\n    addTemporaryClass,\n    setTemporaryAttr,\n    cleanJQuery,\n    parseSelector,\n    isEmpty,\n    crossOriginSelector,\n  }\n})()\n", "up.Error = class Error extends window.Error {\n  constructor(message, props = {}) {\n    if (Array.isArray(message)) {\n      message = up.util.sprintf(...message)\n    }\n    super(message)\n    let name = 'up.' + this.constructor.name\n    Object.assign(this, { name }, props)\n  }\n}\n", "up.NotImplemented = class NotImplemented extends up.Error {\n}\n", "// AbortController already throws an abort error, which is really a DOMException(message, 'AbortError')\nup.Aborted = class Aborted extends up.Error {\n  constructor(message) {\n    super(message, { name: 'AbortError' })\n  }\n}\n", "up.CannotMatch = class CannotMatch extends up.Error {\n}\n", "up.CannotParse = class CannotParse extends up.Error {\n}\n", "up.CannotTarget = class CannotTarget extends up.Error {\n}\n", "up.Offline = class Offline extends up.Error {\n}\n", "const u = up.util\n\nup.Record = class Record {\n\n  keys() {\n    throw 'Return an array of keys'\n  }\n\n  defaults(_options) {\n    return {}\n  }\n\n  constructor(options) {\n    Object.assign(this, this.defaults(options), this.attributes(options))\n  }\n\n  attributes(source = this) {\n    return u.pick(source, this.keys())\n  }\n\n  [u.copy.key]() {\n    return u.variant(this)\n  }\n\n  [u.isEqual.key](other) {\n    return (this.constructor === other.constructor) && u.isEqual(this.attributes(), other.attributes())\n  }\n}\n", "const u = up.util\n\nup.Config = class Config {\n\n  constructor(blueprintFn = (() => ({}))) {\n    this._blueprintFn = blueprintFn\n    this.reset()\n\n    document.addEventListener('up:framework:reset', () => this.reset())\n  }\n\n  reset() {\n    Object.assign(this, this._blueprintFn())\n  }\n\n  matches(element, prop) {\n    return element.matches(this.selector(prop))\n  }\n\n  selector(prop) {\n    let includes = this[prop]\n    let excludes = this['no' + u.upperCaseFirst(prop)]\n    let selector = `:is(${includes.join()})`\n    if (u.isPresent(excludes)) selector += `:not(${excludes.join()})`\n    return selector\n  }\n\n  selectorFn(prop) {\n    return () => this.selector(prop)\n  }\n\n}\n", "let enabledKey = 'up.log.enabled'\nlet enabled = false\n\ntry {\n  // All supported browsers have sessionStorage, but the property is `null`\n  // in private browsing mode in Safari and the default Android webkit browser.\n  // See https://makandracards.com/makandra/32865-sessionstorage-per-window-browser-storage\n  enabled = !!sessionStorage?.getItem(enabledKey)\n} catch {\n  // Chrome explodes upon access of window.sessionStorage when\n  // user blocks third-party cookies and site data and this page is embedded\n  // as an <iframe>. See https://bugs.chromium.org/p/chromium/issues/detail?id=357625\n}\n\nup.LogConfig = class LogConfig extends up.Config {\n\n  constructor() {\n    super(() => ({\n      banner: true,\n      format: true,\n    }))\n  }\n\n  get enabled() {\n    return enabled\n  }\n\n  set enabled(newEnabled) {\n    enabled = newEnabled\n    try {\n      sessionStorage?.setItem(enabledKey, newEnabled ? '1' : '')\n    } catch {\n      // If sessionStorage is now available (see above) we only update the local variable `enabled`.\n      // This will cause state to be lost on the next reload.\n    }\n  }\n\n}\n", "const u = up.util\nconst e = up.element\n\nup.OptionsParser = class OptionsParser {\n\n  /*-\n  @constructor up.OptionsParser\n  @param {Object} options\n    Explicit options passed by a programmatic caller. These usually override everything.\n\n    All parsed options are assigned to this given `options` argument.\n  @param {Element} element\n    An element from which to parse `[up-attr]` attributes.\n  @param {boolean} parserOptions.fail\n    Whether to automatically parse `[up-fail-attr]` into `{ failAttr }` option.\n  @param {boolean} parserOptions.closest\n    Whether to also look for `[up-attr]` matches in the descendants of `element`.\n  @param {Object} parserOptions.defaults\n    An object of default key/values if an option can neither be found in `options`\n    nor can be parsed from `element`.\n  */\n  constructor(element, options, parserOptions = {}) {\n    this._options = options\n    this._element = element\n    this._parserOptions = parserOptions // for pass-through in include()\n    this._fail = parserOptions.fail\n    this._closest = parserOptions.closest\n    this._attrPrefix = parserOptions.attrPrefix || 'up-'\n    this._defaults = parserOptions.defaults || {}\n  }\n\n  string(key, keyOptions) {\n    this.parse(e.attr, key, keyOptions)\n  }\n\n  boolean(key, keyOptions) {\n    this.parse(e.booleanAttr, key, keyOptions)\n  }\n\n  number(key, keyOptions) {\n    this.parse(e.numberAttr, key, keyOptions)\n  }\n\n  booleanOrString(key, keyOptions) {\n    this.parse(e.booleanOrStringAttr, key, keyOptions)\n  }\n\n  json(key, keyOptions) {\n    this.parse(e.jsonAttr, key, keyOptions)\n  }\n\n  callback(key, keyOptions = {}) {\n    let parser = (link, attr) => e.callbackAttr(link, attr, keyOptions)\n    this.parse(parser, key, keyOptions)\n  }\n\n  parse(attrValueFn, key, keyOptions = {}) {\n    const attrNames = u.wrapList(keyOptions.attr ?? this._attrNameForKey(key))\n\n    // Below we will only set @options[key] = value if value is defined.\n    let value = this._options[key]\n\n    for (let attrName of attrNames) {\n      value ??= this._parseFromAttr(attrValueFn, this._element, attrName)\n    }\n\n    value ??= keyOptions.default ?? this._defaults[key]\n\n    let normalizeFn = keyOptions.normalize\n    if (normalizeFn) {\n      value = normalizeFn(value)\n    }\n\n    if (u.isDefined(value)) {\n      this._options[key] = value\n    }\n\n    let failKey\n    if (this._fail && (failKey = up.fragment.failKey(key))) {\n      const failAttrNames = u.compact(u.map(attrNames, (attrName) => this._deriveFailAttrName(attrName)))\n      this.parse(attrValueFn, failKey, { ... keyOptions, attr: failAttrNames })\n    }\n  }\n\n  include(optionsFn) {\n    let fnResult = optionsFn(this._element, this._options, this._parserOptions)\n    Object.assign(this._options, fnResult)\n  }\n\n  _parseFromAttr(attrValueFn, element, attrName) {\n    if (this._closest) {\n      return e.closestAttr(element, attrName, attrValueFn)\n    } else {\n      return attrValueFn(element, attrName)\n    }\n  }\n\n  _deriveFailAttrName(attr) {\n    return this._deriveFailAttrNameForPrefix(attr, this._attrPrefix + 'on-') ||\n      this._deriveFailAttrNameForPrefix(attr, this._attrPrefix)\n  }\n\n  _deriveFailAttrNameForPrefix(attr, prefix) {\n    if (attr.startsWith(prefix)) {\n      return `${prefix}fail-${attr.substring(prefix.length)}`\n    }\n  }\n\n  _attrNameForKey(option) {\n    return `${this._attrPrefix}${u.camelToKebabCase(option)}`\n  }\n}\n", "const u = up.util\n\nup.FIFOCache = class FIFOCache {\n\n  constructor({ capacity = 10, normalizeKey = u.identity } = {}) {\n    this._map = new Map()\n    this._capacity = capacity\n    this._normalizeKey = normalizeKey\n  }\n\n  get(key) {\n    key = this._normalizeKey(key)\n    return this._map.get(key)\n  }\n\n  set(key, value) {\n    if (this._map.size === this._capacity) {\n      let oldestKey = this._map.keys().next().value\n      this._map.delete(oldestKey)\n    }\n\n    key = this._normalizeKey(key)\n    this._map.set(key, value)\n  }\n\n  clear() {\n    this._map.clear()\n  }\n\n}\n", "up.Rect = class Rect extends up.Record {\n\n  keys() {\n    return [\n      'left',\n      'top',\n      'width',\n      'height'\n    ]\n  }\n\n  get bottom() {\n    return this.top + this.height\n  }\n\n  get right() {\n    return this.left + this.width\n  }\n\n  static fromElement(element) {\n    return new (this)(element.getBoundingClientRect())\n  }\n\n}", "const e = up.element\n\n// Gives `<body>` a right padding in the width of a scrollbar.\n// Also gives elements anchored to the right side of the screen\n// an increased `right`.\n//\n// This is to prevent the body and elements from jumping when we add the\n// modal overlay, which has its own scroll bar.\n// This is screwed up, but Bootstrap does the same.\nup.BodyShifter = class BodyShifter {\n\n  constructor() {\n    this._unshiftFns = []\n    this._anchoredElements = new Set()\n    this._stack = 0\n  }\n\n  lowerStack() {\n    this._stack--\n    if (this._stack === 0) {\n      this._unshiftNow()\n    }\n  }\n\n  raiseStack() {\n    this._stack++\n\n    if (this._stack === 1) {\n      this._shiftNow()\n    }\n  }\n\n  onAnchoredElementInserted(element) {\n    this._anchoredElements.add(element)\n\n    // If the new element was inserted after we shifted, we must now shift its { right }.\n    if (this._isShifted()) {\n      this._shiftAnchoredElement(element)\n    }\n\n    // Destructor\n    return () => this._anchoredElements.delete(element)\n  }\n\n  _isShifted() {\n    // If the scrollbar never took space away from the main viewport's client width,\n    // we do not need to change any styles.\n    return this._scrollbarTookSpace && this._stack > 0\n  }\n\n  _shiftNow() {\n    this._scrollbarWidth = up.viewport.scrollbarWidth()\n\n    // Remember whether the root viewport has a visible scrollbar at rest.\n    // It will disappear when we set overflow-y: hidden below.\n    this._scrollbarTookSpace = up.viewport.rootHasReducedWidthFromScrollbar()\n    if (!this._scrollbarTookSpace) return\n\n    this._shiftBody()\n\n    for (let element of this._anchoredElements) {\n      this._shiftAnchoredElement(element)\n    }\n  }\n\n  _shiftBody() {\n    // Even if root viewport has no scroll bar, we still want to give overflow-y: hidden\n    // to the <body> element. Otherwise the user could scroll the underlying page by\n    // scrolling over the dimmed backdrop (observable with touch emulation in Chrome DevTools).\n    // Note that some devices don't show a vertical scrollbar at rest for a viewport, even\n    // when it can be scrolled.\n    const overflowElement = up.viewport.rootOverflowElement()\n    this._changeStyle(overflowElement, { overflowY: 'hidden' })\n\n    const { body } = document\n    const bodyRightPadding = e.styleNumber(body, 'paddingRight')\n    const bodyRightShift = this._scrollbarWidth + bodyRightPadding\n    this._changeStyle(body, { paddingRight: bodyRightShift })\n  }\n\n  _shiftAnchoredElement(element) {\n    const elementRight = e.styleNumber(element, 'right')\n    const elementRightShift = this._scrollbarWidth + elementRight\n    this._changeStyle(element, { right: elementRightShift })\n  }\n\n  _changeStyle(element, styles) {\n    this._unshiftFns.push(e.setTemporaryStyle(element, styles))\n  }\n\n  _unshiftNow() {\n    let unshiftFn\n    while (unshiftFn = this._unshiftFns.pop()) {\n      unshiftFn()\n    }\n  }\n}\n", "const u = up.util\n\nup.Change = class Change {\n\n  constructor(options) {\n    this.options = options\n  }\n\n  execute() {\n    throw new up.NotImplemented()\n  }\n\n  onFinished(renderResult) {\n    return this.options.onFinished?.(renderResult)\n  }\n\n  // Values we want to keep:\n  // - false (no update)\n  // - string (forced update)\n  // Values we want to override:\n  // - true (do update with defaults)\n  improveHistoryValue(existingValue, newValue) {\n    if ((existingValue === false) || u.isString(existingValue)) {\n      return existingValue\n    } else {\n      return newValue\n    }\n  }\n\n  deriveFailOptions() {\n    // This will merge shared keys and unprefix failKeys.\n    return up.RenderOptions.deriveFailOptions(this.options)\n  }\n\n}\n", "const u = up.util\nconst e = up.element\n\nup.Change.Addition = class Addition extends up.Change {\n\n  constructor(options) {\n    super(options)\n    this._acceptLayer = options.acceptLayer\n    this._dismissLayer = options.dismissLayer\n    this._eventPlans = options.eventPlans || []\n    this._response = options.response\n  }\n\n  handleLayerChangeRequests() {\n    if (this.layer.isOverlay()) {\n      // The server may send an HTTP header `X-Up-Accept-Layer: value`\n      this.tryAcceptLayerFromServer()\n      this.abortWhenLayerClosed()\n\n      // A close condition { acceptLocation: '/path' } might have been\n      // set when the layer was opened.\n      this.layer.tryAcceptForLocation(this.responseOption())\n      this.abortWhenLayerClosed()\n\n      // The server may send an HTTP header `X-Up-Dismiss-Layer: value`\n      this.tryDismissLayerFromServer()\n      this.abortWhenLayerClosed()\n\n      // A close condition { dismissLocation: '/path' } might have been\n      // set when the layer was opened.\n      this.layer.tryDismissForLocation(this.responseOption())\n      this.abortWhenLayerClosed()\n    }\n\n    // On the server we support up.layer.emit('foo'), which sends:\n    //\n    //     X-Up-Events: [{ layer: 'current', type: 'foo'}]\n    //\n    // We must set the current layer to @layer so { layer: 'current' } will emit on\n    // the layer that is being updated, instead of the front layer.\n    //\n    // A listener to such a server-sent event might also close the layer.\n    this.layer.asCurrent(() => {\n      for (let eventPlan of this._eventPlans) {\n        up.emit({ ...eventPlan, ...this.responseOption() })\n        this.abortWhenLayerClosed()\n      }\n    })\n  }\n\n  tryAcceptLayerFromServer() {\n    // When accepting without a value, the server will send X-Up-Accept-Layer: null\n    if (u.isDefined(this._acceptLayer) && this.layer.isOverlay()) {\n      this.layer.accept(this._acceptLayer, this.responseOption())\n    }\n  }\n\n  tryDismissLayerFromServer() {\n    // When dismissing without a value, the server will send X-Up-Dismiss-Layer: null\n    if (u.isDefined(this._dismissLayer) && this.layer.isOverlay()) {\n      this.layer.dismiss(this._dismissLayer, this.responseOption())\n    }\n  }\n\n  abortWhenLayerClosed(layer = this.layer) {\n    if (layer.isClosed()) {\n      // Wind up the call stack. Whoever has closed the layer will also clean up\n      // elements, handlers, etc.\n      throw new up.Aborted('Layer was closed')\n    }\n  }\n\n  setSource({ oldElement, newElement, source }) {\n    // (1) When the server responds with an error, or when the request method is not\n    //     reloadable (not GET), we keep the same source as before.\n    // (2) Don't set a source if someone tries to 'keep' when opening a new layer\n    if (source === 'keep') {\n      source = (oldElement && up.fragment.source(oldElement))\n    }\n\n    // (1) Don't set a source if { false } is passed.\n    // (2) Don't set a source if the element HTML already has an [up-source] attribute.\n    if (source) {\n      e.setMissingAttr(newElement, 'up-source', u.normalizeURL(source, { hash: false }))\n    }\n  }\n\n  setTime({ newElement, time }) {\n    // If the server didn't send a Last-Modified header, tag the element\n    // with [up-time=false] to indicate that we cannot use an ancestor's [up-time].\n    e.setMissingAttr(newElement, 'up-time', time ? time.toUTCString() : false)\n  }\n\n  setETag({ newElement, etag }) {\n    // If the server didn't send an Etag header, tag the element\n    // with [up-etag=false] to indicate that we cannot use an ancestor's [up-etag].\n    e.setMissingAttr(newElement, 'up-etag', etag || false)\n  }\n\n  setReloadAttrs(options) {\n    this.setSource(options)\n    this.setTime(options)\n    this.setETag(options)\n  }\n\n  responseOption() {\n    return { response: this._response }\n  }\n\n  executeSteps(steps, responseDoc, noneOptions) {\n    return new up.Change.UpdateSteps({ steps, noneOptions }).execute(responseDoc)\n  }\n\n}\n", "const u = up.util\n\n/*-\nA queued render task.\n\nRendering functions like `up.render()` or `up.submit()` return an `up.RenderJob`.\nCallers can inspect the job's [options](/up.RenderJob.prototype.options) or [`await` its completion](/render-hooks#running-code-after-rendering).\n\nSee [render hooks](/render-hooks) for examples for awaiting rendering completion\nand how to handle errors.\n\n## Example\n\n```\nlet job = up.render('.foo', url: '/users')\nconsole.log(job.options.target) // logs \".foo\"\nconsole.log(job.options.url) // logs \"/users\"\nlet renderResult = await job // fragments were updated\nconsole.log(renderResult.fragment) // logs the updated fragment\nlet finalResult = await job.finished // animations are done and cached content was revlidated\nconsole.log(finalResult.fragment) // logs the revalidated fragment\n```\n\n@class up.RenderJob\n@parent up.fragment\n*/\nup.RenderJob = class RenderJob {\n\n  constructor(options) {\n    this.options = up.RenderOptions.preprocess(options)\n  }\n\n  execute() {\n    this._rendered = this._executePromise()\n    return this\n  }\n\n  /*-\n  The [render options](/up.render#parameters) for this job.\n\n  @property up.RenderJob#options\n  @param {Object} options\n  @stable\n  */\n\n  async _executePromise() {\n    try {\n      this._guardRender()\n      let result = await this._getChange().execute()\n      this._handleResult(result)\n      return result\n    } catch (resultOrError) {\n      this._handleResult(resultOrError) || this._handleError(resultOrError)\n      throw resultOrError\n    }\n  }\n\n  _handleResult(result) {\n    // There may be multiple reasons why `result` is not an up.RenderResult:\n    //\n    // (1) There was an error during the request (return value is up.Offline, up.Aborted, etc.)\n    // (2) No fragment could be matched (return value is up.CannotMatch)\n    // (3) We're preloading (early return value is up.Request)\n    if (result instanceof up.RenderResult) {\n      let { onRendered, onFinished } = result.options\n\n      // We call result.options.onRendered() instead of this.options.onRendered()\n      // as this will call the correct options.onRendered() or onFailRendered()\n      // depending on options.failOptions.\n      if (!result.none) up.error.guard(() => onRendered?.(result))\n\n      // Run an { onFinished } callback if revalidation succeeds.\n      // There is no callback for a failed revalidation.\n      //\n      // We need to pay attention to not creating unnecessary promises that will fail with unhandled rejections:\n      //\n      // (1) Only access result.finished through this.finished to avoid creating new promises\n      // (2) The then() will create a new chain, and we don't want to fail that\n\n      let guardedOnFinished = function(result) {\n        up.error.guard(() => onFinished?.(result))\n      }\n\n      // Handling errors with `u.noop` prevents Chrome from logging an `unhandledrejection` event\n      // to the error console, hiding details about a failed revalidation. We could fix this by\n      // handling errors with `up.error.throwCritical` instead.\n      //\n      // However, handling errors with `up.error.throwCritical` will cause Safari (not Chrome)\n      // to emit an `unhandledrejection` event whenever there is a critical error, even if there are\n      // other error handlers registered via `job.finished.catch()`.\n      //\n      // I think Safari is in the right here, as every individual `then()` chain should require\n      // an error handler or log an `unhandledrejection` event when an error is thrown. However I cannot\n      // find a solution that has the same behavior in both Safari and Chrome.\n      //\n      // Although Chrome will fail to log error traces that way, we still log the error name and message\n      // in _handleError().\n      this.finished.then(guardedOnFinished, u.noop)\n\n      return true\n    }\n  }\n\n  _handleError(error) {\n    let prefix = error instanceof up.Aborted ? 'Rendering was aborted' : 'Error while rendering'\n    up.puts('up.render()', `${prefix}: ${error.name}: ${error.message}`)\n    up.error.guard(() => this.options.onError?.(error))\n  }\n\n  /*-\n  A promise that fulfills when fragments were updated, [animations](/up.motion) have concluded and\n  cached content was [revalidated](/caching#revalidation).\n\n  The promise will reject when the server responds with a [failed HTTP status](/failed-responses),\n  when any request is [aborted](/aborting-requests) or when there is [network issue](/network-issues).\n\n  See [render hooks](/render-hooks) for examples for awaiting rendering completion.\n\n  @property up.RenderJob#finished\n  @param {Promise<up.RenderResult>} finished\n    The [revalidated](/caching#revalidation) render result.\n  @stable\n  */\n  get finished() {\n    return this._awaitFinished()\n  }\n\n  async _awaitFinished() {\n    try {\n      let result = await this._rendered\n      return await result.finished\n    } catch (error) {\n      if (error instanceof up.RenderResult) {\n        throw await error.finished\n      } else {\n        throw error\n      }\n    }\n  }\n\n  _getChange() {\n    if (this.options.url) {\n      let onRequest = (request) => this._handleAbortOption(request)\n      return new up.Change.FromURL({ ...this.options, onRequest })\n    } else if (this.options.response) {\n      let onRender = () => this._handleAbortOption(null)\n      return new up.Change.FromResponse({ ...this.options, onRender })\n    } else {\n      let onRender = () => this._handleAbortOption(null)\n      return new up.Change.FromContent({ ...this.options, onRender })\n    }\n  }\n\n  _guardRender() {\n    up.browser.assertConfirmed(this.options)\n\n    let guardEvent = u.pluckKey(this.options, 'guardEvent')\n    if (guardEvent) {\n      // Allow guard event handlers to manipulate render options for the default behavior.\n      //\n      // Note that we have removed { guardEvent } from options to not recursively define\n      // guardEvent.renderOptions.guardEvent. This would cause an infinite loop for event\n      // listeners that prevent the default and re-render.\n      guardEvent.renderOptions = this.options\n      if (up.emit(guardEvent, { target: this.options.origin }).defaultPrevented) {\n        throw new up.Aborted(`Rendering was prevented by ${guardEvent.type} listener`)\n      }\n    }\n\n    up.RenderOptions.assertContentGiven(this.options)\n  }\n\n  _handleAbortOption(request) {\n    // When preloading up.RenderOptions forces { abort: false }.\n    let { abort } = this.options\n\n    if (!abort || !up.network.isBusy()) return\n\n    let { fragments, layer, origin, newLayer } = this._getChange().getPreflightProps()\n\n    let abortOptions = {\n      except: request, // don't abort the request we just made\n      logOnce: ['up.render()', 'Change with { abort } option will abort other requests'],\n      newLayer,\n      origin,\n    }\n\n    if (abort === 'target') {\n      // Abort requests in the subtree of the targeted fragment\n      up.fragment.abort(fragments, abortOptions)\n    } else if (abort === 'layer') {\n      // Abort requests targeting any fragment in the targeted layer\n      up.fragment.abort({ ...abortOptions, layer })\n    } else if (abort === 'all' || abort === true) {\n      // Abort requests targeting any fragment in any layer\n      up.fragment.abort({ ...abortOptions, layer: 'any' })\n    } else if (u.isFunction(abort)) {\n      // Required by unpoly-migrate to convert { solo: URLPatternString } and { solo: Function(up.Request): boolean }.\n      // We don't advertise this variant as aborting arbitrary requests cannot support\n      // up:fragment:aborted events or the up.fragment.onAborted() function.\n      abort(abortOptions)\n    } else {\n      // (1) Abort requests in the subtree of a given selector (string)\n      // (2) Abort requests targeting a given element\n      up.fragment.abort(abort, { ...abortOptions, layer })\n    }\n  }\n\n  /*-\n  An `up.RenderJob` is also a promise for its completion.\n\n  The promise is *fulfilled* with an `up.RenderResult` when a fragment\n  was updated from a successful server response.\n\n  The promise will *reject* for responses with a [failed HTTP status](/failed-responses),\n  when the request is [aborted](/aborting-requests) or when there is\n  [network issue](/network-issues).\n\n  See [render hooks](/render-hooks) for examples for awaiting rendering completion\n  and how to handle errors.\n\n  @function up.RenderJob#then\n  @param {Function(up.RenderResult)} onFulfilled\n  @param {Function(up.RenderResult|Error)} onRejected\n  @return {Promise<up.RenderResult>}\n    A promise that fulfills with an `up.RenderResult` once the page has been updated.\n  @stable\n  */\n  static {\n    // A request is also a promise (\"thenable\") for its initial render pass.\n    u.delegate(this.prototype, ['then', 'catch', 'finally'], function() { return this._rendered })\n\n    u.memoizeMethod(this.prototype, {\n      _awaitFinished: true,\n      _getChange: true,\n    })\n  }\n\n}\n", "up.Change.Removal = class Removal extends up.Change {\n}\n", "up.Change.DestroyFragment = class DestroyFragment extends up.Change.Removal {\n\n  constructor(options) {\n    super(options)\n    this._layer = up.layer.get(options) || up.layer.current\n    this._element = this.options.element\n    this._animation = this.options.animation\n    this._log = this.options.log\n  }\n\n  execute() {\n    // Destroying a fragment is a sync function.\n    //\n    // A variant of the logic below can also be found in up.Change.UpdateLayer.\n    // Updating (swapping) a fragment also involves destroying the old version,\n    // but the logic needs to be interwoven with the insertion logic for the new\n    // version.\n\n    // Save the parent because we emit up:fragment:destroyed on the parent\n    // after removing @element.\n    this._parent = this._element.parentNode\n\n    // The destroying fragment gets an .up-destroying class so we can\n    // recognize elements that are being destroyed but are still playing out their\n    // removal animation.\n    up.fragment.markAsDestroying(this._element)\n\n    if (up.motion.willAnimate(this._element, this._animation, this.options)) {\n      // If we're animating, we resolve *before* removing the element.\n      // The destroy animation will then play out, but the destroying\n      // element is ignored by all up.fragment.* functions.\n      this._destroyAfterAnimation()\n    } else {\n      this._destroyNow()\n    }\n  }\n\n  async _destroyAfterAnimation() {\n    this._emitDestroyed()\n    await this._animate()\n    this._wipe()\n    this.onFinished()\n  }\n\n  _destroyNow() {\n    // If we're not animating, we can remove the element before emitting up:fragment:destroyed.\n    this._wipe()\n    this._emitDestroyed()\n    this.onFinished()\n  }\n\n  _animate() {\n    return up.motion.animate(this._element, this._animation, this.options)\n  }\n\n  _wipe() {\n    this._layer.asCurrent(() => {\n      up.fragment.abort(this._element)\n      up.script.clean(this._element, { layer: this._layer })\n      up.element.cleanJQuery(this._element)\n      this._element.remove()\n    })\n  }\n\n  _emitDestroyed() {\n    // Emits up:fragment:destroyed.\n    up.fragment.emitDestroyed(this._element, { parent: this._parent, log: this._log })\n  }\n}\n", "let u = up.util\n\nup.Change.OpenLayer = class OpenLayer extends up.Change.Addition {\n\n  constructor(options) {\n    super(options)\n    this.target = options.target\n    this._origin = options.origin\n    this._baseLayer = options.baseLayer\n    // Don't extract too many @properties from @options, since listeners\n    // to up:layer:open may modify layer options.\n  }\n\n  getPreflightProps() {\n    // We assume that the server will respond with our target.\n    // Hence this change will always be applicable.\n\n    return {\n      mode: this.options.mode,\n      context: this._buildLayer().context,\n      origin: this.options.origin,\n\n      // The target will always exist in the current page, since\n      // we're opening a new layer that will match the target.\n      target: this.target,\n\n      // We associate this request to our base layer so up:request events may be emitted on something\n      // more specific than the document. This will also abort this request when\n      // `up.fragment.abort({ layer })` is called for the base layer.\n      layer: this._baseLayer,\n\n      // We associate this request with the base layer's main element. This way the request\n      // will be aborted if the base layer receives a major navigation, but not when a\n      // minor fragment is updated.\n      fragments: u.compact([up.fragment.get(':main', { layer: this._baseLayer })]),\n\n      newLayer: true,\n    }\n  }\n\n  execute(responseDoc, onApplicable) {\n    this.responseDoc = responseDoc\n\n    // Find our target in the responseDoc.\n    // If it cannot be matched, up.CannotMatch is thrown and up.Change.FromContent will try the next plan.\n    this._matchPostflight()\n\n    // If our steps can be matched, up.Change.FromContent wants a chance to some final\n    // preparations before we start rendering.\n    onApplicable()\n\n    // Create the overlay elements, but don't render content yet.\n    this._createOverlay()\n\n    // If our layer ends up being closed during rendering, we still want to render\n    // [up-hungry][up-if-layer=any] elements on other layers.\n    let unbindClosing = this.layer.on('up:layer:accepting up:layer:dimissing', this._renderOtherLayers.bind(this))\n    try {\n      this._renderOverlayContent()\n      this._renderOtherLayers()\n      return up.RenderResult.both(this._newOverlayResult, this._otherLayersResult)\n    } finally {\n      unbindClosing()\n    }\n  }\n\n  _matchPostflight() {\n    if (this.target === ':none') {\n      this._content = document.createElement('up-none')\n    } else {\n      this._content = this.responseDoc.select(this.target)\n    }\n\n    if (!this._content || this._baseLayer.isClosed()) {\n      // An error message will be chosen by up.Change.FromContent\n      throw new up.CannotMatch()\n    }\n  }\n\n  _createOverlay() {\n    up.puts('up.render()', `Opening element \"${this.target}\" in new overlay`)\n\n    this._assertOpenEventEmitted()\n\n    this.layer = this._buildLayer()\n\n    // (1) Make sure that the baseLayer layer doesn't already have a child layer.\n    //     This cannot be prevented with { peel: false }, as the layer stack must be a sequence,\n    //     not a tree.\n    //\n    // (2) Only restore the base layer's history if the new overlay does not add one of its own.\n    //     Otherwise we would add an intermediate history entries when swapping overlays\n    //     with { layer: 'swap' } (issue #397).\n    this._baseLayer.peel({ history: !this.layer.history })\n\n    // Don't wait for peeling to finish. Change the stack sync so there is no state\n    // when the new overlay is scheduled to be pushed, but not yet in the stack.\n    up.layer.stack.push(this.layer)\n\n    this.layer.createElements()\n    this.layer.setupHandlers()\n  }\n\n  _renderOverlayContent() {\n    // (1) Change history before compilation, so new fragments see the new location.\n    // (2) Change history before checking { acceptLocation, dismissLocation }, so we check the overlay's location and not the parent layer's location.\n    this._handleHistory()\n\n    // The server may trigger multiple signals that may cause the overlay to close immediately:\n    //\n    // - Close the layer directly through X-Up-Accept-Layer or X-Up-Dismiss-Layer\n    // - Emit an event with X-Up-Events, to which a listener may close the layer\n    // - Update the location to a URL for which { acceptLocation } or { dismissLocation }\n    //   will close the layer.\n    //\n    // Note that @handleLayerChangeRequests() also calls throws an up.AbortError\n    // if any of these options cause the layer to close.\n    this.handleLayerChangeRequests()\n\n    // Preprocess content element before insertion.\n    this.responseDoc.commitElement(this._content)\n\n    // Only if handleLayerChangeRequests() does not abort, we insert the content in the overlay.\n    // If it does abort we want to use the content for [up-hungry][up-if-layer=any] elements\n    // on background layers.\n    this.layer.setContent(this._content)\n\n    // Remember where the element came from to support up.reload(element).\n    this.setReloadAttrs({ newElement: this._content, source: this.options.source })\n\n    // Adopt CSP nonces and fix broken script tags\n    this.responseDoc.finalizeElement(this._content)\n\n    this._newOverlayResult = new up.RenderResult({\n      layer: this.layer,\n      fragments: [this._content],\n      target: this.target,\n    })\n\n    // Compile the entire layer, not just the user content.\n    // E.g. [up-dismiss] in the layer elements needs to go through a macro.\n    up.hello(this.layer.element, { ...this.options, layer: this.layer })\n\n    // Don't wait for the open animation to finish.\n    // Otherwise a popup would start to open and only reveal itself after the animation.\n    this._handleScroll()\n\n    // This starts the open animation.\n    // Resolve the RenderResult#finished promise for callers that need to know when animations are done.\n    this._newOverlayResult.finished = this._finish()\n\n    // Emit up:layer:opened to indicate that the layer was opened successfully.\n    // This is a good time for listeners to manipulate the overlay optics.\n    this.layer.opening = false\n    this._emitOpenedEvent()\n\n    // In case a listener to up:layer:opened immediately dimisses the new layer,\n    // reject the promise returned by up.layer.open().\n    this.abortWhenLayerClosed()\n  }\n\n  _renderOtherLayers() {\n    // Can be called twice but most only execute once.\n    if (this._otherLayersResult) return\n\n    // We execute steps on other layers first. If the render pass ends up closing this\n    // layer (e.g. by reaching a close condition or X-Up-Accept-Layer) we want:\n    //\n    // (1) ... to use the discarded content for hungry elements on other layers that have [up-if-layer=any].\n    // (2) ... to see updated hungry elements on other layers in onDismissed/onAccepted handlers.\n    let otherLayerSteps = this._getHungrySteps().other\n\n    this._otherLayersResult = this.executeSteps(otherLayerSteps, this.responseDoc)\n  }\n\n  async _finish() {\n    await this.layer.startOpenAnimation()\n\n    // Don't change focus if the layer has been closed while the animation was running.\n    this.abortWhenLayerClosed()\n\n    // A11Y: Place the focus on the overlay element and setup a focus circle.\n    // However, don't change focus if the layer has been closed while the animation was running.\n    this._handleFocus()\n\n    // The fulfillment value of the finished promise is the same as for the rendered promise.\n    return this._newOverlayResult\n  }\n\n  _buildLayer() {\n    // We need to mark the layer as { opening: true } so its topmost swappable element\n    // does not resolve from the :layer pseudo-selector. Since :layer is a part of\n    // up.fragment.config.mainTargets and :main is a part of fragment.config.autoHistoryTargets,\n    // this would otherwise cause auto-history for *every* overlay regardless of initial target.\n    const buildOptions = { ...this.options, opening: true }\n\n    const beforeNew = optionsWithLayerDefaults => {\n      return this.options = up.RenderOptions.finalize(optionsWithLayerDefaults)\n    }\n\n    return up.layer.build(buildOptions, beforeNew)\n  }\n\n  _handleHistory() {\n    // If the layer is opened with { history } auto, the new overlay will from now\n    // on have visible history *if* its initial fragment has auto-history.\n    if (this.layer.history === 'auto') {\n      this.layer.history = up.fragment.hasAutoHistory([this._content], this.layer)\n    }\n\n    let { parent } = this.layer\n\n    // If an ancestor layer was opened with the wish to not affect history, this\n    // child layer must not affect it either, regardless of its @history setting.\n    this.layer.history &&= parent.history\n\n    // The parent's saved history will be restored when this new overlay is closed.\n    parent.saveHistory()\n\n    // For the initial fragment insertion we always update its location, even if the layer\n    // does not have visible history ({ history } attribute). This ensures that a\n    // layer always has a #location.\n    this.layer.updateHistory(this.options)\n  }\n\n  _handleFocus() {\n    this._baseLayer.overlayFocus?.moveToBack()\n    this.layer.overlayFocus.moveToFront()\n\n    const fragmentFocus = new up.FragmentFocus({\n      fragment: this._content,\n      layer: this.layer,\n      autoMeans: ['autofocus', 'layer'],\n      inputDevice: this.options.inputDevice,\n    })\n\n    fragmentFocus.process(this.options.focus)\n  }\n\n  _handleScroll() {\n    const scrollingOptions = {\n      ...this.options,\n      fragment: this._content,\n      layer: this.layer,\n      autoMeans: ['hash', 'layer']\n    }\n    const scrolling = new up.FragmentScrolling(scrollingOptions)\n    scrolling.process(this.options.scroll)\n  }\n\n  _assertOpenEventEmitted() {\n    // The initial up:layer:open event is emitted on the document, since the layer\n    // element has not been attached yet and there is no obvious element it should\n    // be emitted on. We don't want to emit it on @layer.parent.element since users\n    // might confuse this with the event for @layer.parent itself opening.\n    //\n    // There is no { onOpen } or [up-on-open] handler to accompany the DOM event.\n    up.event.assertEmitted('up:layer:open', {\n      origin: this._origin,\n      baseLayer: this._baseLayer, // sets up.layer.current\n      layerOptions: this.options,\n      log: \"Opening new overlay\"\n    })\n  }\n\n  _emitOpenedEvent() {\n    this.layer.emit('up:layer:opened', {\n      origin: this._origin,\n      callback: this.layer.callback('onOpened'),\n      log: `Opened new ${this.layer}`\n    }\n    )\n  }\n\n  _getHungrySteps() {\n    return up.radio.hungrySteps(this._getEffectiveRenderOptions())\n  }\n\n  _getEffectiveRenderOptions() {\n    return {\n      ...this.options,\n      layer: this.layer,\n      history: this.layer.history,\n    }\n  }\n\n}\n", "const u = up.util\n\nup.Change.UpdateLayer = class UpdateLayer extends up.Change.Addition {\n\n  constructor(options) {\n    options = up.RenderOptions.finalize(options)\n    super(options)\n    this.layer = options.layer\n    this.target = options.target\n    this._context = options.context\n    // up.fragment.expandTargets() was already called by up.Change.FromContent\n    this._steps = up.fragment.parseTargetSteps(this.target, this.options)\n    // this.uid = Math.random()\n  }\n\n  getPreflightProps() {\n    // This will throw up.CannotMatch if { target } cannot be found in { layer }.\n    this._matchPreflight()\n\n    return {\n      layer: this.layer,\n      mode: this.layer.mode,\n      context: u.merge(this.layer.context, this._context),\n      origin: this.options.origin,\n      target: this._bestPreflightSelector(),\n      fragments: this._getFragments(),\n      newLayer: false,\n    }\n  }\n\n  _bestPreflightSelector() {\n    this._matchPreflight()\n\n    return up.fragment.targetForSteps(this._steps)\n  }\n\n  _getFragments() {\n    this._matchPreflight()\n\n    return u.map(this._steps, 'oldElement')\n  }\n\n  execute(responseDoc, onApplicable) {\n    this.responseDoc = responseDoc\n\n    // (1) For each step, find a `step.newElement` that matches both in this.layer\n    //     and in the response document.\n    // (2) Match newElements here instead of relying on up.Change.UpdateSteps to\n    //     do it later. This way we will throw up.CannotMatch early, and our caller\n    //     up.Change.FromContent knows that this plan is not applicable. It can then\n    //     try a fallback plan.\n    this._matchPostflight()\n\n    // If our steps can be matched, up.Change.FromContent wants a chance to some final\n    // preparations before we start rendering.\n    onApplicable()\n\n    // If our layer ends up being closed during rendering, we still want to render\n    // [up-hungry][up-if-layer=any] elements on other layers.\n    let unbindClosing = this.layer.on('up:layer:accepting up:layer:dimissing', this._renderOtherLayers.bind(this))\n    try {\n      this._renderCurrentLayer()\n      this._renderOtherLayers()\n      return up.RenderResult.both(this._currentLayerResult, this._otherLayersResult)\n    } finally {\n      unbindClosing()\n    }\n  }\n\n  _renderCurrentLayer() {\n    if (this._steps.length) {\n      // Don't log this.target since that does not include hungry elements\n      up.puts('up.render()', `Updating \"${this._bestPreflightSelector()}\" in ${this.layer}`)\n    }\n\n    // Make sure only the first step will have scroll-related options.\n    this._setScrollAndFocusOptions()\n\n    if (this.options.saveScroll) {\n      up.viewport.saveScroll({ layer: this.layer })\n    }\n\n    if (this.options.saveFocus) {\n      up.viewport.saveFocus({ layer: this.layer })\n    }\n\n    if (this.options.peel) {\n      // (1) Layer#peel() will manipulate the stack sync.\n      //     We don't wait for the peeling animation to finish.\n      //\n      // (2) Closing a layer will also abort requests targeting that layer.\n      //\n      // (3) Only restore the base layer's history if the fragment update adds a\n      //     history entry (issue #397).\n      this.layer.peel({ history: !this._hasHistory() })\n    }\n\n    // Unless the user has explicitly opted out of the default { abort: 'target' }\n    // by passing { abort: false }, we abort pending requests targeting\n    // the elements that we're about to remove.\n    if (this.options.abort !== false) {\n      up.fragment.abort(this._getFragments(), { reason: 'Fragment is being replaced' })\n    }\n\n    Object.assign(this.layer.context, this._context)\n\n    // Change history before compilation, so new fragments see the new location.\n    if (this._hasHistory()) {\n      this.layer.updateHistory(this.options)\n    }\n\n    // If the update causes the overlay to close, we don't want to render changes.\n    //\n    // The server may trigger multiple signals that may cause the layer to close:\n    //\n    // - Close the layer directly through X-Up-Accept-Layer or X-Up-Dismiss-Layer\n    // - Event an event with X-Up-Events, to which a listener may close the layer\n    // - Update the location to a URL for which { acceptLocation } or { dismissLocation }\n    //   will close the layer.\n    //\n    // Note that @handleLayerChangeRequests() also throws an `up.AbortError`\n    // if any of these options cause the layer to close.\n    this.handleLayerChangeRequests()\n\n    this._currentLayerResult = this.executeSteps(this._steps, this.responseDoc, this.options)\n  }\n\n  _renderOtherLayers() {\n    // Can be called twice but most only execute once.\n    if (this._otherLayersResult) return\n\n    // We execute steps on other layers first. If the render pass ends up closing this\n    // layer (e.g. by reaching a close condition or X-Up-Accept-Layer) we want:\n    //\n    // (1) ... to use the discarded content for hungry elements on other layers that have [up-if-layer=any].\n    // (2) ... to see updated hungry elements on other layers in onDismissed/onAccepted handlers.\n    let otherLayerSteps = this._getHungrySteps().other\n    this._otherLayersResult = this.executeSteps(otherLayerSteps, this.responseDoc)\n  }\n\n  _matchPreflight() {\n    this._matchOldElements()\n    this._compressNestedSteps()\n  }\n\n  _matchPostflight() {\n    this._matchOldElements()\n    this._addHungryStepsOnCurrentLayer()\n    this._compressNestedSteps()\n    this._matchNewElements()\n  }\n\n  _addHungryStepsOnCurrentLayer() {\n    this._steps.push(...this._getHungrySteps().current)\n  }\n\n  _matchOldElements() {\n    this._steps = this._steps.filter((step) => {\n\n      const finder = new up.FragmentFinder(u.pick(step, ['selector', 'origin', 'layer', 'match', 'preferOldElements']))\n\n      // Try to find fragments matching step.selector within step.layer.\n      // Note that step.oldElement might already have been set by up.radio.hungrySteps().\n      step.oldElement ||= finder.find()\n\n      if (step.oldElement) {\n        return true\n      } else if (!step.maybe) {\n        // An error message will be chosen by up.Change.FromContent\n        throw new up.CannotMatch()\n      }\n    })\n  }\n\n  _matchNewElements() {\n    this._steps = this.responseDoc.selectSteps(this._steps)\n  }\n\n  _compressNestedSteps() {\n    this._steps = up.fragment.compressNestedSteps(this._steps)\n  }\n\n  _getHungrySteps() {\n    // Find all [up-hungry] elements matching our layer and fragments.\n    return up.radio.hungrySteps(this._getEffectiveRenderOptions())\n  }\n\n  _setScrollAndFocusOptions() {\n    // Store the focused element's selector, scroll position and selection range\n    // in an up.FocusCapsule for later restoration.\n    let focusCapsule = up.FocusCapsule.preserve(this.layer)\n\n    this._steps.forEach((step, i) => {\n      step.focusCapsule = focusCapsule\n\n      // Since up.motion will call @handleScrollAndFocus() after each fragment,\n      // and we only have a single scroll position and focus, only scroll/focus  for the first step.\n      if (i > 0) {\n        step.scroll = false\n        step.focus = false\n      }\n\n      if ((step.placement === 'swap') || (step.placement === 'content')) {\n        // We cannot animate scrolling when we're morphing between two elements.\n        // The placements 'append', 'prepend' animate (instead of morphing) and can allow scrolling.\n        step.scrollBehavior = 'instant'\n      }\n    })\n  }\n\n  _hasHistory() {\n    return u.evalAutoOption(this.options.history, this._hasAutoHistory.bind(this))\n  }\n\n  _hasAutoHistory() {\n    // We update the history with { history: 'auto' } when at least\n    // one targeted fragment has auto-history.\n    const oldFragments = u.map(this._steps, 'oldElement')\n    return up.fragment.hasAutoHistory(oldFragments, this.layer)\n  }\n\n  _getEffectiveRenderOptions() {\n    return {\n      ...this.options,\n      layer: this.layer,\n      history: this._hasHistory(),\n    }\n  }\n\n  static {\n    u.memoizeMethod(this.prototype, {\n      _matchPreflight: true,\n      _matchOldElements: true,\n      _hasHistory: true,\n      _getHungrySteps: true,\n    })\n  }\n\n}\n", "const u = up.util\nconst e = up.element\n\nup.Change.UpdateSteps = class UpdateSteps extends up.Change.Addition {\n\n  constructor(options) {\n    super(options)\n\n    this._noneOptions = options.noneOptions || {}\n    this._steps = u.copy(options.steps) // we mutate it below\n  }\n\n  execute(responseDoc) {\n    this.responseDoc = responseDoc\n\n    // Fill in `step.newElement` unless it was already done by our caller.\n    // This may throw up.CannotMatch for non-optional steps that don't match in `responseDoc`.\n    this._steps = responseDoc.selectSteps(this._steps)\n    this._steps = responseDoc.commitSteps(this._steps)\n\n    if (!this._steps.length) {\n      return this._executeNone()\n    }\n\n    this.renderResult = new up.RenderResult({\n      layer: this._steps[0]?.layer,\n      target: up.fragment.targetForSteps(this._steps),\n    })\n\n    // We swap fragments in reverse order for two reasons:\n    //\n    // (1) Only the first step will process focus. Other steps may cause focus loss\n    //     (when they're swapping a fragment with focus), causing an option like\n    //     { focus: 'main-if-lost' } to not satisfy the \"lost\" condition.\n    // (2) Only the first step will scroll. However other steps may change\n    //     the viewport height through element insertions.\n    this._steps.reverse()\n\n    const motionEndPromises = this._steps.map(step => this._executeStep(step))\n    this.renderResult.finished = this._finish(motionEndPromises)\n\n    return this.renderResult\n  }\n\n  _executeNone() {\n    // When rendering nothing we still want to process { focus, scroll } options.\n    this._handleFocus(null, this._noneOptions)\n    this._handleScroll(null, this._noneOptions)\n    return up.RenderResult.buildNone()\n  }\n\n  async _finish(motionEndPromises) {\n    await Promise.all(motionEndPromises)\n\n    // If our layer was closed while animations are running, don't finish\n    // and reject with an up.AbortError.\n    for (let step of this._steps) {\n      this.abortWhenLayerClosed(step.layer)\n    }\n\n    // The RenderResult has not changed. We still updated the same target and fragments.\n    // We only want to signal the time of the end of animations / DOM changes.\n    return this.renderResult\n  }\n\n  _addToResult(fragment) {\n    let newFragments = fragment.matches('up-wrapper') ? fragment.children : [fragment]\n\n    // Since we're executing steps in reverse order we prepend the new fragment\n    // to the beginning of the array. This way the elements will be in the order\n    // that the user named them in their { target }.\n    this.renderResult.fragments.unshift(...newFragments)\n  }\n\n  _executeStep(step) {\n    // Remember where the element came from to support up.reload(element).\n    this.setReloadAttrs(step)\n\n    switch (step.placement) {\n      case 'swap': {\n        let keepPlan = this._findKeepPlan(step)\n        if (keepPlan) {\n          // Since we're keeping the element that was requested to be swapped,\n          // we won't be making changes to the DOM.\n\n          this._handleFocus(step.oldElement, step)\n          this._handleScroll(step.oldElement, step)\n\n          // Don't add kept fragment to this.renderResult.\n\n          return Promise.resolve()\n\n        } else {\n          // This needs to happen before up.script.clean() below.\n          // Otherwise we would run destructors for elements we want to keep.\n          this._preserveKeepables(step)\n\n          // TODO: Don't suppport [up-keep] for direct children of <body>\n\n          const parent = step.oldElement.parentNode\n\n          const morphOptions = {\n            ...step,\n            beforeStart() {\n              up.fragment.markAsDestroying(step.oldElement)\n            },\n            afterInsert: () => {\n              // Restore keepable before finalizing. Finalizing will rewrite elements that DOMParser broke,\n              // causing a keepPlans's newElement to point to a rewritten element that is now detached.\n              // Hence we lose the original position of the keepable.\n              this._restoreKeepables(step)\n\n              // Adopt CSP nonces and fix broken script tags\n              this.responseDoc.finalizeElement(step.newElement)\n\n              // Remove the .up-keeping classes.\n              this._unmarkKeepables(step)\n\n              // up.hello() tracks which compilers have been called for which elements.\n              // Because of this we do not need to worry about [up-keep] elements being compiled twice.\n              up.hello(step.newElement, step)\n\n              this._addToResult(step.newElement)\n            },\n            beforeDetach: () => {\n              // In the case of [up-keep] descendants, keepable elements have been replaced\n              // with a clone in step.oldElement. However, since that clone was never compiled,\n              // it does not have destructors registered. Hence we will not clean the clone\n              // unnecessarily.\n              up.script.clean(step.oldElement, { layer: step.layer })\n            },\n            afterDetach() {\n              up.element.cleanJQuery()\n              up.fragment.emitDestroyed(step.oldElement, { parent, log: false })\n            },\n            scrollNew: () => {\n              this._handleFocus(step.newElement, step)\n              this._handleScroll(step.newElement, step)\n            }\n          }\n\n          return up.morph(\n            step.oldElement,\n            step.newElement,\n            step.transition,\n            morphOptions\n          )\n        }\n      }\n      case 'content': {\n        let oldWrapper = e.wrapChildren(step.oldElement)\n        // oldWrapper.appendTo(step.oldElement)\n        let newWrapper = e.wrapChildren(step.newElement)\n\n        let wrapperStep = {\n          ...step,\n          placement: 'swap',\n          oldElement: oldWrapper,\n          newElement: newWrapper,\n          focus: false\n        }\n\n        return this._executeStep(wrapperStep).then(() => {\n          e.unwrap(newWrapper)\n          // Unwrapping may destroy focus, so we need to handle it again.\n          // Since we never inserted step.newElement (only its children), we handle focus on step.oldElement.\n          this._handleFocus(step.oldElement, step)\n        })\n\n      }\n      case 'before':\n      case 'after': {\n        // We're either appending or prepending. No keepable elements must be honored.\n\n        // Text nodes are wrapped in an <up-wrapper> container so we can\n        // animate them and measure their position/size for scrolling.\n        // This is not possible for container-less text nodes.\n        let wrapper = e.wrapChildren(step.newElement)\n\n        // Note that since we're prepending/appending instead of replacing,\n        // newElement will not actually be inserted into the DOM, only its children.\n        let position = step.placement === 'before' ? 'afterbegin' : 'beforeend'\n        step.oldElement.insertAdjacentElement(position, wrapper)\n\n        // Adopt CSP nonces and fix broken script tags\n        this.responseDoc.finalizeElement(wrapper)\n        up.hello(wrapper, step)\n\n        this._addToResult(wrapper)\n\n        this._handleFocus(wrapper, step)\n\n        // Reveal element that was being prepended/appended.\n        // Since we will animate (not morph) it's OK to allow animation of scrolling\n        // if options.scrollBehavior is given.\n        this._handleScroll(wrapper, step)\n\n        // Since we're adding content instead of replacing, we'll only\n        // animate newElement instead of morphing between oldElement and newElement\n        return up.animate(wrapper, step.transition, step).then(() => e.unwrap(wrapper))\n      }\n      default: {\n        up.fail('Unknown placement: %o', step.placement)\n      }\n    }\n  }\n\n  // Returns a object detailling a keep operation iff the given element is [up-keep] and\n  // we can find a matching partner in newElement. Otherwise returns undefined.\n  //\n  // @param {Element} options.oldElement\n  // @param {Element} options.newElement\n  // @param {boolean} options.descendantsOnly\n  _findKeepPlan(options) {\n    if (!options.useKeep) { return }\n\n    const { oldElement, newElement } = options\n\n    let doKeep = e.booleanAttr(oldElement, 'up-keep')\n    // Early return if [up-keep=false]\n    if (!doKeep) { return }\n\n    let partner\n    let partnerSelector = up.fragment.toTarget(oldElement)\n    const lookupOpts = { layer: options.layer }\n\n    if (options.descendantsOnly) {\n      // Since newElement is from a freshly parsed HTML document, we could use\n      // up.element functions to match the selector. However, since we also want\n      // to use custom selectors like \":main\" or \"&\" we use up.fragment.get().\n      partner = up.fragment.get(newElement, partnerSelector, lookupOpts)\n    } else {\n      partner = up.fragment.subtree(newElement, partnerSelector, lookupOpts)[0]\n    }\n\n    // (1) The partner must be matched\n    // (2) The partner does not need to be [up-keep]\n    // (3) The partner must not be [up-keep=false]\n    if (partner && e.booleanAttr(partner, 'up-keep') !== false) {\n      const plan = {\n        oldElement, // the element that should be kept\n        newElement: partner, // the element that would have replaced it but now does not\n        newData: up.script.data(partner), // the parsed up-data attribute of the element we will discard\n        renderOptions: options,\n      }\n\n      if (!up.fragment.emitKeep(plan).defaultPrevented) {\n        return plan\n      }\n    }\n  }\n\n  // This will find all [up-keep] descendants in oldElement, overwrite their partner\n  // element in newElement and leave a visually identical clone in oldElement for a later transition.\n  // Returns an array of keepPlans.\n  _preserveKeepables(step) {\n    const keepPlans = []\n    if (step.useKeep) {\n      for (let keepable of step.oldElement.querySelectorAll('[up-keep]')) {\n        let keepPlan = this._findKeepPlan({ ...step, oldElement: keepable, descendantsOnly: true })\n        if (keepPlan) {\n          // Replace keepable with its clone so it looks good in a transition\n          // between oldElement and newElement.\n          const keepableClone = keepable.cloneNode(true)\n          keepable.insertAdjacentElement('beforebegin', keepableClone)\n\n          // Mark the original keepable to up.ResponseDoc#finalizeElement() knows to skip it.\n          keepable.classList.add('up-keeping')\n\n          // When the newElement from the response has a response, it will be inserted\n          // into the DOM during the transition. Only at the end it will be replaced by the keepable.\n          // To prevent the execution of these placeholder-scripts, we change their { type }.\n          up.script.disableSubtree(keepPlan.newElement)\n\n          // Attaching a viewport to another element will cause it to loose\n          // its scroll position, even if both parents are in the same document.\n          let viewports = up.viewport.subtree(keepPlan.oldElement)\n          keepPlan.revivers = viewports.map(function(viewport) {\n            let cursorProps = up.viewport.copyCursorProps(viewport)\n            return () => up.viewport.copyCursorProps(cursorProps, viewport)\n          })\n\n          if (this._willChangeElement(document.body)) {\n            // Since we're going to swap the entire oldElement and newElement containers afterwards,\n            // replace the matching element with keepable so it will eventually return to the DOM.\n            keepPlan.newElement.replaceWith(keepable)\n          } else {\n            // If keepable is a media element, detaching it (or attaching it to another document) would cause it\n            // to lose playback state. To avoid this we temporarily move the keepable (keepPlan.oldElement)\n            // so it can remain attached while we swap fragment versions. We will move it to its place within\n            // the new fragment version once the swap is complete.\n            document.body.append(keepable)\n          }\n\n          // // Since we're going to swap the entire oldElement and newElement containers afterwards,\n          // // replace the matching element with keepable so it will eventually return to the DOM.\n          // keepPlan.newElement.replaceWith(keepable)\n          keepPlans.push(keepPlan)\n        }\n      }\n    }\n\n    step.keepPlans = keepPlans\n  }\n\n  _restoreKeepables(step) {\n    for (let keepPlan of step.keepPlans) {\n      // Now that we know the final destination of { newElement }, we can replace it with the keepable.\n      keepPlan.newElement.replaceWith(keepPlan.oldElement)\n\n      for (let reviver of keepPlan.revivers) {\n        reviver()\n      }\n    }\n  }\n\n  _unmarkKeepables(step) {\n    for (let keepPlan of step.keepPlans) {\n      keepPlan.oldElement.classList.remove('up-keeping')\n    }\n  }\n\n  _willChangeElement(element) {\n    return u.some(this._steps, (step) => step.oldElement.contains(element))\n  }\n\n  _handleFocus(fragment, options) {\n    const fragmentFocus = new up.FragmentFocus({\n      ...options,\n      fragment,\n      autoMeans: up.fragment.config.autoFocus,\n    })\n    return fragmentFocus.process(options.focus)\n  }\n\n  _handleScroll(fragment, options) {\n    const scrolling = new up.FragmentScrolling({\n      ...options,\n      fragment,\n      autoMeans: up.fragment.config.autoScroll\n    })\n    return scrolling.process(options.scroll)\n  }\n\n}\n", "const u = up.util\n\nup.Change.CloseLayer = class CloseLayer extends up.Change.Removal {\n\n  constructor(options) {\n    super(options)\n\n    this._verb = options.verb\n    this._layer = up.layer.get(options)\n    this._origin = options.origin\n    this._value = options.value\n    this._preventable = options.preventable ?? true\n    this._response = options.response\n    this._history = options.history ?? true\n  }\n\n  execute() {\n    // Closing a layer is a sync function.\n\n    if (!this._layer.isOpen()) {\n      return Promise.resolve()\n    }\n\n    up.browser.assertConfirmed(this.options)\n\n    if (this._emitCloseEvent().defaultPrevented && this._preventable) {\n      throw new up.Aborted('Close event was prevented')\n    }\n\n    this._emitClosingEvent()\n\n    // Abort all pending requests targeting the layer we're now closing.\n    up.fragment.abort({ reason: 'Layer is closing', layer: this._layer })\n\n    // Remember the parent, which will no longer be accessible once we\n    // remove @layer from the @stack.\n    const { parent } = this._layer\n\n    // Close any child-layers we might have.\n    // We don't wait for peeling to finish, since changes that affect the\n    // layer stack should happen sync:\n    this._layer.peel()\n\n    // Remove ourselves from the layer stack.\n    this._layer.stack.remove(this._layer)\n\n    if (this._history) {\n      // Restore the history of the parent layer we just uncovered.\n      parent.restoreHistory()\n    }\n\n    this._handleFocus(parent)\n\n    this._layer.teardownHandlers()\n\n    this._layer.destroyElements(this.options) // this will also pass the { onFinished } option\n\n    this._emitClosedEvent(parent)\n  }\n\n  _emitCloseEvent() {\n    // The close event is emitted on the layer that is about to close.\n    let event = this._layer.emit(\n      this._buildEvent(`up:layer:${this._verb}`), {\n      callback: this._layer.callback(`on${u.upperCaseFirst(this._verb)}`),\n      log: [`Will ${this._verb} ${this._layer} with value %o`, this._value]\n    })\n\n    // Allow an event listener to replace event.value with a new value.\n    this._value = event.value\n\n    return event\n  }\n\n  _emitClosingEvent() {\n    let event = this._buildEvent(`up:layer:${this._verb}ing`)\n    this._layer.emit(event, { log: false })\n  }\n\n  _emitClosedEvent(formerParent) {\n    const verbPast = `${this._verb}ed`\n    const verbPastUpperCaseFirst = u.upperCaseFirst(verbPast)\n\n    // layer.emit({ ensureBubbles: true }) will automatically emit a second event on document\n    // because the layer is detached. We do not want to emit it on the parent layer where users\n    // might confuse it with an event for the parent layer itself. Since @layer.element\n    // is now detached, the event will no longer bubble up to the document where global\n    // event listeners can receive it. So we explicitly emit the event a second time\n    // on the document.\n    return this._layer.emit(\n      this._buildEvent(`up:layer:${verbPast}`), {\n        // Set up.layer.current to the parent of the closed layer, which is now likely\n        // to be the front layer.\n        baseLayer: formerParent,\n        callback: this._layer.callback(`on${verbPastUpperCaseFirst}`),\n        ensureBubbles: true,\n        log: [`${verbPastUpperCaseFirst} ${this._layer} with value %o`, this._value]\n      }\n    )\n  }\n\n  _buildEvent(name) {\n    return up.event.build(name, {\n      layer: this._layer,\n      value: this._value,\n      origin: this._origin,\n      response: this._response,\n    })\n  }\n\n  _handleFocus(formerParent) {\n    // A11Y: Stop trapping focus in the layer that's about to close\n    this._layer.overlayFocus.teardown()\n    // A11Y: Start trapping focus in the parent layer that is being promoted to front.\n\n    formerParent.overlayFocus?.moveToFront()\n    // A11Y: Focus the element that originally opened this layer.\n    let newFocusElement = this._layer.origin || formerParent.element\n\n    up.focus(newFocusElement, { preventScroll: true })\n  }\n}\n", "const u = up.util\n\nup.Change.FromURL = class FromURL extends up.Change {\n\n  constructor(options) {\n    super(options)\n\n    // Look up layers *before* we make the request.\n    // In case of { layer: 'origin' } (default for navigation) the { origin }\n    // element may get removed while the request was in flight, making\n    // up.Change.FromContent#execute() fail with \"layer { origin } does not exist\".\n    this.options.layer = up.layer.getAll(this.options)\n\n    // Since up.layer.getAll() already normalizes layer options,\n    // we don't need to normalize again in up.Change.FromContent.\n    this.options.normalizeLayerOptions = false\n  }\n\n  execute() {\n    let _newPageReason = this._newPageReason()\n    if (_newPageReason) {\n      up.puts('up.render()', _newPageReason)\n      up.network.loadPage(this.options)\n      // Prevent our caller from executing any further code, since we're already\n      // navigating away from this JavaScript environment.\n      return u.unresolvablePromise()\n    }\n\n    this.request = up.request(this._getRequestAttrs())\n    this.options.onRequest?.(this.request)\n\n    up.feedback.showAroundRequest(this.request, this.options)\n\n    up.form.disableWhile(this.request, this.options)\n\n    if (this.options.preload) {\n      return this.request\n    }\n\n    // Use always() since _onRequestSettled() will decide whether the promise\n    // will be fulfilled or rejected.\n    return u.always(this.request, responseOrError => this._onRequestSettled(responseOrError))\n  }\n\n  _newPageReason() {\n    // Rendering content from cross-origin URLs is out of scope for Unpoly.\n    // We still allow users to call up.render() with a cross-origin URL, but\n    // we will then make a full-page request.\n    if (u.isCrossOrigin(this.options.url)) {\n      return 'Loading cross-origin content in new page'\n    }\n\n    // Unpoly may have been booted without suppport for history.pushState.\n    // E.g. when the initial page was loaded from a POST response.\n    // In this case we make a full page load in hopes to reboot with\n    // pushState support.\n    if (this.options.history && !up.browser.canPushState()) {\n      return 'Loading content in new page to restore history support'\n    }\n  }\n\n  _getRequestAttrs() {\n    const successAttrs = this._preflightPropsForRenderOptions(this.options)\n\n\n    const failAttrs = this._preflightPropsForRenderOptions(this.deriveFailOptions(), { optional: true })\n\n    return {\n      ...this.options, // contains preflight keys relevant for the request, e.g. { url, method }\n      ...successAttrs, // contains meta information for an successful update, e.g. { layer, mode, context, target }\n      ...u.renameKeys(failAttrs, up.fragment.failKey) // contains meta information for a failed update, e.g. { failTarget }\n    }\n  }\n\n  // This is required by up.RenderJob to handle { abort: 'target' }.\n  getPreflightProps() {\n    return this._getRequestAttrs()\n  }\n\n  _preflightPropsForRenderOptions(renderOptions, requestAttributesOptions) {\n    const preview = new up.Change.FromContent({ ...renderOptions, preview: true })\n    // #getPreflightProps() will return meta information about the change that is most\n    // likely before the request was dispatched.\n    // This might change postflight if the response does not contain the desired target.\n    return preview.getPreflightProps(requestAttributesOptions)\n  }\n\n  _onRequestSettled(response) {\n    if (response instanceof up.Response) {\n      return this._onRequestSettledWithResponse(response)\n    } else {\n      // Value is up.AbortError, up.Offline or another fatal error that can never\n      // be used as a fragment update. At this point up:request:aborted or up:request:offline\n      // have already been emitted by up.Request.\n      return this._onRequestSettledWithError(response)\n    }\n  }\n\n  _onRequestSettledWithResponse(response) {\n    return new up.Change.FromResponse({ ...this.options, response }).execute()\n  }\n\n  _onRequestSettledWithError(error) {\n    if (error instanceof up.Offline) {\n      this.request.emit('up:fragment:offline', {\n        callback: this.options.onOffline,\n        renderOptions: this.options,\n        retry: (retryOptions) => up.render({ ...this.options, ...retryOptions }),\n        log: ['Cannot load fragment from %s: %s', this.request.description, error.reason],\n      })\n    }\n\n    // `error` might also be an `up.Aborted`. In that case we do *not* emit `up:fragment:aborted`\n    // event here. This is already done by `up.fragment.abort()`.\n\n    // (1) Even if an { onOffline } callback retries, we still fail the initial render() call\n    //    We cannot check if the user has retried, since { onOffline } might render a\n    //    notification and retry some time later (async).\n    //\n    // (2) up.Offline errors also run { onError } callbacks.\n    throw error\n  }\n\n  static {\n    u.memoizeMethod(this.prototype, {\n      _getRequestAttrs: true,\n    })\n  }\n}\n", "const u = up.util\n\nup.Change.FromResponse = class FromResponse extends up.Change {\n\n  constructor(options) {\n    super(options)\n\n    this._response = options.response\n    this._request = this._response.request\n  }\n\n  execute() {\n    if (up.fragment.config.skipResponse(this._loadedEventProps())) {\n      this._skip()\n    } else {\n      // Allow listeners to inspect the response and either prevent the fragment change\n      // or manipulate change options. An example for when this is useful is a maintenance\n      // page with its own layout, that cannot be loaded as a fragment and must be loaded\n      // with a full page load.\n      this._request.assertEmitted('up:fragment:loaded', {\n        ...this._loadedEventProps(),\n        callback: this.options.onLoaded, // One callback is used for both success and failure. There is no { onFailLoaded }.\n        log: ['Loaded fragment from %s', this._response.description],\n        skip: () => this._skip()\n      })\n    }\n\n    // Listeners to up:fragment:loaded may have changed renderOptions.fail\n    // to force success or failure options.\n    let fail = u.evalOption(this.options.fail, this._response) ?? !this._response.ok\n\n    if (fail) {\n      throw this._updateContentFromResponse(this.deriveFailOptions())\n    }\n\n    return this._updateContentFromResponse(this.options)\n  }\n\n  _skip() {\n    up.puts('up.render()', 'Skipping ' + this._response.description)\n    this.options.target = ':none'\n    this.options.failTarget = ':none'\n  }\n\n  _updateContentFromResponse(finalRenderOptions) {\n    if (finalRenderOptions.failPrefixForced) {\n      up.puts('up.render()', 'Rendering failed response using fail-prefixed options (https://unpoly.com/failed-responses)')\n    }\n\n    // The response might carry some updates for our change options,\n    // like a server-set location, or server-sent events.\n    this._augmentOptionsFromResponse(finalRenderOptions)\n\n    // When up.Change.FromContent eventually compiles fragments, the { meta } object\n    // will be passed as a third argument to compilers.\n    finalRenderOptions.meta = this._compilerPassMeta()\n\n    let result = new up.Change.FromContent(finalRenderOptions).execute()\n    result.finished = this.finish(result, finalRenderOptions)\n    return result\n  }\n\n  async finish(renderResult, originalRenderOptions) {\n    renderResult = await renderResult.finished\n\n    if (up.fragment.shouldRevalidate(this._request, this._response, originalRenderOptions)) {\n      renderResult = await this._revalidate(renderResult, originalRenderOptions)\n    }\n\n    return renderResult\n  }\n\n  async _revalidate(renderResult, originalRenderOptions) {\n    // This is an explicit target passed as `{ render }` option.\n    // It may be `undefined` if the user has not given an explicit selector and relies on a fallback.\n    // If its is given, it may still contain ':before' or ':after'.\n    let inputTarget = originalRenderOptions.target\n\n    // This is the target that we ended up rendering.\n    // It may be a fallback target. It is always defined.\n    // It never contains ':before' or ':after'.\n    let effectiveTarget = renderResult.target\n\n    if (/:(before|after)/.test(inputTarget)) {\n      up.warn('up.render()', 'Cannot revalidate cache when prepending/appending (target %s)', inputTarget)\n    } else {\n      up.puts('up.render()', 'Revalidating cached response for target \"%s\"', effectiveTarget)\n      let verifyResult = await up.reload(effectiveTarget, {\n        ...originalRenderOptions,\n        preferOldElements: renderResult.fragments, // ensure we match the same fragments when initial render pass matched around { origin } and { origin } has been detached\n        layer: renderResult.layer, // if the original render opened a layer, we now update it\n        onFinished: null, // the earlier onFinished handler will already be honored by the up.RenderJob that called us\n        scroll: false,\n        focus: 'keep',\n        transition: false, // offerring something like { verifyTransition } would mean we need to delay { onFinished } even further\n        cache: false, // this implies { revalidate: false }\n        confirm: false,\n        feedback: false,\n        abort: false,\n        expiredResponse: this._response, // flag will be forwarded to up:fragment:loaded\n        // The guardEvent was already plucked from render options in up.RenderJob#guardRender().\n      })\n\n      // A well-behaved server will respond with \"304 Not Modified\" if the reload\n      // produced the same E-tag or Last-Modified timestamp. In that case we keep\n      // the original up.RenderResult.\n      //\n      // In this case the up.RenderJob from up.reload() has already seen that the result has no content,\n      // and will *not* have called { onResult } a second time. We will however return the original\n      // render result so it can be passed to up.RenderJob#finished() callbacks.\n      if (!verifyResult.none) {\n        renderResult = verifyResult\n      }\n    }\n\n    return renderResult\n  }\n\n  _loadedEventProps() {\n    const { expiredResponse } = this.options\n\n    return {\n      request: this._request,\n      response: this._response,\n      renderOptions: this.options,\n      revalidating: !!expiredResponse,\n      expiredResponse,\n    }\n  }\n\n  _compilerPassMeta() {\n    // (1) We avoid exposing values that would prevent garbage collection\n    //    by compilers holding a reference to their meta arg in their closure.\n    //\n    // (3) We avoid exposing values that we cannot provide for the initial page load.\n    //     That includes the request and response.\n    //\n    // (3) Another property { layer } will be assigned by up.hello().\n    let meta = { revalidating: !!this.options.expiredResponse }\n    up.migrate.processCompilerPassMeta?.(meta, this._response)\n    return meta\n  }\n\n  _augmentOptionsFromResponse(renderOptions) {\n    // Also see preprocessing of server response in up.Request#extractResponseFromXHR().\n\n    const responseURL = this._response.url\n    let serverLocation = responseURL\n\n    let hash = this._request.hash\n    if (hash) {\n      renderOptions.hash = hash\n      serverLocation += hash\n    }\n\n    const isReloadable = (this._response.method === 'GET')\n\n    if (isReloadable) {\n      // Remember where we got the fragment from so we can up.reload() it later.\n      renderOptions.source = this.improveHistoryValue(renderOptions.source, responseURL)\n    } else {\n      // Keep the source of the previous fragment (e.g. the form that was submitted into failure).\n      renderOptions.source = this.improveHistoryValue(renderOptions.source, 'keep')\n      // Since the current URL is not retrievable over the GET-only address bar,\n      // we can only provide history if an *explicit* location URL is passed as an option.\n      renderOptions.history = !!renderOptions.location\n    }\n\n    renderOptions.location = this.improveHistoryValue(renderOptions.location, serverLocation)\n    renderOptions.title = this.improveHistoryValue(renderOptions.title, this._response.title)\n    renderOptions.eventPlans = this._response.eventPlans\n\n    let serverTarget = this._response.target\n    if (serverTarget) {\n      renderOptions.target = serverTarget\n    }\n\n    renderOptions.acceptLayer = this._response.acceptLayer\n    renderOptions.dismissLayer = this._response.dismissLayer\n    renderOptions.document = this._response.text\n\n    if (this._response.none) {\n      renderOptions.target = ':none'\n    }\n\n    // If the server has provided an update to our context via the X-Up-Context\n    // response header, merge it into our existing { context } option.\n    renderOptions.context = u.merge(renderOptions.context, this._response.context)\n\n    renderOptions.cspNonces = this._response.cspNonces\n    renderOptions.time ??= this._response.lastModified\n    renderOptions.etag ??= this._response.etag\n  }\n\n  static {\n    u.memoizeMethod(this.prototype, {\n      _loadedEventProps: true,\n    })\n  }\n}\n", "const u = up.util\n\nup.Change.FromContent = class FromContent extends up.Change {\n\n  constructor(options) {\n    super(options)\n\n    // Only extract options required for step building, since #execute() will be called with an\n    // postflightOptions argument once the response is received and has provided refined\n    // options.\n    this._origin = this.options.origin\n    this._preview = this.options.preview\n\n    // // When we're swapping elements in origin's layer, we can be choose a fallback\n    // // replacement zone close to the origin instead of looking up a selector in the\n    // // entire layer (where it might match unrelated elements).\n    // if (this._origin) {\n    //   this.originLayer = up.layer.get(this._origin)\n    // }\n  }\n\n  _getPlans() {\n    let plans = []\n\n    this._lookupLayers()\n    this._improveOptionsFromResponseDoc()\n\n    // First seek { target } in all layers, then seek { fallback } in all layers.\n    this._expandIntoPlans(plans, this._layers, this.options.target)\n    this._expandIntoPlans(plans, this._layers, this.options.fallback)\n\n    return plans\n  }\n\n  _isRenderableLayer(layer) {\n    return (layer === 'new') || layer.isOpen()\n  }\n\n  _lookupLayers() {\n    // (1) If we're rendering a fragment from a { url }, options.layer will already\n    //     be an array of up.Layer objects, set by up.Change.FromURL. It looks up the\n    //     layer eagerly because in case of { layer: 'origin' } (default for navigation)\n    //     the { origin } element may get removed while the request was in flight.\n    //     From that given array we need to remove layers that have been closed while\n    //     the request was in flight.\n    //\n    // (2) If we're rendering a framgent from local content ({ document, fragment, content }),\n    //     options.layer will be a layer name like \"current\" and needs to be looked up.\n    //\n    // (3) If we end up having no renderable layers, don't throw here.\n    //     seekPlan() and its up.CannotMatch handling may not be active yet.\n    this._allLayers = up.layer.getAll(this.options)\n    this._layers = u.filter(this._allLayers, this._isRenderableLayer)\n  }\n\n  _expandIntoPlans(plans, layers, targets) {\n    for (let layer of layers) {\n      // An abstract selector like :main may expand into multiple\n      // concrete selectors, like ['main', '.content'].\n      for (let target of this._expandTargets(targets, layer)) {\n        // Any plans we add will inherit all properties from @options\n        const props = { ...this.options, target, layer, defaultPlacement: this._defaultPlacement() }\n        const change = layer === 'new' ? new up.Change.OpenLayer(props) : new up.Change.UpdateLayer(props)\n        plans.push(change)\n      }\n    }\n  }\n\n  _expandTargets(targets, layer) {\n    return up.fragment.expandTargets(targets, { layer, mode: this.options.mode, origin: this._origin })\n  }\n\n  execute() {\n    // Preloading from local content is a no-op.\n    if (this.options.preload) {\n      return Promise.resolve()\n    }\n\n    return this._seekPlan(this._executePlan.bind(this)) || this._cannotMatchPostflightTarget()\n  }\n\n  _executePlan(matchedPlan) {\n    let result = matchedPlan.execute(\n      this._getResponseDoc(),\n      this._onPlanApplicable.bind(this, matchedPlan)\n    )\n\n    result.options = this.options\n\n    return result\n  }\n\n  _isApplicablePlanError(error) {\n    return !(error instanceof up.CannotMatch)\n  }\n\n  // Final preparations before elements are being changed.\n  _onPlanApplicable(plan) {\n    let primaryPlan = this._getPlans()[0]\n    if (plan !== primaryPlan) {\n      up.puts('up.render()', 'Could not match primary target \"%s\". Updating a fallback target \"%s\".', primaryPlan.target, plan.target)\n    }\n\n    let { assets } = this._getResponseDoc()\n    if (assets) {\n      up.script.assertAssetsOK(assets, plan.options)\n    }\n\n    // Used by up.RenderJob\n    this.options.onRender?.()\n  }\n\n  _getResponseDoc() {\n    if (this._preview) return\n\n    const docOptions = u.pick(this.options, [\n      'target',\n      'content',\n      'fragment',\n      'document',\n      'html',\n      'cspNonces',\n      'origin',\n    ])\n    up.migrate.handleResponseDocOptions?.(docOptions)\n\n    // If neither { document } nor { fragment } source is given, we assume { content }.\n    if (this._defaultPlacement() === 'content') {\n      // When processing { content }, ResponseDoc needs a { target }\n      // to create a matching element.\n      docOptions.target = this._firstExpandedTarget(docOptions.target)\n    }\n\n    return new up.ResponseDoc(docOptions)\n  }\n\n  _improveOptionsFromResponseDoc() {\n    if (this._preview) return\n\n    let responseDoc = this._getResponseDoc()\n\n    if (this.options.fragment) {\n      // ResponseDoc allows to pass innerHTML as { fragment }, but then it also\n      // requires a { target }. We use a target that matches the parsed { fragment }.\n      this.options.target ||= responseDoc.rootSelector()\n    }\n\n    this.options.title = this.improveHistoryValue(this.options.title, responseDoc.title)\n\n    this.options.metaTags = this.improveHistoryValue(this.options.metaTags, responseDoc.metaTags)\n  }\n\n  _defaultPlacement() {\n    if (!this.options.document && !this.options.fragment) {\n      return 'content'\n    }\n  }\n\n  // When the user provided a { content } we need an actual CSS selector for\n  // which up.ResponseDoc can create a matching element.\n  _firstExpandedTarget(target) {\n    // When the user passes a closed layer as { layer } option, we expand the target with the root\n    // layer instead of having up.fragment.expandTargets() throw. In many cases we get the same result.\n    let layer = this._layers[0] || up.layer.root\n    return this._expandTargets(target || ':main', layer)[0]\n  }\n\n  // Returns information about the change that is most likely before the request was dispatched.\n  // This might change postflight if the response does not contain the desired target.\n  getPreflightProps(opts = {}) {\n    const getPlanProps = plan => plan.getPreflightProps()\n    return this._seekPlan(getPlanProps) || opts.optional || this._cannotMatchPreflightTarget()\n  }\n\n  _cannotMatchPreflightTarget() {\n    this._cannotMatchTarget('Could not find target in current page')\n  }\n\n  _cannotMatchPostflightTarget() {\n    this._cannotMatchTarget('Could not find common target in current page and response')\n  }\n\n  _cannotMatchTarget(reason) {\n    if (this._getPlans().length) {\n      const planTargets = u.uniq(u.map(this._getPlans(), 'target'))\n      const humanizedLayerOption = up.layer.optionToString(this.options.layer)\n      throw new up.CannotMatch([reason + \" (tried selectors %o in %s)\", planTargets, humanizedLayerOption])\n    } else if (this._layers.length === 0) {\n      this._cannotMatchLayer()\n    } else if (this.options.failPrefixForced) {\n      throw new up.CannotMatch('No target selector given for failed responses (https://unpoly.com/failed-responses)')\n    } else {\n      throw new up.CannotMatch('No target selector given')\n    }\n  }\n\n  _cannotMatchLayer() {\n    throw new up.CannotMatch('Could not find a layer to render in. You may have passed an unmatchable layer reference, or a detached element.')\n  }\n\n  _seekPlan(fn) {\n    for (let plan of this._getPlans()) {\n      try {\n        // A return statement stops iteration of a vanilla for loop,\n        // but would not stop an u.each() or Array#forEach().\n        return fn(plan)\n      } catch (error) {\n        // Re-throw any unexpected type of error, but ignore up.CannotMatch to try the next plan.\n        if (this._isApplicablePlanError(error)) {\n          throw error\n        }\n      }\n    }\n  }\n\n  static {\n    u.memoizeMethod(this.prototype, {\n      _getPlans: true,\n      _getResponseDoc: true,\n      getPreflightProps: true,\n    })\n  }\n\n}\n", "const u = up.util\n\nup.CompilerPass = class CompilerPass {\n\n  constructor(root, compilers, { layer, data, dataMap, meta }) {\n    // (1) If a caller has already looked up the layer we don't want to look it up again.\n    // (2) Default to the current layer in case the user manually compiles a detached element.\n    layer ||= up.layer.get(root) || up.layer.current\n\n    this._root = root\n    this._compilers = compilers\n    this._layer = layer\n    this._data = data\n    this._dataMap = dataMap\n\n    // The meta object may have a getter on { response }, defined by unpoly-migrate.js.\n    // Hence we cannot make a new object here.\n    meta ||= {}\n    meta.layer = layer\n    this._meta = meta\n  }\n\n  run() {\n    // If we're compiling a fragment in a background layer, we want\n    // up.layer.current to resolve to that background layer, not the front layer.\n    this._layer.asCurrent(() => {\n      this.setCompileData()\n\n      for (let compiler of this._compilers) {\n        this._runCompiler(compiler)\n      }\n    })\n  }\n\n  setCompileData() {\n    if (this._data) {\n      this._root.upCompileData = this._data\n    }\n\n    if (this._dataMap) {\n      for (let selector in this._dataMap) {\n        for (let match of this._select(selector)) {\n          match.upCompileData = this._dataMap[selector]\n        }\n      }\n    }\n  }\n\n  _runCompiler(compiler) {\n    const matches = this._selectOnce(compiler)\n    if (!matches.length) { return }\n\n    if (!compiler.isDefault) {\n      up.puts('up.hello()', 'Compiling %d\u00D7 \"%s\" on %s', matches.length, compiler.selector, this._layer)\n    }\n\n    if (compiler.batch) {\n      this._compileBatch(compiler, matches)\n    } else {\n      for (let match of matches) {\n        this._compileOneElement(compiler, match)\n      }\n    }\n\n    return up.migrate.postCompile?.(matches, compiler)\n  }\n\n  _compileOneElement(compiler, element) {\n    const compileArgs = [element]\n    // Do not retrieve and parse [up-data] unless the compiler function\n    // expects a second argument. Note that we must pass data for an argument\n    // count of 0, since then the function might take varargs.\n    if (compiler.length !== 1) {\n      const data = up.script.data(element)\n      compileArgs.push(data, this._meta)\n    }\n\n    const result = this._applyCompilerFunction(compiler, element, compileArgs)\n\n    let destructorOrDestructors = this._destructorPresence(result)\n    if (destructorOrDestructors) {\n      up.destructor(element, destructorOrDestructors)\n    }\n  }\n\n  _compileBatch(compiler, elements) {\n    const compileArgs = [elements]\n    // Do not retrieve and parse [up-data] unless the compiler function\n    // expects a second argument. Note that we must pass data for an argument\n    // count of 0, since then the function might take varargs.\n    if (compiler.length !== 1) {\n      const dataList = u.map(elements, up.script.data)\n      compileArgs.push(dataList, this._meta)\n    }\n\n    const result = this._applyCompilerFunction(compiler, elements, compileArgs)\n\n    if (this._destructorPresence(result)) {\n      up.fail('Compilers with { batch: true } cannot return destructors')\n    }\n  }\n\n  _applyCompilerFunction(compiler, elementOrElements, compileArgs) {\n    // return compiler.apply(elementOrElements, compileArgs)\n    return up.error.guard(() => compiler.apply(elementOrElements, compileArgs))\n  }\n\n  _destructorPresence(result) {\n    // Check if the result value looks like a destructor to filter out\n    // unwanted implicit returns in CoffeeScript.\n    if (u.isFunction(result) || (u.isArray(result) && (u.every(result, u.isFunction)))) {\n      return result\n    }\n  }\n\n  _select(selector) {\n    return up.fragment.subtree(this._root, u.evalOption(selector), { layer: this._layer } )\n  }\n\n  _selectOnce(compiler) {\n    let matches = this._select(compiler.selector)\n    return u.filter(matches, (element) => {\n      let appliedCompilers = (element.upAppliedCompilers ||= new Set())\n      if (!appliedCompilers.has(compiler)) {\n        appliedCompilers.add(compiler)\n        return true\n      }\n    })\n  }\n\n}\n", "const u = up.util\nconst e = up.element\n\nup.CSSTransition = class CSSTransition {\n\n  constructor(element, lastFrameKebab, options) {\n    this._element = element\n    this._lastFrameKebab = lastFrameKebab\n    this._lastFrameKeysKebab = Object.keys(this._lastFrameKebab)\n    if (u.some(this._lastFrameKeysKebab, key => key.match(/A-Z/))) {\n      up.fail('Animation keys must be kebab-case')\n    }\n    this._finishEvent = options.finishEvent\n    this._duration = options.duration\n    this._easing = options.easing\n    this._finished = false\n  }\n\n  start() {\n    if (this._lastFrameKeysKebab.length === 0) {\n      this._finished = true\n      // If we have nothing to animate, we will never get a transitionEnd event\n      // and the returned promise will never resolve.\n      return Promise.resolve()\n    }\n\n    this._deferred = u.newDeferred()\n    this._pauseOldTransition()\n    this._startTime = new Date()\n    this._startFallbackTimer()\n    this._listenToFinishEvent()\n    this._listenToTransitionEnd()\n\n    this._startMotion()\n\n    return this._deferred\n  }\n\n  _listenToFinishEvent() {\n    if (this._finishEvent) {\n      this._stopListenToFinishEvent = up.on(this._element, this._finishEvent, this._onFinishEvent.bind(this))\n    }\n  }\n\n  _onFinishEvent(event) {\n    // don't waste time letting the event bubble up the DOM\n    event.stopPropagation()\n    this._finish()\n  }\n\n  _startFallbackTimer() {\n    const timingTolerance = 100\n    this._fallbackTimer = u.timer((this._duration + timingTolerance), () => {\n      this._finish()\n    })\n  }\n\n  _stopFallbackTimer() {\n    clearTimeout(this._fallbackTimer)\n  }\n\n  _listenToTransitionEnd() {\n    this._stopListenToTransitionEnd = up.on(this._element, 'transitionend', this._onTransitionEnd.bind(this))\n  }\n\n  _onTransitionEnd(event) {\n    // Check if the transitionend event was caused by our own transition,\n    // and not by some other transition that happens to affect this element.\n    if (event.target !== this._element) { return }\n\n    // Check if we are receiving a late transitionEnd event\n    // from a previous CSS transition.\n    const elapsed = new Date() - this._startTime\n    if (elapsed <= (0.25 * this._duration)) { return }\n\n    const completedPropertyKebab = event.propertyName\n    if (!u.contains(this._lastFrameKeysKebab, completedPropertyKebab)) { return }\n\n    this._finish()\n  }\n\n  _finish() {\n    // Make sure that any queued events won't finish multiple times.\n    if (this._finished) { return }\n    this._finished = true\n\n    this._stopFallbackTimer()\n    this._stopListenToFinishEvent?.()\n    this._stopListenToTransitionEnd?.()\n\n    // Cleanly finish our own transition so the old transition\n    // (or any other transition set right after that) will be able to take effect.\n    e.concludeCSSTransition(this._element)\n\n    this._resumeOldTransition()\n\n    this._deferred.resolve()\n  }\n\n  _pauseOldTransition() {\n    const oldTransition = e.style(this._element, [\n      'transitionProperty',\n      'transitionDuration',\n      'transitionDelay',\n      'transitionTimingFunction'\n    ])\n\n    if (e.hasCSSTransition(oldTransition)) {\n      // Freeze the previous transition at its current place, by setting the currently computed,\n      // animated CSS properties as inline styles. Transitions on all properties will not be frozen,\n      // since that would involve setting every single CSS property as an inline style.\n      if (oldTransition.transitionProperty !== 'all') {\n        const oldTransitionProperties = oldTransition.transitionProperty.split(/\\s*,\\s*/)\n        const oldTransitionFrameKebab = e.style(this._element, oldTransitionProperties)\n        this._setOldTransitionTargetFrame = e.setTemporaryStyle(this._element, oldTransitionFrameKebab)\n      }\n\n      // Stop the existing CSS transition so it does not emit transitionEnd events\n      this._setOldTransition = e.concludeCSSTransition(this._element)\n    }\n  }\n\n  _resumeOldTransition() {\n    this._setOldTransitionTargetFrame?.()\n    this._setOldTransition?.()\n  }\n\n  _startMotion() {\n    e.setStyle(this._element, {\n      transitionProperty: Object.keys(this._lastFrameKebab).join(', '),\n      transitionDuration: `${this._duration}ms`,\n      transitionTimingFunction: this._easing\n    })\n    e.setStyle(this._element, this._lastFrameKebab)\n  }\n}\n\n", "const u = up.util\n\nup.DestructorPass = class DestructorPass {\n\n  constructor(fragment, options) {\n    this._fragment = fragment\n    this._options = options\n  }\n\n  run() {\n    for (let cleanable of this._selectCleanables()) {\n      let destructors = u.pluckKey(cleanable, 'upDestructors')\n      if (destructors) {\n        for (let destructor of destructors) {\n          this._applyDestructorFunction(destructor, cleanable)\n        }\n      }\n      cleanable.classList.remove('up-can-clean')\n    }\n  }\n\n  _selectCleanables() {\n    // fragment functions usually ignore elements that are being destroyed\n    const selectOptions = { ...this._options, destroying: true }\n    return up.fragment.subtree(this._fragment, '.up-can-clean', selectOptions)\n  }\n\n  _applyDestructorFunction(destructor, element) {\n    up.error.guard(() => destructor(element))\n  }\n}\n", "const u = up.util\nconst e = up.element\n\nup.EventEmitter = class EventEmitter extends up.Record {\n\n  keys() {\n    return [\n      'target',\n      'event',\n      'baseLayer',\n      'callback',\n      'log',\n      'ensureBubbles',\n    ]\n  }\n\n  emit() {\n    this._logEmission()\n\n    if (this.baseLayer) {\n      this.baseLayer.asCurrent(() => this._dispatchEvent())\n    } else {\n      this._dispatchEvent()\n    }\n    return this.event\n  }\n\n  _dispatchEvent() {\n    this.target.dispatchEvent(this.event)\n\n    if (this.ensureBubbles && !this.target.isConnected) {\n      document.dispatchEvent(this.event)\n    }\n\n    up.error.guard(() => this.callback?.(this.event))\n  }\n\n  assertEmitted() {\n    const event = this.emit()\n    if (event.defaultPrevented) {\n      throw new up.Aborted(`Event ${event.type} was prevented`)\n    }\n  }\n\n  _logEmission() {\n    if (!up.log.config.enabled) { return }\n\n    let message = this.log\n    let messageArgs\n\n    if (u.isArray(message)) {\n      [message, ...messageArgs] = message\n    } else {\n      messageArgs = []\n    }\n\n    const { type } = this.event\n\n    if (u.isString(message)) {\n      up.puts(type, message, ...messageArgs)\n    } else if (message !== false) {\n      up.puts(type, `Event ${type}`)\n    }\n  }\n\n  static fromEmitArgs(args, defaults = {}) {\n    // Event-emitting functions are crazy overloaded:\n    //\n    // - up.emit([target], eventType, [eventProps])\n    // - up.emit([target], eventPlan) # eventPlan must contain { type } property\n    // - up.emit([target], event, [emitDetails]) # emitDetails may contain options like { layer } or { callback }\n    //\n    // Hence the insane argument parsing logic seen below.\n    //\n    // We begin by removing an options hash from the end of the argument list.\n    // This might be an object of event properties, which might or might contain a\n    // { type } property for the event type. In case we are passed a pre-built\n    // Event object, the hash will contain emission that options that cannot be\n    // carried by the event object, such as { layer } or { callback }.\n    let options = u.extractOptions(args)\n\n    // Event-emitting functions may instantiate their up.EventEmitter with preconfigured\n    // defaults. E.g. up.Layer#emit() will set the default { layer: this }.\n    options = u.merge(defaults, options)\n\n    // If we are passed an element or layer as a first argument, this is the event\n    // target. We remove it from the argument list and store it in options.\n    if (u.isElementish(args[0])) {\n      options.target = e.get(args.shift())\n    } else if (args[0] instanceof up.Layer) {\n      options.layer = args.shift()\n    }\n\n    // Setting a { layer } is a shorthand to (1) emit the event on the layer's\n    // element and (2) to set up.layer.current to that layer during emission.\n    let layer\n    if (u.isGiven(options.layer)) {\n      layer = up.layer.get(options.layer)\n      options.target ||= layer.element\n      options.baseLayer ||= layer\n    }\n\n    // Setting { baseLayer } will fix up.layer.current to that layer during emission.\n    // In case we get a layer name like 'root' (instead of an up.Layer object) we look\n    // up the actual up.Layer object.\n    if (options.baseLayer) {\n      options.baseLayer = up.layer.get(options.baseLayer)\n    }\n\n    if (u.isString(options.target)) {\n      options.target = up.fragment.get(options.target, {layer: options.layer})\n    } else if (!options.target) {\n      // If no element is given, we emit the event on the document.\n      options.target = document\n    }\n\n    if (args[0]?.preventDefault) {\n      // In this branch we receive an Event object that was already built:\n      // up.emit([target], event, [emitOptions])\n      options.event = args[0]\n      options.log ??= args[0].log\n    } else if (u.isString(args[0])) {\n      // In this branch we receive an Event type and props object.\n      // The props object may also include options for the emission, such as\n      // { layer }, { target }, { baseLayer } or { log }.\n      // up.emit([target], eventType, [eventPropsAndEmitOptions])\n      options.event = up.event.build(args[0], options)\n    } else {\n      // In this branch we receive an object that contains the event type as a { type } property:\n      // up.emit([target, { type: 'foo', prop: 'value' }\n      options.event = up.event.build(options)\n    }\n\n    return new (this)(options)\n  }\n}\n", "const u = up.util\n\nup.EventListener = class EventListener extends up.Record {\n\n  keys() {\n    return [\n      'element',\n      'eventType',\n\n      'selector',\n      'callback',\n      'guard',\n      'baseLayer',\n      'passive',\n      'once',\n      'capture',\n      'beforeBoot',\n    ]\n  }\n\n  constructor(attributes) {\n    super(attributes)\n    this._key = this.constructor._buildKey(attributes)\n    this.isDefault = up.framework.evaling\n\n    // We don't usually run up.on() listeners before Unpoly has booted.\n    // This is done so incompatible code is not called on browsers that don't support Unpoly.\n    // Listeners that do need to run before Unpoly boots can pass { beforeBoot: true } to override.\n    // We also default to { beforeBoot: true } for framework events that are emitted\n    // before booting.\n    this.beforeBoot ??= (this.eventType.indexOf('up:framework:') === 0)\n\n    // Need to store the bound nativeCallback function because addEventListener()\n    // and removeEventListener() need to see the exact same reference.\n    this.nativeCallback = this.nativeCallback.bind(this)\n  }\n\n  bind() {\n    const map = (this.element.upEventListeners ||= {})\n    if (map[this._key]) {\n      up.fail('up.on(): The %o callback %o cannot be registered more than once', this.eventType, this.callback)\n    }\n    map[this._key] = this\n\n    this.element.addEventListener(...this._addListenerArg())\n  }\n\n  _addListenerArg() {\n    // Avoid setting a default { passive: false } since some browsers have non-false\n    // defaults for some event types like `touchstart`.\n    // See https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#parameters\n    let options = u.compactObject(u.pick(this, ['once', 'passive', 'capture']))\n    return [this.eventType, this.nativeCallback, options]\n  }\n\n  unbind() {\n    let map = this.element.upEventListeners\n    if (map) {\n      delete map[this._key]\n    }\n    this.element.removeEventListener(...this._addListenerArg())\n  }\n\n  nativeCallback(event) {\n    if (up.framework.beforeBoot && !this.beforeBoot) {\n      return\n    }\n\n    // 1. Since we're listing on `document`, event.currentTarget is now `document`.\n    // 2. event.target is the element that received an event, which might be a\n    //    child of `selector`.\n    // 3. There is only a single event bubbling up the DOM, so we are only called once.\n    let element = event.target\n    if (this.selector) {\n      element = element.closest(u.evalOption(this.selector))\n    }\n\n    if (this.guard && !this.guard(event)) {\n      return\n    }\n\n    if (element) {\n      const args = [event, element]\n\n      // Do not retrieve and parse [up-data] unless the listener function\n      // expects a third argument. Note that we must pass data for an argument\n      // count of 0, since then the function might take varargs.\n      const expectedArgCount = this.callback.length\n\n      if (expectedArgCount !== 1 && expectedArgCount !== 2) {\n        const data = up.script.data(element)\n        args.push(data)\n      }\n\n      // Do not allow click events from disabled elements to propagate\n      if (this.eventType === 'click' && element.disabled) {\n        return\n      }\n\n      const applyCallback = this.callback.bind(element, ...args)\n\n      if (this.baseLayer) {\n        // Unpoly will usually set up.layer.current when emitting an event.\n        // But Unpoly-unaware code will not set up.layer.current when emitting events.\n\n        // Hence layerInstance.on('click') will use this to set layer.current to layerInstance.\n        this.baseLayer.asCurrent(applyCallback)\n      } else {\n        applyCallback()\n      }\n    }\n  }\n\n  static fromElement(attributes) {\n    let map = attributes.element.upEventListeners\n    if (map) {\n      const key = this._buildKey(attributes)\n      return map[key]\n    }\n  }\n\n  static _buildKey(attributes) {\n    // Give the callback function a numeric identifier so it\n    // can become part of the upEventListeners key.\n    attributes.callback.upUid ||= u.uid()\n\n    return [\n      attributes.eventType,\n      attributes.selector,\n      attributes.callback.upUid\n    ].join('|')\n  }\n\n  static allNonDefault(element) {\n    let map = element.upEventListeners\n    if (map) {\n      const listeners = Object.values(map)\n      return u.reject(listeners, 'isDefault')\n    } else {\n      return []\n    }\n  }\n}\n", "const u = up.util\n\nup.EventListenerGroup = class EventListenerGroup extends up.Record {\n\n  keys() {\n    return [\n      'elements',\n      'eventTypes',\n\n      'selector',\n      'callback',\n      'guard',\n      'baseLayer',\n      'passive',\n      'once',\n      'capture',\n      'beforeBoot',\n    ]\n  }\n\n  bind() {\n    const unbindFns = []\n\n    this._eachListenerAttributes(function(attrs) {\n      const listener = new up.EventListener(attrs)\n      listener.bind()\n      return unbindFns.push(listener.unbind.bind(listener))\n    })\n\n    return u.sequence(unbindFns)\n  }\n\n  _eachListenerAttributes(fn) {\n    for (let element of this.elements) {\n      for (let eventType of this.eventTypes) {\n        fn(this._listenerAttributes(element, eventType))\n      }\n    }\n  }\n\n  _listenerAttributes(element, eventType) {\n    return { ...this.attributes(), element, eventType }\n  }\n\n  unbind() {\n    this._eachListenerAttributes(function(attrs) {\n      let listener = up.EventListener.fromElement(attrs)\n      if (listener) {\n        listener.unbind()\n      }\n    })\n  }\n\n  /*\n  Constructs a new up.EventListenerGroup from arguments with many different combinations:\n\n      [[elements], eventTypes, [selector], [options], callback]\n\n  @function up.EventListenerGroup.fromBindArgs\n  @internal\n  */\n  static fromBindArgs(args, defaults) {\n    args = u.copy(args)\n\n    // A callback function is given in all arg variants.\n    const callback = args.pop()\n\n    // The user can pass an element (or the document, or the window) as the\n    // first argument. If omitted, the listener will bind to the document.\n    let elements\n    if (args[0].addEventListener) {\n      elements = [args.shift()]\n    } else if (u.isJQuery(args[0]) || (u.isList(args[0]) && args[0][0].addEventListener)) {\n      elements = args.shift()\n    } else {\n      elements = [document]\n    }\n\n    // Event names are given in all arg variants\n    let eventTypes = u.parseTokens(args.shift())\n    let fixTypes = up.migrate.fixEventTypes\n    if (fixTypes) {\n      eventTypes = fixTypes(eventTypes)\n    }\n\n    const options = u.extractOptions(args)\n\n    // A selector is given if the user wants to delegate events.\n    // It might be undefined.\n    const selector = args[0]\n\n    const attributes = { elements, eventTypes, selector, callback, ...options, ...defaults }\n    return new (this)(attributes)\n  }\n}\n", "const u = up.util\n\nup.FieldWatcher = class FieldWatcher {\n\n  constructor(root, options, callback) {\n    this._options = options\n    this._root = root\n    this._scope = up.form.getScope(root)\n    this._callback = callback\n    this._batch = options.batch\n    this._abortable = options.abortable\n  }\n\n  start() {\n    this._scheduledValues = null\n    this._processedValues = this._readFieldValues()\n    this._currentTimer = null\n    this._callbackRunning = false\n    this._unbindFns = []\n\n    this._watchFieldsWithin(this._root)\n\n    this._root.addEventListener('up:fragment:inserted', ({ target }) => {\n      if (target !== this._root) this._watchFieldsWithin(target)\n    })\n\n    this._unbindFns.push(\n      up.fragment.onAborted(this._scope, () => this._abort())\n    )\n\n    this._unbindFns.push(\n      up.on(this._scope, 'reset', () => this._onFormReset())\n    )\n  }\n\n  stop() {\n    this._abort()\n    for (let unbindFn of this._unbindFns) unbindFn()\n  }\n\n  _fieldOptions(field) {\n    let rootOptions = u.copy(this._options)\n    return up.form.watchOptions(field, rootOptions, { defaults: { event: 'input' } })\n  }\n\n  _watchFieldsWithin(container) {\n    for (let field of up.form.fields(container)) {\n      this._watchField(field)\n    }\n  }\n\n  _watchField(field) {\n    let fieldOptions = this._fieldOptions(field)\n    this._unbindFns.push(\n      up.on(field, fieldOptions.event, () => this._check(fieldOptions))\n    )\n  }\n\n  _abort() {\n    // This causes the next call to _requestCallback() to return early.\n    this._scheduledValues = null\n  }\n\n  _scheduleValues(values, fieldOptions) {\n    this._scheduledValues = values\n    this._scheduledFieldOptions = fieldOptions\n    let delay = fieldOptions.delay || 0\n    clearTimeout(this._currentTimer) // debounce a previously set timer\n    this._currentTimer = u.timer(delay, () => {\n      this._currentTimer = null\n      this._requestCallback()\n    })\n  }\n\n  _isNewValues(values) {\n    return !u.isEqual(values, this._processedValues) && !u.isEqual(this._scheduledValues, values)\n  }\n\n  async _requestCallback() {\n    // When aborted we nullify _scheduledValues to cancel a scheduled callback.\n    if (!this._scheduledValues) return\n\n    // We don't run callbacks when a prior async callback is still running.\n    // We will call _requestCallback() again once the prior callback terminates.\n    if (this._callbackRunning) return\n\n    // When we re-called _requestCallback() after waiting for a prior callback, another\n    // debounce delay may have started while waiting for the prior callback.\n    // We must not shorted that debounce delay.\n    if (this._currentTimer) return\n\n    // If the form was destroyed while a callback was scheduled, we don't run the callback.\n    if (!this._scope.isConnected) return\n\n    let fieldOptions = this._scheduledFieldOptions\n    const diff = this._changedValues(this._processedValues, this._scheduledValues)\n    this._processedValues = this._scheduledValues\n    this._scheduledValues = null\n    this._callbackRunning = true\n    this._scheduledFieldOptions = null\n\n    // If any callback returns a promise, we will handle { disable } below.\n    // We set { disable: false } so callbacks that *do* forward options\n    // to up.render() don't unnecessarily disable a second time.\n    let callbackOptions = { ...fieldOptions, disable: false }\n\n    const callbackReturnValues = []\n    if (this._batch) {\n      callbackReturnValues.push(this._runCallback(diff, callbackOptions))\n    } else {\n      for (let name in diff) {\n        const value = diff[name]\n        callbackReturnValues.push(this._runCallback(value, name, callbackOptions))\n      }\n    }\n\n    // If any callbacks returned promises, we wait for all of them to settle.\n    // We also process a { disable } option from [up-disable] or [up-watch-disable]\n    // attrs so callbacks don't have to handle this.\n    if (u.some(callbackReturnValues, u.isPromise)) {\n      let callbackDone = Promise.allSettled(callbackReturnValues)\n      up.form.disableWhile(callbackDone, fieldOptions)\n      await callbackDone\n    }\n\n    this._callbackRunning = false\n\n    // A debounce delay may have finished and returned earlier while a priour async callback was still running.\n    this._requestCallback()\n  }\n\n  _runCallback(...args) {\n    return up.error.guard(() => this._callback(...args))\n  }\n\n  _changedValues(previous, next) {\n    const changes = {}\n    let keys = Object.keys(previous)\n    keys = keys.concat(Object.keys(next))\n    keys = u.uniq(keys)\n    for (let key of keys) {\n      const previousValue = previous[key]\n      const nextValue = next[key]\n      if (!u.isEqual(previousValue, nextValue)) {\n        changes[key] = nextValue\n      }\n    }\n    return changes\n  }\n\n  _readFieldValues() {\n    return up.Params.fromContainer(this._root).toObject()\n  }\n\n  _check(fieldOptions = {}) {\n    const values = this._readFieldValues()\n\n    if (this._isNewValues(values)) {\n      this._scheduleValues(values, fieldOptions)\n    }\n  }\n\n  _onFormReset() {\n    // We need to wait 1 task for the reset button to affect field values\n    u.task(() => this._check())\n  }\n}\n", "const u = up.util\n\nup.FormValidator = class FormValidator {\n\n  constructor(form) {\n    this._form = form\n    this._dirtySolutions = []\n    this._nextRenderTimer = null\n    this._rendering = false\n    this._resetNextRenderPromise()\n    this._honorAbort()\n  }\n\n  _honorAbort() {\n    up.fragment.onAborted(this._form, (event) => this._onAborted(event))\n  }\n\n  _onAborted(event) {\n    if (this._dirtySolutions.length) {\n      this._dirtySolutions = []\n      this._nextRenderPromise.reject(new up.Aborted(event.reason))\n      this._resetNextRenderPromise()\n    }\n  }\n\n  _resetNextRenderPromise() {\n    this._nextRenderPromise = u.newDeferred()\n  }\n\n  watchContainer(fieldOrForm) {\n    let { event } = this._originOptions(fieldOrForm)\n    let guard = () => up.fragment.isAlive(fieldOrForm)\n    let callback = () => up.error.muteUncriticalRejection(this.validate({ origin: fieldOrForm }))\n    up.on(fieldOrForm, event, { guard }, callback)\n  }\n\n  validate(options = {}) {\n    let solutions = this._getSolutions(options)\n    this._dirtySolutions.push(...solutions)\n    this._scheduleNextRender()\n    return this._nextRenderPromise\n  }\n\n  _getSolutions(options) {\n    let solutions = this._getTargetSelectorSolutions(options)\n      || this._getFieldSolutions(options)\n      || this._getElementSolutions(options.origin)\n\n    for (let solution of solutions) {\n      solution.renderOptions = this._originOptions(solution.origin, options)\n\n      // Resolve :origin selector here. We can't delegate to up.render({ origin })\n      // as that only takes a single origin, even with multiple targets.\n      solution.target = up.fragment.resolveOrigin(solution.target, solution)\n    }\n\n    return solutions\n  }\n\n  _getFieldSolutions({ origin, ...options }) {\n    if (up.form.isField(origin)) {\n      return this._getValidateAttrSolutions(origin) || this._getFormGroupSolutions(origin, options)\n    }\n  }\n\n  _getFormGroupSolutions(field, { formGroup = true }) {\n    if (!formGroup) return\n\n    let solution = up.form.groupSolution(field)\n    if (solution) {\n      up.puts('up.validate()', 'Validating form group of field %o', field)\n      return [solution]\n    }\n  }\n\n  _getTargetSelectorSolutions({ target, origin }) {\n    if (u.isString(target) && target) {\n      up.puts('up.validate()', 'Validating target \"%s\"', target)\n      let simpleSelectors = up.fragment.splitTarget(target)\n      return u.compact(simpleSelectors.map(function(simpleSelector) {\n        let element = up.fragment.get(simpleSelector, { origin })\n        if (element) {\n          return {\n            element,\n            target: simpleSelector,\n            origin\n          }\n        } else {\n          up.fail('Validation target \"%s\" does not match an element', simpleSelector)\n        }\n      }))\n    }\n  }\n\n  _getElementSolutions(element) {\n    up.puts('up.validate()', 'Validating element %o', element)\n    return [{\n      element,\n      target: up.fragment.toTarget(element),\n      origin: element\n    }]\n  }\n\n  _getValidateAttrSolutions(field) {\n    // In case of radio buttons the [up-validate] attribute will\n    // be set on a container containing the entire radio button group.\n    let containerWithAttr = field.closest('[up-validate]')\n\n    if (containerWithAttr) {\n      let target = containerWithAttr.getAttribute('up-validate')\n      return this._getTargetSelectorSolutions({ target, origin: field })\n    }\n  }\n\n  _originOptions(element, overrideOptions) {\n    return up.form.watchOptions(element, overrideOptions, { defaults: { event: 'change' } })\n  }\n\n  _scheduleNextRender() {\n    let solutionDelays = this._dirtySolutions.map((solution) => solution.renderOptions.delay)\n    let shortestDelay = Math.min(...solutionDelays) || 0\n    // Render requests always reset the timer, using their then-current delay.\n    clearTimeout(this._nextRenderTimer)\n    this._nextRenderTimer = u.timer(shortestDelay, () => {\n      this._nextRenderTimer = null\n      this._renderDirtySolutions()\n    })\n  }\n\n  _renderDirtySolutions() {\n    up.error.muteUncriticalRejection(this._doRenderDirtySolutions())\n  }\n\n  async _doRenderDirtySolutions() {\n    // When aborted we clear out _dirtySolutions to cancel a scheduled callback.\n    if (!this._dirtySolutions.length) return\n\n    // We don't run callbacks when a prior async callback is still running.\n    // We will call _requestCallback() again once the prior callback terminates.\n    if (this._rendering) return\n\n    // When we re-called _requestCallback() after waiting for a prior callback, another\n    // debounce delay may have started while waiting for the prior callback.\n    // We must not shorted that debounce delay.\n    if (this._nextRenderTimer) return\n\n    let dirtySolutions = this._dirtySolutions // u.uniqBy(this._dirtySolutions, 'element')\n    this._dirtySolutions = []\n\n    // Dirty fields are the fields that triggered the validation, not the fields contained\n    // by the solution elements. This is not the same thing in a scenario like this:\n    //\n    //     <form>\n    //       <input type=\"text\" name=\"email\" up-validate=\".results\">\n    //       <div class=\"results\"></div>\n    //     </form>\n\n    // Remove duplicate names as a radio button group has multiple inputs with the same name.\n    let dirtyOrigins = u.map(dirtySolutions, 'origin')\n    let dirtyFields = u.flatMap(dirtyOrigins, up.form.fields)\n    let dirtyNames = u.uniq(u.map(dirtyFields, 'name'))\n    let dataMap = this._buildDataMap(dirtySolutions)\n    let dirtyRenderOptionsList = u.map(dirtySolutions, 'renderOptions')\n\n    // Merge together all render options for all origins.\n    let options = u.mergeDefined(\n      ...dirtyRenderOptionsList,\n      { dataMap },\n      up.form.destinationOptions(this._form),\n    )\n\n    // Update the collected targets of all solutions.\n    options.target = u.map(dirtySolutions, 'target').join(', ')\n\n    // If any solution wants feedback, they all get it.\n    options.feedback = u.some(dirtyRenderOptionsList, 'feedback')\n\n    // Since we may render multiple dirty elements we cannot have individual origins\n    // for each. We already resolved an :origin selector in getSolution(), so we don't\n    // need { origin } for target resolution.\n    options.origin = this._form\n\n    // In case we're replacing an input that the user is typing in,\n    // preserve focus, selection and scroll positions.\n    options.focus ??= 'keep'\n\n    // The protocol doesn't define whether the validation results in a status code.\n    // Some backends might want to communicate a failed validation, others might not.\n    // In any case we render the same targets for both success and failure.\n    //\n    // In cases when the server does respond with an error status, we still want to\n    // reject the up.validate() promise. Hence we use { failOptions: false } instead of\n    // { fail: false }.\n    options.failOptions = false\n\n    options.defaultMaybe = true\n\n    options.params = up.Params.merge(\n      options.params, // form field params we obtained from up.form.destinationOptions() above\n      ...u.map(dirtyRenderOptionsList, 'params') // each validate() call can pass a a custom { params } option\n    )\n\n    options.headers = u.merge(...u.map(dirtyRenderOptionsList, 'headers'))\n\n    // Make sure the X-Up-Validate header is present, so the server-side\n    // knows that it should not persist the form submission\n    this._addValidateHeader(options.headers, dirtyNames)\n\n    // The guardEvent will be be emitted on the render pass' { origin }, so the form in this case.\n    // The guardEvent will also be assigned a { renderOptions } attribute in up.render()\n    options.guardEvent = up.event.build('up:form:validate', {\n      fields: dirtyFields,\n      log: 'Validating form',\n      params: options.params\n    })\n\n    // We don't render concurrently. If additional fields want to validate\n    // while our request is in flight, they add to a new @dirtySolutions array.\n    this._rendering = true\n\n    // Just like we're gathering new dirty solutions for our next render pass,\n    // we now pass out a new validate() promise for that next pass.\n    let renderingPromise = this._nextRenderPromise\n    this._resetNextRenderPromise()\n\n    // We may render multiple solutions with { disable } options, and most delay options\n    // are specific to an { origin }. For instance, { disable: 'form-group' } disables the closest\n    // form group around the origin. Since up.render({ disable }) can only take a single\n    // value for { disable, origin }, we disable each solution outside of _rendering.\n    //\n    // Disabling the same elements multiple time is not an issue since up.form.disable()\n    // only sees enabled elements.\n    options.disable = false\n    for (let solution of dirtySolutions) {\n      up.form.disableWhile(renderingPromise, {\n        disable: solution.renderOptions.disable,\n        origin: solution.origin,\n      })\n    }\n\n    try {\n      // Resolve all promises we have handed out for the now-rendered solutions.\n      renderingPromise.resolve(up.render(options))\n      await renderingPromise\n    } finally {\n      this._rendering = false\n      // Additional solutions may have become dirty while we were _rendering so we check again.\n      // If no pending solutions are found, the method will return immediately.\n      this._renderDirtySolutions()\n    }\n  }\n\n  _addValidateHeader(headers, names) {\n    let key = up.protocol.headerize('validate')\n    let value = names.join(' ')\n    if (!value || value.length > up.protocol.config.maxHeaderSize) value = ':unknown'\n    headers[key] = value\n  }\n\n  _buildDataMap(solutions) {\n    let dataMap = {}\n\n    for (let solution of solutions) {\n      let data = u.pluckKey(solution.renderOptions, 'data')\n      let keepData = u.pluckKey(solution.renderOptions, 'keepData')\n      if (keepData) {\n        data = up.data(solution.element)\n      }\n\n      if (data) {\n        dataMap[solution.target] = data\n      }\n    }\n\n    return dataMap\n  }\n\n  static forElement(element) {\n    let form = up.form.get(element)\n    return form.upFormValidator ||= new this(form)\n  }\n\n}\n", "up.FocusCapsule = class FocusCapsule {\n\n  constructor(target, cursorProps) {\n    this._target = target\n    this._cursorProps = cursorProps\n  }\n\n  restore(layer, options) {\n    let rediscoveredElement = up.fragment.get(this._target, { layer })\n    if (rediscoveredElement) {\n      // Firefox needs focus-related props to be set *before* we focus the element\n      up.viewport.copyCursorProps(this._cursorProps, rediscoveredElement)\n      up.focus(rediscoveredElement, options)\n\n      // Signals callers that we could restore.\n      //\n      // This matters to up.FragmentFocus to know that a { focus: ['restore', '.other'] }\n      // option could restore focus, and should not focus the next option (\".other\".).\n      return true\n    }\n  }\n\n  static preserve(layer) {\n    let focusedElement = up.viewport.focusedElementWithin(layer.element)\n    if (!focusedElement) return\n\n    let target = up.fragment.tryToTarget(focusedElement)\n    if (!target) return\n\n    const cursorProps = up.viewport.copyCursorProps(focusedElement)\n    return new this(target, cursorProps)\n  }\n\n}\n", "const u = up.util\n\nup.FragmentProcessor = class FragmentProcessor extends up.Record {\n\n  keys() {\n    return [\n      'fragment',\n      'autoMeans',\n      'origin',\n      'layer'\n    ]\n  }\n\n  process(opt) {\n    let preprocessed = this.preprocess(opt)\n    return this.tryProcess(preprocessed)\n  }\n\n  preprocess(opt) {\n    return u.parseTokens(opt, { separator: 'or' })\n  }\n\n  tryProcess(opt) {\n    if (u.isArray(opt)) {\n      return this.processArray(opt)\n    }\n\n    if (u.isFunction(opt)) {\n      let result = up.error.guard(() => opt(this.fragment, this.attributes()))\n      // The function result can be another processable value.\n      return this.tryProcess(result)\n    }\n\n    if (u.isElement(opt)) {\n      return this.processElement(opt) // TODO: Test that { focus: Element } works\n    }\n\n    if (u.isString(opt)) {\n      if (opt === 'auto') {\n        return this.tryProcess(this.autoMeans)\n      }\n\n      let match = opt.match(/^(.+?)-if-(.+?)$/)\n      if (match) {\n        return this.resolveCondition(match[2]) && this.process(match[1])\n      }\n    }\n\n    return this.processPrimitive(opt)\n  }\n\n  processArray(array) {\n    return u.find(array, opt => this.tryProcess(opt))\n  }\n\n  resolveCondition(condition) {\n    if (condition === 'main') {\n      return this.fragment && up.fragment.contains(this.fragment, ':main')\n    }\n  }\n\n  findSelector(selector) {\n    const lookupOpts = { layer: this.layer, origin: this.origin }\n\n    let matchWithinFragment = this.fragment && up.fragment.get(this.fragment, selector, lookupOpts)\n    // Prefer selecting a descendant of @fragment, but if not possible search through @fragment's entire layer\n    let match = matchWithinFragment || up.fragment.get(selector, lookupOpts)\n\n    if (match) {\n      return match\n    } else {\n      up.warn('up.render()', 'Could not find an element matching \"%s\"', selector)\n      // Return undefined so { focus: 'auto' } will try the next option from { autoMeans }\n    }\n  }\n}\n", "const u = up.util\nconst DESCENDANT_SELECTOR = /^([^ >+(]+) (.+)$/\n\nup.FragmentFinder = class FragmentFinder {\n\n  constructor(options) {\n    this._options = options\n    this._origin = options.origin\n    // Selector is a string, not an up.Selector\n    this._selector = options.selector\n    // This option is for matching fragments in detached content, as needed by up.ResponseDoc.\n    this._document = options.document || window.document\n    this._match = options.match ?? up.fragment.config.match\n    this._preferOldElements = options.preferOldElements\n  }\n\n  find() {\n    return this._findInPreferredElements() || this._findInRegion() || this._findFirst()\n  }\n\n  _findInPreferredElements() {\n    if (this._preferOldElements) {\n      return this._preferOldElements.find((preferOldElement) => this._document.contains(preferOldElement) && up.fragment.matches(preferOldElement, this._selector))\n    }\n  }\n\n  _findInRegion() {\n    if (this._match === 'region' && !up.fragment.containsMainPseudo(this._selector) && this._origin?.isConnected) {\n      return this._findClosest() || this._findDescendantInRegion()\n    }\n  }\n\n  _findClosest() {\n    return up.fragment.closest(this._origin, this._selector, this._options)\n  }\n\n  _findDescendantInRegion() {\n    let simpleSelectors = up.fragment.splitTarget(this._selector)\n\n    return u.findResult(simpleSelectors, (simpleSelector) => {\n      let parts = simpleSelector.match(DESCENDANT_SELECTOR)\n      if (parts) {\n        let parent = up.fragment.closest(this._origin, parts[1], this._options)\n        if (parent) {\n          return up.fragment.getDumb(parent, parts[2])\n        }\n      }\n    })\n  }\n\n  _findFirst() {\n    return up.fragment.getDumb(this._document, this._selector, this._options)\n  }\n}\n", "const u = up.util\nconst e = up.element\n\nconst PREVENT_SCROLL_OPTIONS = { preventScroll: true }\n\nup.FragmentFocus = class FragmentFocus extends up.FragmentProcessor {\n\n  keys() {\n    return super.keys().concat([\n      'hash',\n      'focusCapsule',\n      'inputDevice',\n    ])\n  }\n\n  processPrimitive(opt) {\n    switch (opt) {\n      case 'keep':\n        // Try to keep the focus from before the fragment update.\n        return this._restoreLostFocus()\n      case 'restore':\n        // Restore the focus we saved at a previous visit the current location.\n        return this._restorePreviousFocusForLocation()\n      case 'target':\n      case true:\n        return this._focusElement(this.fragment)\n      case 'layer':\n        return this._focusElement(this.layer.getFocusElement())\n      case 'main':\n        return this._focusSelector(':main')\n      case 'hash':\n        return this._focusHash()\n      case 'autofocus':\n        return this._autofocus()\n      default:\n        if (u.isString(opt)) {\n          return this._focusSelector(opt)\n        }\n    }\n  }\n\n  processElement(element) {\n    return this._focusElement(element)\n  }\n\n  resolveCondition(condition) {\n    if (condition === 'lost') {\n      return this._wasFocusLost()\n    } else {\n      return super.resolveCondition(condition)\n    }\n  }\n\n  _focusSelector(selector) {\n    let match = this.findSelector(selector)\n    return this._focusElement(match)\n  }\n\n  _restoreLostFocus() {\n    if (this._wasFocusLost()) {\n      return this.focusCapsule?.restore(this.layer, PREVENT_SCROLL_OPTIONS)\n    }\n  }\n\n  _restorePreviousFocusForLocation() {\n    return up.viewport.restoreFocus({ layer: this.layer })\n  }\n\n  _autofocus() {\n    let autofocusElement = this.fragment && e.subtree(this.fragment, '[autofocus]')[0]\n    if (autofocusElement) {\n      return this._focusElement(autofocusElement)\n    }\n  }\n\n  _focusElement(element) {\n    if (element) {\n      up.focus(element, { force: true, ...PREVENT_SCROLL_OPTIONS, inputDevice: this.inputDevice })\n      return true\n    }\n  }\n\n  _focusHash() {\n    let hashTarget = up.viewport.firstHashTarget(this.hash, { layer: this.layer })\n    if (hashTarget) {\n      return this._focusElement(hashTarget)\n    }\n  }\n\n  _wasFocusLost() {\n    return !this.layer.hasFocus()\n  }\n\n}\n", "const e = up.element\n\nup.FragmentPolling = class FragmentPolling {\n\n  constructor(fragment) {\n    this._options = up.radio.pollOptions(fragment)\n\n    this._fragment = fragment\n    up.destructor(fragment, this._onFragmentDestroyed.bind(this))\n    up.fragment.onAborted(fragment, this._onFragmentAborted.bind(this))\n\n    this._state = 'initialized' // 'initialized' || 'started' || 'stopped'\n    this._abortable = true\n    this._loading = false\n    this._satisfyInterval()\n  }\n\n  static forFragment(fragment) {\n    return fragment.upPolling ||= new this(fragment)\n  }\n\n  onPollAttributeObserved() {\n    this._start()\n  }\n\n  _onFragmentDestroyed() {\n    // The element may come back (when it is swapped) or or may not come back (when it is destroyed).\n    // If it does come back, `onPollAttributeObserved()` will restart the polling.\n    this._stop()\n  }\n\n  _start(options) {\n    Object.assign(this._options, options)\n\n    if (this._state !== 'started') {\n      if (!up.fragment.isTargetable(this._fragment)) {\n        up.warn('[up-poll]', 'Cannot poll untargetable fragment %o', this._fragment)\n        return\n      }\n\n      this._state = 'started'\n      this._ensureEventsBound()\n      this._scheduleRemainingTime()\n    }\n  }\n\n  _stop() {\n    if (this._state === 'started') {\n      this._clearReloadTimer()\n      this._state = 'stopped'\n      this.unbindEvents?.()\n    }\n  }\n\n  forceStart(options) {\n    Object.assign(this._options, options)\n    this.forceStarted = true\n    this._start()\n  }\n\n  forceStop() {\n    this._stop()\n    this.forceStarted = false\n  }\n\n  _ensureEventsBound() {\n    if (!this.unbindEvents) {\n      this.unbindEvents = up.on('visibilitychange up:layer:opened up:layer:dismissed up:layer:accepted', this._onVisibilityChange.bind(this))\n    }\n  }\n\n  _onVisibilityChange() {\n    if (this._isFragmentVisible()) {\n      this._scheduleRemainingTime()\n    } else {\n      // Let the existing timer play out for two reasons:\n      //\n      // 1. The fragment may become visible again before the timer runs out\n      // 2. Print the reason for not polling to the console once.\n    }\n  }\n\n  _isFragmentVisible() {\n    return (!document.hidden) &&\n           (this._options.ifLayer === 'any' || this._isOnFrontLayer())\n  }\n\n  _clearReloadTimer() {\n    clearTimeout(this.reloadTimer)\n    this.reloadTimer = null\n  }\n\n  _scheduleRemainingTime() {\n    if (!this.reloadTimer && !this._loading) {\n      this._clearReloadTimer()\n      this.reloadTimer = setTimeout(\n        this._onTimerReached.bind(this),\n        this._getRemainingDelay()\n      )\n    }\n  }\n\n  _onTimerReached() {\n    this.reloadTimer = null\n    this._tryReload()\n  }\n\n  _tryReload() {\n    // The setTimeout(doReload) callback might already be scheduled\n    // before the polling stopped.\n    if (this._state !== 'started') {\n      return\n    }\n\n    if (!this._isFragmentVisible()) {\n      up.puts('[up-poll]', 'Will not poll hidden fragment')\n      // (1) We don't need to re-schedule a timer here. _onVisibilityChange() will do that for us.\n      // (2) Also we prefer to not have pending timers in inactive tabs to save resources.\n      return\n    }\n\n    if (up.emit(this._fragment, 'up:fragment:poll', { log: ['Polling fragment', this._fragment] }).defaultPrevented) {\n      up.puts('[up-poll]', 'User prevented up:fragment:poll event')\n      this._satisfyInterval() // Block polling for a full interval\n      this._scheduleRemainingTime() // There is no event that would re-schedule for us\n      return\n    }\n\n    this._reloadNow()\n  }\n\n  _getFullDelay() {\n    return this._options.interval ?? e.numberAttr(this._fragment, 'up-interval') ?? up.radio.config.pollInterval\n  }\n\n  _getRemainingDelay() {\n    return Math.max(this._getFullDelay() - this._getFragmentAge(), 0)\n  }\n\n  _getFragmentAge() {\n    return new Date() - this._lastAttempt\n  }\n\n  _isOnFrontLayer() {\n    this.layer ||= up.layer.get(this._fragment)\n    return this.layer?.isFront?.()\n  }\n\n  _reloadNow() {\n    // If we were called manually (not by a timeout), clear a scheeduled timeout to prevent concurrency.\n    // The timeout will be re-scheduled by this._onReloadSuccess() or this._onReloadFailure().\n    this._clearReloadTimer()\n\n    let reloadOptions = {\n      url: this._options.url,\n      fail: false,\n      background: true,\n    }\n\n    let oldAbortable = this._abortable\n\n    try {\n      // Prevent our own reloading from aborting ourselves.\n      this._abortable = false\n\n      // Don't schedule timers while we're loading. _onReloadSuccess() and _onReloadFailure() will do that for us.\n      this._loading = true\n\n      up.reload(this._fragment, reloadOptions).then(\n        this._onReloadSuccess.bind(this),\n        this._onReloadFailure.bind(this)\n      )\n    } finally {\n      // Now that our own render pass has process abort options (this happens sync),\n      // we can resume listening to abort signals.\n      this._abortable = oldAbortable\n    }\n  }\n\n  _onFragmentAborted({ newLayer }) {\n    // We temporarily set this._abortable to false while we're reloading our fragment, which also aborts our fragment.\n    if (this._abortable && !newLayer) {\n      this._stop()\n    }\n  }\n\n  _onReloadSuccess({ fragment }) {\n    this._loading = false\n    this._satisfyInterval()\n\n    if (fragment) {\n      // No need to _scheduleRemainingTime() in this branch:\n      //\n      // (1) Either the new fragment also has an [up-poll] and we have already started in _onPollAttributeObserved().\n      // (2) Or we are force-started and we will start in __onFragmentSwapped().\n      this._onFragmentSwapped(fragment)\n    } else {\n      // The server may have opted to not send an update, e.g. if there is no fresher content.\n      // In that case we try again in the next interval.\n      this._scheduleRemainingTime()\n    }\n  }\n\n  _onFragmentSwapped(newFragment) {\n    this._stop()\n\n    if (this.forceStarted && up.fragment.matches(this._fragment, newFragment)) {\n      // Force start the new up.Polling instance for the new fragment.\n      this.constructor.forFragment(newFragment).forceStart(this._options)\n    }\n  }\n\n  _onReloadFailure(reason) {\n    this._loading = false\n    this._satisfyInterval()\n    this._scheduleRemainingTime()\n    up.error.throwCritical(reason)\n  }\n\n  _satisfyInterval() {\n    // This will delay the next timer scheduling for a full interval.\n    this._lastAttempt = new Date()\n  }\n\n}\n", "const u = up.util\n\nup.FragmentScrolling = class FragmentScrolling extends up.FragmentProcessor {\n\n  keys() {\n    return super.keys().concat([\n      'hash',\n      'mode',\n      'revealTop',\n      'revealMax',\n      'revealSnap',\n      'scrollBehavior',\n    ])\n  }\n\n  processPrimitive(opt) {\n    switch (opt) {\n      case 'reset':\n        // If the user has passed { scroll: 'top' } we scroll to the top all\n        // viewports that are either containing or are contained by element.\n        return this._reset()\n      case 'layer':\n        return this._revealLayer()\n      case 'main':\n        return this._revealSelector(':main')\n      case 'restore':\n        return this._restore()\n      case 'hash':\n        return this.hash && up.viewport.revealHash(this.hash, this.attributes())\n      case 'target':\n      case 'reveal':\n      case true:\n        return this._revealElement(this.fragment)\n      default:\n        if (u.isString(opt)) {\n          return this._revealSelector(opt)\n        }\n    }\n  }\n\n  processElement(element) {\n    return this._revealElement(element)\n  }\n\n  _revealElement(element) {\n    if (element) {\n      up.reveal(element, this.attributes())\n      return true\n    }\n  }\n\n  _revealSelector(selector) {\n    let match = this.findSelector(selector)\n    return this._revealElement(match)\n  }\n\n  _revealLayer() {\n    // Reveal the layer's box instead of the layer's element.\n    // If the layer has its own viewport, like a modal, revealing the box will\n    // scroll the layer viewport. Revealing the layer element would scroll\n    // the main document viewport.\n    return this._revealElement(this.layer.getBoxElement())\n  }\n\n  _reset() {\n    // With { around: undefined }, resetScroll() resets all viewports in { layer }\n    up.viewport.resetScroll({ ...this.attributes(), around: this.fragment })\n    return true\n  }\n\n  _restore() {\n    // With { around: undefined }, restoreScroll() restores all viewports in { layer }\n    return up.viewport.restoreScroll({ ...this.attributes(), around: this.fragment })\n  }\n}\n", "const e = up.element\nconst u = up.util\n\n/*-\nEach layer has an `up.Layer` instance.\n\nMost functions in the `up.layer` package interact with the [current layer](/up.layer.current).\nFor example, `up.layer.dismiss()` is a shortcut for `up.layer.current.dismiss()`.\n\n`up.layer.current` is set to the right layer in compilers and most events,\neven if that layer is not the frontmost layer. E.g. if you're compiling a fragment for a background layer, `up.layer.current` will be\nthe background layer during compilation.\n\n@class up.Layer\n@parent up.layer\n*/\nup.Layer = class Layer extends up.Record {\n\n  /*-\n  This layer's outmost element.\n\n  ### Example\n\n  ```js\n  let rootLayer = up.layer.root\n  let overlay = await up.layer.open()\n\n  rootLayer.element // returns <body>\n  overlay.element   // returns <up-modal>\n  ```\n\n  @property up.Layer#element\n  @param {Element} element\n  @stable\n  */\n\n  /*-\n  Whether fragment updates within this layer can affect browser history and window title.\n\n  If a layer does not have visible history, its desendant layers cannot have history either.\n\n  @property up.Layer#history\n  @param {boolean} history\n  @stable\n  */\n\n  /*-\n  This layer's mode which governs its appearance and behavior.\n\n  @see layer-terminology\n\n  @property up.Layer#mode\n  @param {string} mode\n  @stable\n  */\n\n  /*-\n  This layer's [context](/context).\n\n  ### Example\n\n  You may access the context properties like a regular JavaScript object.\n\n  ```js\n  let layer = up.layer.current\n  layer.context.message = 'Please select a contact'\n  console.log(layer.context) // logs \"{ message: 'Please select a contact' }\"\n  ```\n\n  @property up.Layer#context\n  @param {Object} context\n    The context object.\n\n    If no context has been set an empty object is returned.\n  @experimental\n  */\n\n  keys() {\n    return [\n      'element',\n      'stack',\n      'history',\n      'mode',\n      'context',\n      'lastScrollTops',\n      'lastFocusCapsules',\n    ]\n  }\n\n  defaults() {\n    return {\n      context: {}, // To reset root\n      lastScrollTops: up.viewport.newStateCache(),\n      lastFocusCapsules: up.viewport.newStateCache()\n    }\n  }\n\n  constructor(options = {}) {\n    super(options)\n\n    if (!this.mode) {\n      throw \"missing { mode } option\"\n    }\n  }\n\n  setupHandlers() {\n    up.link.convertClicks(this)\n  }\n\n  teardownHandlers() {}\n    // no-op for overriding\n\n  mainTargets() {\n    return up.layer.mainTargets(this.mode)\n  }\n\n  /*-\n  Synchronizes this layer with the rest of the page.\n\n  For instance, a popup overlay will re-calculate its position arounds its anchoring element.\n\n  You only need to call this method after DOM changes unknown to Unpoly have brought\n  overlays out of alignment with the rest of the page.\n\n  @function up.Layer#sync\n  @experimental\n  */\n  sync() {\n    // no-op so users can blindly sync without knowing the current mode\n  }\n\n  /*-\n  [Closes this overlay](/closing-overlays) with an accepting intent,\n  e.g. when a change was confirmed or when a value was selected.\n\n  To dismiss a layer *without* an accepting intent, use `up.Layer#dismiss()` instead.\n\n  @function up.Layer#accept\n  @param {any} [value]\n    The acceptance value that will be passed to `{ onAccepted }` callbacks.\n\n    If there isn't an acceptance value, omit this argument.\n    If you need to pass options without an acceptance value, pass `null`:\n\n    ```js\n    up.layer.accept(null, { animation: 'move-to-bottom' })\n    ```\n  @param {string} [options.confirm]\n    A message the user needs to confirm before the overlay is closed.\n  @param {up.Response} [options.response]\n    The server response that caused this overlay to close.\n\n    May be left blank if the overlay was not closed in reaction to a server response.\n\n    @experimental\n  @param {string|Function(Element, Object)} [options.animation]\n    The [animation](/up.animate) to use for closing this layer.\n\n    Defaults to the close animation configured for this layer mode.\n  @param {number} [options.duration]\n    The duration for the close animation in milliseconds.\n  @param {number} [options.easing]\n    The [timing function](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function)\n    that controls the acceleration of the close animation.\n  @param {Function} [options.onFinished]\n    A callback that will run when the elements have been removed from the DOM.\n\n    If the layer has a close animation, the callback will run after the animation has finished.\n  @param {number} [options.history=true]\n    Whether to restore the the parent layer's [history state](/updating-history#history-state)\n    in the browser's address bar.\n\n    @experimental\n  @param {boolean} [options.preventable=true]\n    Whether the closing can be prevented by an event listener.\n\n    @internal\n  @return\n  @stable\n  */\n  accept() {\n    throw new up.NotImplemented()\n  }\n\n  /*-\n  [Closes this overlay](/closing-overlays) *without* an accepting intent,\n  e.g. when a \"Cancel\" button was clicked.\n\n  To close an overlay with an accepting intent, use `up.Layer#accept()` instead.\n\n  @function up.Layer#dismiss\n  @param {any} [value]\n    The dismissal value that will be passed to `{ onDismissed }` callbacks.\n\n    If there isn't an acceptance value, omit this argument.\n    If you need to pass options without a dismissal value, pass `null`:\n\n    ```js\n    up.layer.dismiss(null, { animation: 'move-to-bottom' })\n    ```\n  @param {Object} [options]\n    See options for `up.Layer#accept()`.\n  @return\n  @stable\n  */\n  dismiss() {\n    throw new up.NotImplemented()\n  }\n\n  /*-\n  [Dismisses](/up.Layer.prototype.dismiss) all descendant overlays,\n  making this layer the [frontmost layer](/up.layer.front) in the [layer stack](/up.layer.stack).\n\n  Descendant overlays will be dismissed with value `':peel'`.\n\n  @function up.Layer#peel\n  @param {Object} options\n    See options for `up.Layer#accept()`.\n  @stable\n  */\n  peel(options) {\n    this.stack.peel(this, options)\n  }\n\n  evalOption(option) {\n    return u.evalOption(option, this)\n  }\n\n  /*-\n  Returns whether this layer is the [current layer](/up.layer.current).\n\n  @function up.Layer#isCurrent\n  @return {boolean}\n  @stable\n  */\n  isCurrent() {\n    return this.stack.isCurrent(this)\n  }\n\n  /*-\n  Returns whether this layer is the [frontmost layer](/up.layer.front).\n\n  @function up.Layer#isFront\n  @return {boolean}\n  @stable\n  */\n  isFront() {\n    return this.stack.isFront(this)\n  }\n\n  /*-\n  Returns whether this layer is the [root layer](/up.layer.root).\n\n  @function up.Layer#isRoot\n  @return {boolean}\n  @stable\n  */\n  isRoot() {\n    return this.stack.isRoot(this)\n  }\n\n  /*-\n  Returns whether this layer is *not* the [root layer](/up.layer.root).\n\n  @function up.Layer#isOverlay\n  @return {boolean}\n  @stable\n  */\n  isOverlay() {\n    return this.stack.isOverlay(this)\n  }\n\n  /*-\n  Returns whether this layer is still part of the [layer stack](/up.layer.stack).\n\n  A layer is considered \"closed\" immediately after it has been [dismissed](/up.Layer.prototype.dismiss)\n  or [accepted](/up.Layer.prototype.dismiss). If the closing is animated, a layer may be considered \"closed\" while\n  closing animation is still playing.\n\n  @function up.Layer#isOpen\n  @return {boolean}\n  @stable\n  */\n  isOpen() {\n    return this.stack.isOpen(this)\n  }\n\n  /*-\n  Returns whether this layer is no longer part of the [layer stack](/up.layer.stack).\n\n  A layer is considered \"closed\" immediately after it has been [dismissed](/up.Layer.prototype.dismiss)\n  or [accepted](/up.Layer.prototype.dismiss). If the closing is animated, a layer may be considered \"closed\" while\n  closing animation is still playing.\n\n  @function up.Layer#isClosed\n  @return {boolean}\n  @stable\n  */\n  isClosed() {\n    return this.stack.isClosed(this)\n  }\n\n  /*-\n  Returns this layer's parent layer.\n\n  The parent layer is the layer that opened this layer. It is visually in the background of this layer.\n\n  Returns `undefined` for the [root layer](/up.layer.root).\n\n  @property up.Layer#parent\n  @param {up.Layer} parent\n  @stable\n  */\n  get parent() {\n    return this.stack.parentOf(this)\n  }\n\n  /*-\n  Returns this layer's child layer.\n\n  The child layer is the layer that was opened on top of this layer. It visually overlays this layer.\n\n  Returns `undefined` if this layer has not opened a child layer.\n\n  A layer can have at most one child layer. Opening an overlay on a layer with an existing child will\n  first dismiss the existing child before replacing it with the new child.\n\n  @property up.Layer#child\n  @return {up.Layer} child\n  @stable\n  */\n  get child() {\n    return this.stack.childOf(this)\n  }\n\n  /*-\n  Returns an array of this layer's ancestor layers.\n\n  The array elements are ordered by distance to this layer.\n  The first element is this layer's direct parent. The last element\n  is the [root layer](/up.layer.root).\n\n  @property up.Layer#ancestors\n  @return {Array<up.Layer>} ancestors\n  @stable\n  */\n  get ancestors() {\n    return this.stack.ancestorsOf(this)\n  }\n\n  /*-\n  Returns an array of this layer's descendant layers, with the closest descendants listed first.\n\n  Descendant layers are all layers that visually overlay this layer.\n\n  The array elements are ordered by distance to this layer.\n  The first element is this layer's direct child. The last element\n  is the [frontmost layer](/up.layer.front).\n\n  @property up.Layer#descendants\n  @return {Array<up.Layer>} descendants\n  @stable\n  */\n  get descendants() {\n    return this.stack.descendantsOf(this)\n  }\n\n  /*-\n  Returns an array of this layer and its descendant layers, with the closest descendants listed first.\n\n  Descendant layers are all layers that visually overlay this layer.\n\n  The array elements are ordered by distance to this layer.\n  The first element is this layer.\n  The second element is this layer's direct child. The last element\n  is the [frontmost layer](/up.layer.front).\n\n  @property up.Layer#subtree\n  @return {Array<up.Layer>} subtree\n  @experimental\n  */\n  get subtree() {\n    return [this, ...this.descendants]\n  }\n\n  /*-\n  Returns the zero-based position of this layer in the [layer stack](/up.layer.stack).\n\n  The [root layer](/up.layer.root) has an index of `0`, its child overlay has an index of `1`, and so on.\n\n  This property has no defined behavior for [closed](/up.Layer.prototype.isClosed) layers.\n\n  @property up.Layer#index\n  @return {number} index\n  @stable\n  */\n  get index() {\n    return this._index ??= this.stack.indexOf(this)\n  }\n\n  getContentElement() {\n    return this.contentElement || this.element\n  }\n\n  getBoxElement() {\n    return this.boxElement || this.element\n  }\n\n  getFocusElement() {\n    return this.getBoxElement()\n  }\n\n  getFirstSwappableElement() {\n    throw new up.NotImplemented()\n  }\n\n  /*-\n  Returns whether the given `element` is contained by this layer.\n\n  This function will always return `false` for elements in [descendant](/up.Layer.prototype.descendants) overlays,\n  even if the descendant overlay's element is nested into the DOM tree of this layer.\n\n  @function up.Layer#contains\n  @param {Element} element\n  @return {boolean}\n  @stable\n  */\n  contains(element) {\n    // Test that the closest parent is the element and not another layer with elements nested\n    // into this layer's element.\n    return element.closest(up.layer.anySelector()) === this.element\n  }\n\n  /*-\n  Listens to a [DOM event](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events) that originated\n  on an element [contained](/up.Layer.prototype.contains) by this layer.\n\n  This will ignore events emitted on elements in [descendant](/up.Layer.prototype.descendants) overlays,\n  even if the descendant overlay's element is nested into the DOM tree of this layer.\n\n  The arguments for this function are the same as for `up.on()`.\n\n  ### Example\n\n      let rootLayer = up.layer.root\n      let overlay = await up.layer.open()\n\n      rootLayer.on('foo', (event) => console.log('Listener called'))\n\n      rootLayer.emit('foo') // logs \"Listener called\"\n      overlay.emit('foo')   // listener is not called\n\n  ### Most Unpoly events have a layer reference\n\n  Whenever possible Unpoly will emit its events on associated layers instead of `document`.\n  This way you can listen to events on one layer without receiving events from other layers.\n\n  E.g. to listen to all [requests](/up.request) originating from a given layer:\n\n      let rootLayer = up.layer.root\n      let rootLink = rootLayer.affix('a[href=/foo]')\n\n      let overlay = await up.layer.open()\n      let overlayLink = overlay.affix('a[href=/bar]')\n\n      rootLayer.on('up:request:load', (event) => console.log('Listener called'))\n\n      up.follow(rootLink)    // logs \"Listener called\"\n      up.follow(overlayLink) // listener is not called\n\n  @function up.Layer#on\n\n  @param {string} types\n    A space-separated list of event types to bind to.\n\n  @param {string|Function(): string} [selector]\n    The selector of an element on which the event must be triggered.\n\n    Omit the selector to listen to all events of the given type, regardless\n    of the event target.\n\n    If the selector is not known in advance you may also pass a function\n    that returns the selector. The function is evaluated every time\n    an event with the given type is observed.\n\n  @param {boolean} [options.passive=false]\n    Whether to register a [passive event listener](https://developers.google.com/web/updates/2016/06/passive-event-listeners).\n\n    A passive event listener may not call `event.preventDefault()`.\n    This in particular may improve the frame rate when registering\n    `touchstart` and `touchmove` events.\n\n  @param {boolean} [options.once=true]\n    Whether the listener should run at most once.\n\n    If `true` the listener will automatically be unbound\n    after the first invocation.\n\n  @param {Function(event, [element], [data])} listener\n    The listener function that should be called.\n\n    The function takes the observed element as the second argument.\n    The element's [attached data](/data) is passed as a third argument.\n\n  @return {Function()}\n    A function that unbinds the event listeners when called.\n\n  @stable\n  */\n  on(...args) {\n    return this._buildEventListenerGroup(args).bind()\n  }\n\n  /*-\n  Unbinds an event listener previously bound with `up.Layer#on()`.\n\n  @function up.Layer#off\n  @param {string} events\n  @param {string|Function(): string} [selector]\n  @param {Function(event, [element], [data])} listener\n    The listener function to unbind.\n\n    Note that you must pass a reference to the same function reference\n    that was passed to `up.Layer#on()` earlier.\n  @stable\n  */\n  off(...args) {\n    return this._buildEventListenerGroup(args).unbind()\n  }\n\n  _buildEventListenerGroup(args) {\n    return up.EventListenerGroup.fromBindArgs(args, {\n      guard: (event) => this._containsEventTarget(event),\n      elements: [this.element],\n      baseLayer: this\n    })\n  }\n\n  _containsEventTarget(event) {\n    // Since the root layer will receive events emitted on descendant layers\n    // we need to manually check whether the event target is contained\n    // by this layer.\n    return this.contains(event.target)\n  }\n\n  wasHitByMouseEvent(event) {\n    const hittableElement = document.elementFromPoint(event.clientX, event.clientY)\n    return !hittableElement || this.contains(hittableElement)\n  }\n\n  _buildEventEmitter(args) {\n    return up.EventEmitter.fromEmitArgs(args, { layer: this })\n  }\n\n  /*-\n  [Emits](/up.emit) an event on [this layer's element](/up.Layer.prototype.element).\n\n  The value of [up.layer.current](/up.layer.current) will be set to the this layer\n  while event listeners are running.\n\n  ### Example\n\n      let rootLayer = up.layer.root\n      let overlay = await up.layer.open()\n\n      rootLayer.on('foo', (event) => console.log('Listener called'))\n\n      rootLayer.emit('foo') // logs \"Listener called\"\n      overlay.emit('foo')   // listener is not called\n\n  @function up.Layer#emit\n  @param {Element|jQuery} [target=this.element]\n    The element on which the event is triggered.\n\n    If omitted, the event will be emitted on the [this layer's element](/up.Layer.prototype.element).\n  @param {string} eventType\n    The event type, e.g. `my:event`.\n  @param {Object} [props={}]\n    A list of properties to become part of the event object that will be passed to listeners.\n  @param {string|Array} [props.log]\n    A message to print to the [log](/up.log) when the event is emitted.\n\n    Pass `false` to not log this event emission.\n  @param {Element|jQuery} [props.target=this.element]\n    The element on which the event is triggered.\n\n    Alternatively the target element may be passed as the first argument.\n  @stable\n  */\n  emit(...args) {\n    return this._buildEventEmitter(args).emit()\n  }\n\n  isDetached() {\n    return !this.element.isConnected\n  }\n\n  saveHistory() {\n    if (this.history) {\n      this.savedTitle = document.title\n      this.savedMetaTags = up.history.findMetaTags()\n      this.savedLocation = up.history.location\n    }\n  }\n\n  restoreHistory() {\n    if (!this.showsLiveHistory()) {\n      return\n    }\n\n    // We may not have a #savedLocation when we were opened from a HTML string instead of a URL.\n    if (this.savedLocation) {\n      // We cannot use the `this.title` setter as that does not\n      // push a state if `newLocation === this.savedLocation`.\n      up.history.push(this.savedLocation)\n    }\n\n    if (this.savedTitle) {\n      document.title = this.savedTitle\n    }\n\n    if (this.savedMetaTags) {\n      up.history.updateMetaTags(this.savedMetaTags)\n    }\n  }\n\n  /*-\n  Temporarily changes the [current layer](/up.layer.current) while the given\n  function is running.\n\n  Calls the given function and restores the original current layer when the function\n  terminates.\n\n  @param {Function()} fn\n    The synchronous function to call.\n\n    Async functions are not supported.\n  @function up.Layer#asCurrent\n  @experimental\n  */\n  asCurrent(fn) {\n    return this.stack.asCurrent(this, fn)\n  }\n\n  updateHistory(options) {\n    // Set unless { location: false }\n    if (u.isString(options.location)) {\n      this.location = options.location\n    }\n\n    // Set unless { metaTags: false }\n    if (up.history.config.updateMetaTags && u.isList(options.metaTags)) {\n      up.migrate?.warnOfHungryMetaTags?.(options.metaTags)\n      this.metaTags = options.metaTags\n    }\n\n    // Set unless { title: false }\n    if (u.isString(options.title)) {\n      this.title = options.title\n    }\n  }\n\n  showsLiveHistory() {\n    return this.history && this.isFront() // && (up.history.config.enabled || this.isRoot())\n  }\n\n  /*-\n  This layer's window title.\n\n  If the [frontmost layer](/up.layer.front) does not have [visible history](/up.Layer.prototype.history),\n  the browser window will show the title of an ancestor layer.\n  This property will return the title the layer would use if it had visible history.\n\n  If this layer does not [affect browser history](/up.Layer.prototype.history), this property will\n  still return the title the layer would otherwise use.\n\n  When this layer opens a child layer with visible history, the browser window will change to the child\n  layer's title. When the child layer is closed, this layer's title will be restored.\n\n  @property up.Layer#title\n  @param {string} title\n  @experimental\n  */\n  get title() {\n    if (this.showsLiveHistory()) {\n      // Allow Unpoly-unaware code to set the document title directly.\n      // This will implicitey change the front layer's title.\n      return document.title\n    } else {\n      return this.savedTitle\n    }\n  }\n\n  set title(title) {\n    this.savedTitle = title\n\n    if (this.showsLiveHistory()) {\n      document.title = title\n    }\n  }\n\n  get metaTags() {\n    if (this.showsLiveHistory()) {\n      return up.history.findMetaTags()\n    } else {\n      return this.savedMetaTags\n    }\n  }\n\n  set metaTags(metaTags) {\n    this.savedMetaTags = metaTags\n\n    if (this.showsLiveHistory()) {\n      up.history.updateMetaTags(metaTags)\n    }\n  }\n\n  /*-\n  This layer's location URL.\n\n  If the layer has [no visible history](/up.Layer.prototype.history), this property\n  still returns the URL of the content in the overlay. In this case\n  the browser's address bar will show the location of an ancestor layer.\n\n  When this layer opens a child layer with visible history, the browser URL will change to the child\n  layer's location. When the child layer is closed, this layer's location will be restored.\n\n  @property up.Layer#location\n  @param {string} location\n  @experimental\n  */\n  get location() {\n    if (this.showsLiveHistory()) {\n      // Allow Unpoly-unaware code to use the pushState API directly.\n      // This will implicitly change the front layer's location.\n      return up.history.location\n    } else {\n      return this.savedLocation\n    }\n  }\n\n  set location(location) {\n    const previousLocation = this.location\n    location = up.history.normalizeURL(location)\n\n    // When opening, we always need to store the location to have an initial value.\n    if (previousLocation !== location || this.opening) {\n      this.savedLocation = location\n\n      if (this.showsLiveHistory()) {\n        up.history.push(location)\n      }\n\n      // When opening we never emit up:layer:location:changed.\n      if (!this.opening) {\n        this.emit('up:layer:location:changed', { location })\n      }\n    }\n  }\n\n  selector(part) {\n    return this.constructor.selector(part)\n  }\n\n  static selector(_part) {\n    throw new up.NotImplemented()\n  }\n\n  toString() {\n    throw new up.NotImplemented()\n  }\n\n  /*-\n  Creates an element with the given `selector` and appends it to this layer's\n  [outmost element](/up.Layer.prototype.element).\n\n  Also see `up.element.affix()`.\n\n  ### Example\n\n  ```js\n  layer = up.layer.open()\n  element = layer.affix(.klass')\n  element.parentElement // returns 'main'\n  element.className // returns 'klass'\n  ```\n\n  @function up.Layer#affix\n  @param {string} selector\n    The CSS selector from which to create an element.\n  @param {Object} attrs\n    An object of attributes to set on the created element.\n  @param {Object} attrs.text\n    The [text content](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent) of the created element.\n  @param {Object} attrs.style\n    An object of CSS properties that will be set as the inline style\n    of the created element.\n\n    The given object may use kebab-case or camelCase keys.\n  @experimental\n  */\n  affix(...args) {\n    return e.affix(this.getFirstSwappableElement(), ...args)\n  }\n\n  [u.isEqual.key](other) {\n    return (this.constructor === other.constructor) && (this.element === other.element)\n  }\n\n  hasFocus() {\n    let focusedElement = document.activeElement\n    return focusedElement !== document.body && this.element.contains(focusedElement)\n  }\n\n  reset() {\n    // Re-assigning defaults will also reset context as well as\n    // caches for scroll positions and focus.\n    Object.assign(this, this.defaults())\n  }\n\n}\n\n", "const e = up.element\nconst u = up.util\n\n/*-\n@class up.Layer\n*/\nup.Layer.Overlay = class Overlay extends up.Layer {\n\n  /*-\n  The link or form element that opened this overlay.\n\n  @property up.Layer#origin\n  @param {Element} origin\n  @stable\n  */\n\n  /*-\n  The [size](/customizing-overlays#overlay-sizes) of this overlay.\n\n  Returns a string like `'medium'` or `'large'`.\n\n  @property up.Layer#size\n  @param {Element} size\n  @stable\n  */\n\n  /*-\n  The [position](/customizing-overlays#popup-position) of this popup overlay.\n\n  Returns a string like `'top'` or `'left'`.\n\n  @property up.Layer#position\n  @param {Element} position\n  @stable\n  */\n\n  /*-\n  The [alignment](/customizing-overlays#popup-position) of this popup overlay.\n\n  Returns a string like `'left'` or `'right'`.\n\n  @property up.Layer#align\n  @param {Element} align\n  @stable\n  */\n\n  keys() {\n    return super.keys().concat([\n      'position',\n      'align',\n      'size',\n      'origin', // for tethered anchor element\n      'class',\n      'backdrop',\n      'openAnimation',\n      'closeAnimation',\n      'openDuration',\n      'closeDuration',\n      'openEasing',\n      'closeEasing',\n      'backdropOpenAnimation',\n      'backdropCloseAnimation',\n      'dismissable',\n      'dismissLabel',\n      'dismissAriaLabel',\n      'onOpened',\n      'onAccept',\n      'onAccepted',\n      'onDismiss',\n      'onDismissed',\n      'acceptEvent',\n      'dismissEvent',\n      'acceptLocation',\n      'dismissLocation',\n      'opening' // internal flag to know that the layer is being opened\n    ])\n  }\n\n  constructor(options) {\n    super(options)\n\n    if (this.dismissable === true) {\n      this.dismissable = ['button', 'key', 'outside']\n    } else if (this.dismissable === false) {\n      this.dismissable = []\n    } else {\n      this.dismissable = u.parseTokens(this.dismissable)\n    }\n\n    if (this.acceptLocation) {\n      this.acceptLocation = new up.URLPattern(this.acceptLocation)\n    }\n\n    if (this.dismissLocation) {\n      this.dismissLocation = new up.URLPattern(this.dismissLocation)\n    }\n  }\n\n  callback(name) {\n    // Only binds the callback to the layer instance.\n    // Note if the callback was created by an UJS attribute like [up-on-accepted], the\n    // callback is already bound to the origin element to mimic the behavior of built-in\n    // handler attributes like [onclick]. In that case our additional bind() will have\n    // no effect.\n    //\n    // The up.layer.current value within a callback is controlled by the event\n    // emission in up.Change.OpenLayer and up.Change.CloseLayer\n    let fn = this[name]\n    if (fn) {\n      return fn.bind(this)\n    }\n  }\n\n  createElement(parentElement) {\n    this.nesting ||= this._suggestVisualNesting()\n    const elementAttrs = u.compactObject(u.pick(this, ['align', 'position', 'size', 'class', 'nesting']))\n    this.element = this.affixPart(parentElement, null, elementAttrs)\n  }\n\n  createBackdropElement(parentElement) {\n    this.backdropElement = this.affixPart(parentElement, 'backdrop')\n  }\n\n  createViewportElement(parentElement) {\n    // Give the viewport element an [up-viewport] attribute so it will be found\n    // by up.viewport.get().\n    this.viewportElement = this.affixPart(parentElement, 'viewport', {'up-viewport': ''})\n  }\n\n  createBoxElement(parentElement) {\n    this.boxElement = this.affixPart(parentElement, 'box')\n  }\n\n  createContentElement(parentElement) {\n    this.contentElement = this.affixPart(parentElement, 'content')\n  }\n\n  setContent(content) {\n    this.contentElement.append(content)\n    this.onContentSet()\n  }\n\n  // Optional callback used by sub-classes\n  onContentSet() {\n  }\n\n  createDismissElement(parentElement) {\n    this.dismissElement = this.affixPart(parentElement, 'dismiss', {\n      'up-dismiss': '\":button\"', // value must be JSON\n      'aria-label': this.dismissAriaLabel\n    })\n    // Since the dismiss button already has an accessible [aria-label]\n    // we hide the \"X\" label from screen readers.\n    return e.affix(this.dismissElement, 'span[aria-hidden=\"true\"]', { text: this.dismissLabel })\n  }\n\n  affixPart(parentElement, part, options = {}) {\n    return e.affix(parentElement, this.selector(part), options)\n  }\n\n  static selector(part) {\n    return u.compact(['up', this.mode, part]).join('-')\n  }\n\n  _suggestVisualNesting() {\n    const { parent } = this\n    if (this.mode === parent.mode) {\n      return 1 + parent._suggestVisualNesting()\n    } else {\n      return 0\n    }\n  }\n\n  setupHandlers() {\n    super.setupHandlers()\n\n    this.overlayFocus = new up.OverlayFocus(this)\n\n    if (this._supportsDismissMethod('button')) {\n      this.createDismissElement(this.getBoxElement())\n    }\n\n    if (this._supportsDismissMethod('outside')) {\n      // If this overlay has its own viewport, a click outside the frame will hit\n      // the viewport and not the parent element.\n      if (this.viewportElement) {\n        up.on(this.viewportElement, 'up:click', event => {\n          // Don't react when a click into the overlay frame bubbles to the viewportElement\n          if (event.target === this.viewportElement) {\n            this._onOutsideClicked(event, true)\n          }\n        })\n      } else {\n        // Only bind to the parent if there's not already a viewport.\n        // This prevents issues with other overlay libs appending elements to document.body,\n        // but overlaying this overlay with a huge z-index. Clicking such a foreign overlay\n        // would close this layer, as Unpoly considers it to be on the root layer (our parent).2\n        this.unbindParentClicked = this.parent.on('up:click', (event, element) => {\n          if (!up.layer.isWithinForeignOverlay(element)) {\n            // When our origin is clicked again, halt the click event\n            // We achieve this by halting the click event.\n            const originClicked = this.origin && this.origin.contains(element)\n            this._onOutsideClicked(event, originClicked)\n          }\n        })\n      }\n    }\n\n    if (this._supportsDismissMethod('key')) {\n      this.unbindEscapePressed = up.event.onEscape(event => this.onEscapePressed(event))\n    }\n\n    // <a up-accept=\"value\">OK</a>\n    this.registerClickCloser('up-accept', (value, closeOptions) => {\n      this.accept(value, closeOptions)\n    })\n\n    // <a up-dismiss=\"value\">Cancel</a>\n    this.registerClickCloser('up-dismiss', (value, closeOptions) => {\n      this.dismiss(value, closeOptions)\n    })\n\n    up.migrate.registerLayerCloser?.(this)\n\n    // let { userId } = await up.layer.open({ acceptEvent: 'user:show' })\n    // _registerEventCloser() will fill in this and arguments.\n    this._registerEventCloser(this.acceptEvent, this.accept)\n    this._registerEventCloser(this.dismissEvent, this.dismiss)\n\n    this.on('up:click', 'label[for]', (event, label) => this._onLabelClicked(event, label))\n  }\n\n  _onLabelClicked(event, label) {\n    // We do our own focus logic when the user clicks an label[for].\n    // If an input with the same [id] is on an ancestor layer the browser would\n    // focus that (even though label and input are in different forms).\n    // The browser always focuses the first input matching the ID from [for].\n    let id = label.getAttribute('for')\n    let fieldSelector = up.form.fieldSelector(e.idSelector(id))\n\n    let fieldsAnywhere = up.fragment.all(fieldSelector, { layer: 'any' })\n    let fieldsInLayer = up.fragment.all(fieldSelector, { layer: this })\n\n    // We would much rather not interfere with label clicking logic,\n    // and let the browser do its thing. Hence we only interfere if there\n    // are multiple matching inputs, and the first one is not in this layer.\n    if (fieldsAnywhere.length > 1 && fieldsInLayer[0] !== fieldsAnywhere[0]) {\n      event.preventDefault()\n\n      const field = fieldsInLayer[0]\n\n      field.focus()\n\n      if (field.matches('input[type=checkbox], input[type=radio]')) {\n        field.click()\n      }\n    }\n  }\n\n  _onOutsideClicked(event, halt) {\n    up.log.putsEvent(event)\n    if (halt) up.event.halt(event)\n    this.dismiss(':outside', { origin: event.target })\n  }\n\n  onEscapePressed(event) {\n    // All overlays listen to the Escape key being pressed, but only the front layer\n    // should react. Note that we're using the *front* layer, not the *current* layer.\n    // The current layer might be in the visual background, e.g. if a fragment is being\n    // compiled in a background layer.\n    if (this.isFront()) {\n      let field = up.form.focusedField()\n      if (field) {\n        // Allow screen reader users to get back to a state where they can dismiss the\n        // modal with escape.\n        field.blur()\n      } else if (this._supportsDismissMethod('key')) {\n        up.event.halt(event, { log: true })\n        this.dismiss(':key')\n      }\n    }\n  }\n\n  registerClickCloser(attribute, closeFn) {\n    let selector = `[${attribute}]`\n    // Allow the fallbacks to be both vanilla links and Unpoly [up-target] links\n    this.on('up:click', selector, function(event) {\n      // Since we're defining this handler on up.Overlay, we will not prevent\n      // a link from being followed on the root layer.\n      up.event.halt(event, { log: true })\n\n      const origin = event.target.closest(selector)\n      const value = e.jsonAttr(origin, attribute)\n      const closeOptions = { origin }\n      const parser = new up.OptionsParser(origin, closeOptions)\n      parser.booleanOrString('animation')\n      parser.string('easing')\n      parser.number('duration')\n      parser.string('confirm')\n\n      up.error.muteUncriticalSync(() => closeFn(value, closeOptions))\n    })\n  }\n\n  _registerEventCloser(eventTypes, closeFn) {\n    if (!eventTypes) { return }\n    return this.on(eventTypes, event => {\n      event.preventDefault()\n      closeFn.call(this, event, { response: event.response })\n    })\n  }\n\n  tryAcceptForLocation(options) {\n    this._tryCloseForLocation(this.acceptLocation, this.accept, options)\n  }\n\n  tryDismissForLocation(options) {\n    this._tryCloseForLocation(this.dismissLocation, this.dismiss, options)\n  }\n\n  _tryCloseForLocation(urlPattern, closeFn, options) {\n    let location, resolution\n    if (urlPattern && (location = this.location) && (resolution = urlPattern.recognize(location))) {\n      // resolution now contains named capture groups, e.g. when\n      // '/decks/:deckId/cards/:cardId' is matched against\n      // '/decks/123/cards/456' resolution is { deckId: 123, cardId: 456 }.\n      const closeValue = { ...resolution, location }\n      closeFn.call(this, closeValue, options)\n    }\n  }\n\n  teardownHandlers() {\n    super.teardownHandlers()\n    this.unbindParentClicked?.()\n    this.unbindEscapePressed?.()\n    this.overlayFocus.teardown()\n  }\n\n  /*-\n  Destroys the elements that make up this overlay.\n\n  @function up.Layer.prototype.destroyElements\n  @param {string|Function(Element, Object)} [options.animation=this.closeAnimation]\n  @param {number} [options.duration=this.closeDuration]\n  @param {string} [options.easing=this.closeEasing]\n  @param {Function} [options.onFinished]\n    A callback that will run when the elements have been removed from the DOM.\n    If the destruction is animated, the callback will run after the animation has finished.\n  @return {Promise}\n    A resolved promise.\n  @internal\n  */\n  destroyElements(options) {\n    const animation = () => this.startCloseAnimation(options)\n\n    const onFinished = () => {\n      this.onElementsRemoved() // callback for layer implementations that need to clean up\n      options.onFinished?.() // callback for callers of up.layer.dismiss/accept()\n    }\n\n    // Do not re-use `options`, or we would call startCloseAnimation(animation: startCloseAnimation)!\n    const destroyOptions = { ...options, animation, onFinished, log: false }\n    up.destroy(this.element, destroyOptions)\n  }\n\n  // Optional callback used by sub-classes\n  onElementsRemoved() {\n  }\n\n  _startAnimation(options = {}) {\n    const boxDone = up.animate(this.getBoxElement(), options.boxAnimation, options)\n\n    // If we don't animate the box, we don't animate the backdrop\n    let backdropDone\n    if (this.backdrop && !up.motion.isNone(options.boxAnimation)) {\n      backdropDone = up.animate(this.backdropElement, options.backdropAnimation, options)\n    }\n\n    // Promise.all() ignores non-Thenables in the given array\n    return Promise.all([boxDone, backdropDone])\n  }\n\n  async startOpenAnimation(options = {}) {\n    await this._startAnimation({\n      boxAnimation: options.animation ?? this.evalOption(this.openAnimation),\n      backdropAnimation: 'fade-in',\n      easing: options.easing || this.openEasing,\n      duration: options.duration || this.openDuration\n    })\n    this.wasEverVisible = true\n  }\n\n  startCloseAnimation(options = {}) {\n    return this._startAnimation({\n      boxAnimation: this.wasEverVisible && (options.animation ?? this.evalOption(this.closeAnimation)),\n      backdropAnimation: this.wasEverVisible && 'fade-out',\n      easing: options.easing || this.closeEasing,\n      duration: options.duration || this.closeDuration\n    })\n  }\n\n  accept(value = null, options = {}) {\n    return this._executeCloseChange('accept', value, options)\n  }\n\n  dismiss(value = null, options = {}) {\n    return this._executeCloseChange('dismiss', value, options)\n  }\n\n  _supportsDismissMethod(method) {\n    return u.contains(this.dismissable, method)\n  }\n\n  _executeCloseChange(verb, value, options) {\n    options = { ...options, verb, value, layer: this }\n    return new up.Change.CloseLayer(options).execute()\n  }\n\n  getFirstSwappableElement() {\n    return this.getContentElement().children[0]\n  }\n\n  toString() {\n    return `${this.mode} overlay`\n  }\n}\n", "up.Layer.OverlayWithTether = class OverlayWithTether extends up.Layer.Overlay {\n\n  createElements() {\n    if (!this.origin) {\n      up.fail('Missing { origin } option')\n    }\n\n    // We first construct an un-started Tether object so we can\n    // ask for its parent element.\n    this._tether = new up.Tether({\n      anchor: this.origin,\n      align: this.align,\n      position: this.position\n    })\n    this.createElement(this._tether.parent)\n    this.createContentElement(this.element)\n  }\n\n  onContentSet() {\n    this._tether.start(this.element)\n  }\n\n  onElementsRemoved() {\n    this._tether.stop()\n  }\n\n  sync() {\n    // In case some async code calls #sync() on a layer that was already closed,\n    // don't run the code below that might re-attach the overlay.\n    if (this.isOpen()) {\n\n      if (this.isDetached() || this._tether.isDetached()) {\n        // If our tether parent and anchor is gone, the best thing we can\n        // do now is to dismiss ourselves and have a consistent layer stack.\n        this.dismiss(\n          ':detached', {      // custom dismiss value so listeners can distinguish from other dismissals\n          animation: false,   // no need to animate since we're already hidden\n          preventable: false  // since we're cleaning up a broken stack, don't allow user intervention\n        })\n      } else {\n        // The fragment update might have moved elements around.\n        // This is a good moment to sync our position relative to the anchor.\n        this._tether.sync()\n      }\n    }\n  }\n}\n", "up.Layer.OverlayWithViewport = class OverlayWithViewport extends up.Layer.Overlay {\n\n  // For stubbing in tests\n  static getParentElement() {\n    // Always make a fresh lookup of the <body>, since the <body>\n    // might be swapped out with a new element.\n    return document.body\n  }\n\n  /*-\n  @function up.Layer.OverlayWithViewport#openNow\n  @internal\n  */\n  createElements() {\n    up.viewport.bodyShifter.raiseStack()\n    this.createElement(this.constructor.getParentElement())\n    if (this.backdrop) { this.createBackdropElement(this.element) }\n    this.createViewportElement(this.element)\n    this.createBoxElement(this.viewportElement)\n    this.createContentElement(this.boxElement)\n  }\n\n  onElementsRemoved() {\n    up.viewport.bodyShifter.lowerStack()\n  }\n\n  sync() {\n    // A swapping of <body> might have removed this overlay from the DOM, so we\n    // attach it again.\n    //\n    // We also check #isOpen() in case some async code calls #sync() on a layer\n    // that was already closed. In that case don't run the code below that might\n    // re-attach the overlay.\n    if (this.isDetached() && this.isOpen()) {\n      this.constructor.getParentElement().appendChild(this.element)\n    }\n  }\n}\n", "const e = up.element\n\nup.Layer.Root = class Root extends up.Layer {\n\n  static mode = 'root'\n\n  get element() {\n    // Let's talk about our choice of @element for the root layer.\n    //\n    // 1. We don't want to use `document`, since that is for our global event bus.\n    //    For instance, take a look how up.Change.CloseLayer emits the up:layer:dismiss\n    //    event first on `@layer.element`, then on `document`.\n    //    Also `document` is not really an element, just an event target.\n    // 2. We might want but cannot use <body> element. Since Unpoly boots before\n    //    the DOM is ready, document.body is still undefined. We also cannot delay\n    //    booting until the DOM is ready, since by then all user-defined event listeners\n    //    and compilers will have registered.\n    // 3. That leaves the <html> element, which is available before the DOM is ready\n    //    on Chrome, Firefox, IE11, Safari.\n    // 4. A nice benefit of using <html> is that up.fragment.get('html', layer: 'root')\n    //    will yield a result.\n    // 5. Also it's nice that elements in the <head> also belong to the root layer.\n    //    Otherwise they would not belong to any layer.\n    //\n    // We always return the current <html> instead of caching it,\n    // since the developer might replace it with a new version.\n    return e.root\n  }\n\n  constructor(options) {\n    super(options)\n    this.setupHandlers()\n  }\n\n  getFirstSwappableElement() {\n    return document.body\n  }\n\n  static selector() {\n    return 'html'\n  }\n\n  setupHandlers() {\n    // When we reset the framework during tests, we might re-initialize this\n    // layer with the same <html> element. In this case we do not want to\n    // setup handlers more than once.\n    if (!this.element.upHandlersApplied) {\n      this.element.upHandlersApplied = true\n      super.setupHandlers()\n    }\n  }\n\n  sync() {\n    // In case a fragment update has swapped the <html> element we need to re-apply\n    // event handlers to the new <html> element.\n    this.setupHandlers()\n  }\n\n  accept() {\n    this._cannotCloseRoot()\n  }\n\n  dismiss() {\n    this._cannotCloseRoot()\n  }\n\n  _cannotCloseRoot() {\n    up.fail('Cannot close the root layer')\n  }\n\n  toString() {\n    return \"root layer\"\n  }\n}\n", "up.Layer.Modal = class Modal extends up.Layer.OverlayWithViewport {\n  static mode = 'modal'\n}\n", "up.Layer.Popup = class Popup extends up.Layer.OverlayWithTether {\n  static mode = 'popup'\n}\n", "up.Layer.Drawer = class Drawer extends up.Layer.OverlayWithViewport {\n  static mode = 'drawer'\n}\n", "up.Layer.Cover = class Cover extends up.Layer.OverlayWithViewport {\n  static mode = 'cover'\n}\n", "const u = up.util\nconst e = up.element\n\nup.LayerLookup = class LayerLookup {\n\n  constructor(stack, ...args) {\n    this._stack = stack\n    const options = u.parseArgIntoOptions(args, 'layer')\n\n    // Options normalization might change `options` relevant to the lookup:\n    // (1) It will default { layer } to 'origin' if an { origin } element is given.\n    // (2) It will also lookup a string { baseLayer }.\n    // (3) It will set the default layer to 'current' if nothing matches.\n    if (options.normalizeLayerOptions !== false) {\n      up.layer.normalizeOptions(options)\n    }\n\n    this._values = u.parseTokens(options.layer)\n\n    this._origin = options.origin\n    this._baseLayer = options.baseLayer || this._originLayer() || this._stack.current\n\n    if (u.isString(this._baseLayer)) {\n      // The { baseLayer } option may itself be a string like \"parent\".\n      // In this case we look it up using a new up.LayerLookup instance, using\n      // up.layer.current as the { baseLayer } for that second lookup.\n      const recursiveOptions = { ...options, baseLayer: this._stack.current, normalizeLayerOptions: false }\n      this._baseLayer = new this.constructor(this._stack, this._baseLayer, recursiveOptions).first()\n    }\n  }\n\n  _originLayer() {\n    if (this._origin) {\n      return this._forElement(this._origin)\n    }\n  }\n\n  first() {\n    return this.all()[0]\n  }\n\n  all() {\n    let results = u.flatMap(this._values, value => this._resolveValue(value))\n    results = u.compact(results)\n    results = u.uniq(results)\n    return results\n  }\n\n  _forElement(element) {\n    element = e.get(element) // unwrap jQuery\n    return u.find(this._stack.reversed(), layer => layer.contains(element))\n  }\n\n  _forIndex(value) {\n    return this._stack.at(value)\n  }\n\n  _resolveValue(value) {\n    if (value instanceof up.Layer) {\n      return value\n    }\n\n    if (u.isNumber(value)) {\n      return this._forIndex(value)\n    }\n\n    if (/^\\d+$/.test(value)) {\n      return this._forIndex(Number(value))\n    }\n\n    if (u.isElementish(value)) {\n      return this._forElement(value)\n    }\n\n    switch (value) {\n      case 'any':\n        // Return all layers, but prefer a layer that's either the current\n        // layer, or closer to the front.\n        return [this._baseLayer, ...this._stack.reversed()]\n      case 'current':\n        return this._baseLayer\n      case 'closest':\n        return this._stack.selfAndAncestorsOf(this._baseLayer)\n      case 'parent':\n        return this._baseLayer.parent\n      case 'ancestor':\n      case 'ancestors':\n        return this._baseLayer.ancestors\n      case 'child':\n        return this._baseLayer.child\n      case 'descendant':\n      case 'descendants':\n        return this._baseLayer.descendants\n      case 'subtree':\n        return this._baseLayer.subtree\n      case 'new':\n        return 'new' // pass-through\n      case 'root':\n        return this._stack.root\n      case 'overlay':\n      case 'overlays':\n        return u.reverse(this._stack.overlays)\n      case 'front':\n        return this._stack.front\n      case 'origin':\n        return this._originLayer()\n      default:\n        return up.fail(\"Unknown { layer } option: %o\", value)\n    }\n  }\n}\n", "const u = up.util\n\nup.LayerStack = class LayerStack {\n\n  constructor() {\n    this._currentOverrides = []\n    this.layers = [this._buildRoot()]\n  }\n\n  _buildRoot() {\n    return up.layer.build({ mode: 'root', stack: this })\n  }\n\n  remove(layer) {\n    u.remove(this.layers, layer)\n  }\n\n  peel(layer, options) {\n    // We will dismiss descendants closer to the front first to prevent\n    // recursive calls of peel().\n    const descendants = u.reverse(layer.descendants)\n\n    // Callers expect the effects of peel() to manipulate the layer stack sync.\n    // Because of this we will dismiss alle descendants sync rather than waiting\n    // for each descendant to finish its closing animation.\n    const dismissOptions = { ...options, preventable: false }\n\n    for (let descendant of descendants) {\n      descendant.dismiss(':peel', dismissOptions)\n    }\n  }\n\n  reset() {\n    this.peel(this.root, {animation: false})\n    this._currentOverrides = []\n    this.root.reset()\n  }\n\n  isOpen(layer) {\n    return u.contains(this.layers, layer)\n  }\n\n  isClosed(layer) {\n    return !this.isOpen(layer)\n  }\n\n  parentOf(layer) {\n    return this.layers[layer.index - 1]\n  }\n\n  childOf(layer) {\n    return this.layers[layer.index + 1]\n  }\n\n  ancestorsOf(layer) {\n    // Return closest ancestors first\n    return u.reverse(this.layers.slice(0, layer.index))\n  }\n\n  selfAndAncestorsOf(layer) {\n    // Order for layer.closest()\n    return [layer, ...layer.ancestors]\n  }\n\n  descendantsOf(layer) {\n    return this.layers.slice(layer.index + 1)\n  }\n\n  isRoot(layer) {\n    return this.root === layer\n  }\n\n  isOverlay(layer) {\n    return this.root !== layer\n  }\n\n  isCurrent(layer) {\n    return this.current === layer\n  }\n\n  isFront(layer) {\n    return this.front === layer\n  }\n\n  get(...args) {\n    return this.getAll(...args)[0]\n  }\n\n  getAll(...args) {\n    return new up.LayerLookup(this, ...args).all()\n  }\n\n  sync() {\n    for (let layer of this.layers) {\n      layer.sync()\n    }\n  }\n\n  asCurrent(layer, fn) {\n    try {\n      this._currentOverrides.push(layer)\n      return fn()\n    } finally {\n      this._currentOverrides.pop()\n    }\n  }\n\n  reversed() {\n    return u.reverse(this.layers)\n  }\n\n  dismissOverlays(value = null, options = {}) {\n    options.dismissable = false\n    for (let overlay of u.reverse(this.overlays)) {\n      overlay.dismiss(value, options)\n    }\n  }\n\n  at(index) {\n    return this.layers[index]\n  }\n\n  indexOf(layer) {\n    return this.layers.indexOf(layer)\n  }\n\n  get count() {\n    return this.layers.length\n  }\n\n  get root() {\n    return this.layers[0]\n  }\n\n  get overlays() {\n    return this.root.descendants\n  }\n\n  get current() {\n    // Event listeners and compilers will push into @currentOverrides\n    // to temporarily set up.layer.current to the layer they operate in.\n    return u.last(this._currentOverrides) || this.front\n  }\n\n  get front() {\n    return u.last(this.layers)\n  }\n\n}\n", "up.LinkFeedbackURLs = class LinkFeedbackURLs {\n\n  constructor(link) {\n    const normalize = up.feedback.normalizeURL\n\n    // A link with an unsafe method will never be higlighted with .up-current.\n    this._isSafe = up.link.isSafe(link)\n\n    if (this._isSafe) {\n      const href = link.getAttribute('href')\n      if (href && (href !== '#')) {\n        this.href = normalize(href)\n      }\n\n      const upHREF = link.getAttribute('up-href')\n      if (upHREF) {\n        this._upHREF = normalize(upHREF)\n      }\n\n      const alias = link.getAttribute('up-alias')\n      if (alias) {\n        this._aliasPattern = new up.URLPattern(alias, normalize)\n      }\n    }\n  }\n\n  isCurrent(normalizedLocation) {\n    // It is important to return false instead of a falsey value.\n    // up.feedback feeds the return value to element.classList.toggle(),\n    // which would use a default for undefined.\n    return this._isSafe && !!(\n      this.href === normalizedLocation ||\n      this._upHREF === normalizedLocation ||\n      this._aliasPattern?.test?.(normalizedLocation, false)\n    )\n  }\n}\n", "const u = up.util\nconst e = up.element\n\nup.LinkPreloader = class LinkPreloader {\n\n  watchLink(link) {\n    // If the link has an unsafe method (like POST) and is hence not preloadable,\n    // prevent up.link.preload() from blowing up by not observing the link (even if\n    // the user uses [up-preload] everywhere).\n    if (!up.link.preloadIssue(link)) {\n      this._on(link, 'mouseenter',           (event) => this._considerPreload(event, true))\n      this._on(link, 'mousedown touchstart', (event) => this._considerPreload(event))\n      this._on(link, 'mouseleave',           (event) => this._stopPreload(event))\n    }\n  }\n\n  _on(link, eventTypes, callback) {\n    up.on(link, eventTypes, { passive: true }, callback)\n  }\n\n  _considerPreload(event, applyDelay) {\n    const link = event.target\n    if (link !== this._currentLink) {\n      this.reset()\n\n      this._currentLink = link\n\n      // Don't preload when the user is holding down CTRL or SHIFT.\n      if (up.link.shouldFollowEvent(event, link)) {\n        if (applyDelay) {\n          this._preloadAfterDelay(event, link)\n        } else {\n          this._preloadNow(event, link)\n        }\n      }\n    }\n  }\n\n  _stopPreload(event) {\n    if (event.target === this._currentLink) {\n      return this.reset()\n    }\n  }\n\n  reset() {\n    if (!this._currentLink) { return }\n\n    clearTimeout(this._timer)\n\n    // Only abort if the request is still preloading.\n    // If the user has clicked on the link while the request was in flight,\n    // and then unhovered the link, we do not abort the navigation.\n    if (this._currentRequest?.background) {\n      this._currentRequest.abort()\n    }\n\n    this._currentLink = undefined\n    this._currentRequest = undefined\n  }\n\n  _preloadAfterDelay(event, link) {\n    const delay = e.numberAttr(link, 'up-preload-delay') ?? up.link.config.preloadDelay\n    this._timer = u.timer(delay, () => this._preloadNow(event, link))\n  }\n\n  _preloadNow(event, link) {\n    // Don't preload if the link was removed from the DOM while we were waiting for the timer.\n    if (!link.isConnected) {\n      this.reset()\n      return\n    }\n\n    const onQueued = request => { return this._currentRequest = request }\n    up.log.putsEvent(event)\n\n    // Here we really need { onQueued }, not something like { onProcessed }\n    up.error.muteUncriticalRejection(up.link.preload(link, { onQueued }))\n  }\n}\n", "const u = up.util\nconst e = up.element\n\nup.MotionController = class MotionController {\n\n  constructor(name) {\n    this._activeClass = `up-${name}`\n    this._selector = `.${this._activeClass}`\n    this.finishEvent = `up:${name}:finish`\n\n    // Track the number of finish() calls for testing\n    this.finishCount = 0\n\n    // Track the number of active clusters. If no clusters are active, we can early return in finish().\n    this._clusterCount = 0\n  }\n\n  /*-\n  Finishes all animations in the given elements' ancestors and\n  descendants, then calls the given function.\n\n  The function is expected to return a promise that is fulfilled when\n  the animation ends. The function is also expected to listen to\n  `this.finishEvent` and instantly skip to the last frame\n  when the event is observed.\n\n  The animation is tracked so it can be\n  [`finished`](/up.MotionController.finish) later.\n\n  @function startFunction\n  @param {Element|List<Element>} cluster\n    A list of elements that will be affected by the motion.\n  @param {Function(): Promise} startMotion\n  @param {Object} [memory.trackMotion=true]\n  @return {Promise}\n    A promise that fulfills when the animation ends.\n  */\n  startFunction(cluster, startMotion, memory = {}) {\n    cluster = e.list(cluster)\n\n    // Some motions might reject after starting. E.g. a scrolling animation\n    // will reject when the user scrolls manually during the animation. For\n    // the purpose of this controller, we just want to know when the animation\n    // has setteld, regardless of whether it was resolved or rejected.\n    const mutedAnimator = () => up.error.muteUncriticalRejection(startMotion())\n\n    // Callers can pass an options hash `{ memory }` in which we store a { trackMotion }\n    // property. With this we can prevent tracking the same motion multiple times.\n    // This is an issue when composing a transition from two animations, or when\n    // using another transition from within a transition function.\n    memory.trackMotion = memory.trackMotion ?? up.motion.isEnabled()\n\n    if (memory.trackMotion === false) {\n      return mutedAnimator()\n    } else {\n      memory.trackMotion = false\n      this.finish(cluster)\n      this._markCluster(cluster)\n      let promise = this._whileForwardingFinishEvent(cluster, mutedAnimator)\n      promise = promise.then(() => this._unmarkCluster(cluster))\n      // Return the original promise that is still running\n      return promise\n    }\n  }\n\n  /*-\n  @function finish\n  @param {List<Element>} [elements]\n    If no element is given, finishes all animations in the documnet.\n    If an element is given, only finishes animations in its subtree and ancestors.\n  @return {Promise} A promise that fulfills when animations have finished.\n  */\n  finish(elements) {\n    this.finishCount++\n    if ((this._clusterCount === 0) || !up.motion.isEnabled()) { return }\n    elements = this._expandFinishRequest(elements)\n\n    for (let element of elements) {\n      this._finishOneElement(element)\n    }\n\n    return up.migrate.formerlyAsync?.('up.motion.finish()')\n  }\n\n  _expandFinishRequest(elements) {\n    if (elements) {\n      return u.flatMap(elements, el => e.list(el.closest(this._selector), el.querySelectorAll(this._selector)))\n    } else {\n      // If no reference elements were given, we finish every matching\n      // element on the screen.\n      return document.querySelectorAll(this._selector)\n    }\n  }\n\n  isActive(element) {\n    return element.classList.contains(this._activeClass)\n  }\n\n  _finishOneElement(element) {\n    // Animating code is expected to listen to this event, fast-forward\n    // the animation and resolve their promise. All built-ins like\n    // `up.animate()` or `up.morph()` behave that way.\n    this._emitFinishEvent(element)\n  }\n\n  _emitFinishEvent(element, eventAttrs = {}) {\n    eventAttrs = { target: element, log: false, ...eventAttrs }\n    return up.emit(this.finishEvent, eventAttrs)\n  }\n\n  _markCluster(cluster) {\n    this._clusterCount++\n    this._toggleActive(cluster, true)\n  }\n\n  _unmarkCluster(cluster) {\n    this._clusterCount--\n    this._toggleActive(cluster, false)\n  }\n\n  _toggleActive(cluster, isActive) {\n    for (let element of cluster) {\n      element.classList.toggle(this._activeClass, isActive)\n    }\n  }\n\n  _whileForwardingFinishEvent(cluster, fn) {\n    if (cluster.length < 2) { return fn() }\n    const doForward = (event) => {\n      if (!event.forwarded) {\n        for (let element of cluster) {\n          if (element !== event.target && this.isActive(element)) {\n            this._emitFinishEvent(element, { forwarded: true })\n          }\n        }\n      }\n    }\n\n    // Forward the finish event to the ghost that is actually animating\n    const unbindFinish = up.on(cluster, this.finishEvent, doForward)\n    // Our own pseudo-animation finishes when the actual animation on $ghost finishes\n    return fn().then(unbindFinish)\n  }\n\n  async reset() {\n    await this.finish()\n    this.finishCount = 0\n    this._clusterCount = 0\n  }\n}\n", "const u = up.util\nconst e = up.element\n\nup.NonceableCallback = class NonceableCallback {\n\n  constructor(script, nonce) {\n    this.script = script\n    this.nonce = nonce\n  }\n\n  static fromString(string) {\n    let match = string.match(/^(nonce-([^\\s]+)\\s)?(.*)$/)\n    return new this(match[3], match[2])\n  }\n\n  /*-\n  Replacement for `new Function()` that can take a nonce to work with a strict Content Security Policy.\n\n  It also prints an error when a strict CSP is active, but user supplies no nonce.\n\n  ### Examples\n\n  ```js\n  new up.NonceableCallback('1 + 2', 'secret').toFunction()\n  ```\n\n  @function up.NonceableCallback#toFunction\n  @internal\n  */\n  toFunction(...argNames) {\n    if (this.nonce) {\n      // Don't return a bound function so callers can re-bind to a different this.\n      let callbackThis = this\n      return function(...args) {\n        return callbackThis._runAsNoncedFunction(this, argNames, args)\n      }\n    } else {\n      return new Function(...argNames, this.script)\n    }\n  }\n\n  toString() {\n    return `nonce-${this.nonce} ${this.script}`\n  }\n\n  _runAsNoncedFunction(thisArg, argNames, args) {\n    let wrappedScript = `\n      try {\n        up.noncedEval.value = (function(${argNames.join()}) {\n          ${this.script}\n        }).apply(up.noncedEval.thisArg, up.noncedEval.args)\n      } catch (error) {\n        up.noncedEval.error = error\n      }\n    `\n\n    let script\n    try {\n      up.noncedEval = { args, thisArg: thisArg }\n      script = up.element.affix(document.body, 'script', { nonce: this.nonce, text: wrappedScript })\n      if (up.noncedEval.error) {\n        throw up.noncedEval.error\n      } else {\n        return up.noncedEval.value\n      }\n    } finally {\n      up.noncedEval = undefined\n      if (script) {\n        script.remove()\n      }\n    }\n  }\n\n  _allowedBy(allowedNonces) {\n    return this.nonce && u.contains(allowedNonces, this.nonce)\n  }\n\n  static adoptNonces(element, allowedNonces) {\n    if (!allowedNonces?.length) {\n      return\n    }\n\n    // Looking up a nonce requires a DOM query.\n    // For performance reasons we only do this when we're actually rewriting\n    // a nonce, and only once per response.\n    const getPageNonce = u.memoize(up.protocol.cspNonce)\n\n    u.each(up.script.config.nonceableAttributes, (attribute) => {\n      let matches = e.subtree(element, `[${attribute}^=\"nonce-\"]`)\n      u.each(matches, (match) => {\n        let attributeValue = match.getAttribute(attribute)\n        let callback = this.fromString(attributeValue)\n        let warn = (message, ...args) => up.log.warn('up.render()', `Cannot use callback [${attribute}=\"${attributeValue}\"]: ${message}`, ...args)\n\n        if (!callback._allowedBy(allowedNonces)) {\n          // Don't rewrite a nonce that the browser would have rejected.\n          return warn(\"Callback's CSP nonce (%o) does not match response header (%o)\", callback.nonce, allowedNonces)\n        }\n\n        // Replace the nonce with that of the current page.\n        // This will allow the handler to run via #toFunction().\n        let pageNonce = getPageNonce()\n        if (!pageNonce) {\n          return warn(\"Current page's CSP nonce is unknown\")\n        }\n        callback.nonce = pageNonce\n        match.setAttribute(attribute, callback.toString())\n      })\n    })\n  }\n\n}\n", "const e = up.element\nconst u = up.util\n\nup.OverlayFocus = class OverlayFocus {\n\n  constructor(layer) {\n    this._layer = layer\n    this._focusElement = this._layer.getFocusElement()\n  }\n\n  moveToFront() {\n    if (this._enabled) { return }\n    this._enabled = true\n\n    this._untrapFocus = up.on('focusin', event => this._onFocus(event))\n    this._unsetAttrs = e.setTemporaryAttrs(this._focusElement, {\n      // Make layer.element focusable.\n      // It would be slightly nicer to give it [tabindex=-1] to make it focusable through JS,\n      // but remove it from the keyboard tab sequence. However, then we would need additional\n      // code to prevent an infinite loop between focus traps in an overlay that has no\n      // focusable elements.\n      'tabindex': '0',\n      // Make screen readers speak \"dialog field\" as we focus layer.element.\n      'role': 'dialog',\n      // Tell modern screen readers to make all elements outside layer.element's subtree inert.\n      'aria-modal': 'true'\n    })\n    this._focusTrapBefore = e.affix(this._focusElement, 'beforebegin', 'up-focus-trap[tabindex=0]')\n    this._focusTrapAfter = e.affix(this._focusElement, 'afterend', 'up-focus-trap[tabindex=0]')\n  }\n\n  moveToBack() {\n    this.teardown()\n  }\n\n  teardown() {\n    if (!this._enabled) { return }\n    this._enabled = false\n\n    this._untrapFocus()\n    // Remove [aria-modal] attribute to not confuse screen readers with multiple\n    // mutually exclusive [aria-modal] layers.\n    this._unsetAttrs()\n\n    this._focusTrapBefore.remove()\n    this._focusTrapAfter.remove()\n  }\n\n  _onFocus(event) {\n    const { target } = event\n\n    // (1) Ignore focus events triggered by this method.\n    // (2) Ignore focus events within overlays by other libraries.\n    if (this._processingFocusEvent || up.layer.isWithinForeignOverlay(target)) {\n      return\n    }\n\n    this._processingFocusEvent = true\n\n    if (target === this._focusTrapBefore) {\n      // User shift-tabbed from the first focusable element in the overlay.\n      // Focus pierced through the layer the the beginning.\n      // We want to wrap around and focus the end of the overlay.\n      this._focusEnd()\n    } else if ((target === this._focusTrapAfter) || !this._layer.contains(target)) {\n      // User tabbed from the last focusable element in the overlay\n      // OR user moved their virtual cursor on an element outside the layer.\n      // We want to to trap focus and focus the start of the overlay.\n      this._focusStart()\n    }\n\n    this._processingFocusEvent = false\n  }\n\n  _focusStart(focusOptions) {\n    // Focusing the overlay element with its [role=dialog] will read out\n    // \"dialog field\" in many screen readers.\n    up.focus(this._focusElement, focusOptions)\n  }\n\n  _focusEnd() {\n    // The end will usually be the dismiss button, if there is one.\n    // Otherwise it will be the last focusable element.\n    // We focus on the box element since focusing on the layer container\n    // would include the viewport, which is focusable due to scroll bars.\n    this._focusLastDescendant(this._layer.getBoxElement()) || this._focusStart()\n  }\n\n  _focusLastDescendant(element) {\n    // Don't use forEach since we need to break out of the loop with `return`\n    for (let child of u.reverse(element.children)) {\n      if (up.viewport.tryFocus(child) || this._focusLastDescendant(child)) {\n        return true\n      }\n    }\n  }\n}\n", "\nconst u = up.util\nconst e = up.element\n\n/*-\nThe `up.Params` class offers a consistent API to read and manipulate request parameters\nindependent of their type.\n\nRequest parameters are used in [form submissions](/up.Params.fromForm) and\n[URLs](/up.Params.fromURL). Methods like `up.submit()` or `up.replace()` accept\nrequest parameters as a `{ params }` option.\n\n### Supported parameter types\n\nThe following types of parameter representation are supported:\n\n1. An object like `{ email: 'foo@bar.com' }`\n2. A query string like `'email=foo%40bar.com'`\n3. An array of `{ name, value }` objects like `[{ name: 'email', value: 'foo@bar.com' }]`\n4. A [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n\n@class up.Params\n@parent up.form\n*/\nup.Params = class Params {\n\n  /*-\n  Constructs a new `up.Params` instance.\n\n  @constructor up.Params\n  @param {Object|Array|string|FormData|up.Params} [params]\n    An existing list of params with which to initialize the new `up.Params` object.\n\n    The given params value may be of any [supported type](/up.Params).\n  @return {up.Params}\n  @experimental\n  */\n  constructor(raw) {\n    this.clear()\n    this.addAll(raw)\n  }\n\n  /*-\n  Removes all params from this object.\n\n  @function up.Params#clear\n  @experimental\n  */\n  clear() {\n    this.entries = []\n  }\n\n  [u.copy.key]() {\n    return new up.Params(this)\n  }\n\n  /*-\n  Returns an object representation of this `up.Params` instance.\n\n  The returned value is a simple JavaScript object with properties\n  that correspond to the key/values in the given `params`.\n\n  ### Example\n\n      var params = new up.Params('foo=bar&baz=bam')\n      var object = params.toObject()\n\n      // object is now: {\n      //   foo: 'bar',\n      //   baz: 'bam'\n      // ]\n\n  @function up.Params#toObject\n  @return {Object}\n  @experimental\n  */\n  toObject() {\n    const obj = {}\n    for (let entry of this.entries) {\n      const { name, value } = entry\n      if (!u.isBasicObjectProperty(name)) {\n        if (this._isArrayKey(name)) {\n          obj[name] ||= []\n          obj[name].push(value)\n        } else {\n          obj[name] = value\n        }\n      }\n    }\n    return obj\n  }\n\n  /*-\n  Returns an array representation of this `up.Params` instance.\n\n  The returned value is a JavaScript array with elements that are objects with\n  `{ key }` and `{ value }` properties.\n\n  ### Example\n\n      var params = new up.Params('foo=bar&baz=bam')\n      var array = params.toArray()\n\n      // array is now: [\n      //   { name: 'foo', value: 'bar' },\n      //   { name: 'baz', value: 'bam' }\n      // ]\n\n  @function up.Params#toArray\n  @return {Array}\n  @experimental\n  */\n  toArray() {\n    return this.entries\n  }\n\n  /*-\n  Returns a [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) representation\n  of this `up.Params` instance.\n\n  ### Example\n\n      var params = new up.Params('foo=bar&baz=bam')\n      var formData = params.toFormData()\n\n      formData.get('foo') // 'bar'\n      formData.get('baz') // 'bam'\n\n  @function up.Params#toFormData\n  @return {FormData}\n  @experimental\n  */\n  toFormData() {\n    const formData = new FormData()\n    for (let entry of this.entries) {\n      formData.append(entry.name, entry.value)\n    }\n    if (!formData.entries) {\n      // If this browser cannot inspect FormData with the #entries()\n      // iterator, assign the original array for inspection by specs.\n      formData.originalArray = this.entries\n    }\n    return formData\n  }\n\n  /*-\n  Returns an [query string](https://en.wikipedia.org/wiki/Query_string) for this `up.Params` instance.\n\n  The keys and values in the returned query string will be [percent-encoded](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding).\n  Non-primitive values (like [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) will be omitted from\n  the retuned query string.\n\n  ### Example\n\n      var params = new up.Params({ foo: 'bar', baz: 'bam' })\n      var query = params.toQuery()\n\n      // query is now: 'foo=bar&baz=bam'\n\n  @function up.Params#toQuery\n  @param {Object|FormData|string|Array|undefined} params\n    the params to convert\n  @return {string}\n    a query string built from the given params\n  @experimental\n  */\n  toQuery() {\n    let parts = u.map(this.entries, this._arrayEntryToQuery.bind(this))\n    parts = u.compact(parts)\n    return parts.join('&')\n  }\n\n  _arrayEntryToQuery(entry) {\n    const { value } = entry\n\n    // We cannot transpot a binary value in a query string.\n    if (this._isBinaryValue(value)) {\n      return\n    }\n\n    let query = encodeURIComponent(entry.name)\n    // There is a subtle difference when encoding blank values:\n    // 1. An undefined or null value is encoded to `key` with no equals sign\n    // 2. An empty string value is encoded to `key=` with an equals sign but no value\n    if (u.isGiven(value)) {\n      query += \"=\"\n      query += encodeURIComponent(value)\n    }\n    return query\n  }\n\n  /*-\n  Returns whether the given value cannot be encoded into a query string.\n\n  We will have `File` values in our params when we serialize a form with a file input.\n  These entries will be filtered out when converting to a query string.\n\n  @function up.Params#_isBinaryValue\n  @internal\n  */\n  _isBinaryValue(value) {\n    return value instanceof Blob\n  }\n\n  hasBinaryValues() {\n    const values = u.map(this.entries, 'value')\n    return u.some(values, this._isBinaryValue)\n  }\n\n  /*-\n  Builds an URL string from the given base URL and\n  this `up.Params` instance as a [query string](https://en.wikipedia.org/wiki/Query_string).\n\n  The base URL may or may not already contain a query string. The\n  additional query string will be joined with an `&` or `?` character accordingly.\n\n  @function up.Params#toURL\n  @param {string} base\n    The base URL that will be prepended to this `up.Params` object as a query string.\n  @return {string}\n    The built URL.\n  @experimental\n  */\n  toURL(base) {\n    let parts = [base, this.toQuery()]\n    parts = u.filter(parts, u.isPresent)\n    const separator = u.contains(base, '?') ? '&' : '?'\n    return parts.join(separator)\n  }\n\n  /*-\n  Adds a new entry with the given `name` and `value`.\n\n  An `up.Params` instance can hold multiple entries with the same name.\n  To overwrite all existing entries with the given `name`, use `up.Params#set()` instead.\n\n  ### Example\n\n      var params = new up.Params()\n      params.add('foo', 'fooValue')\n\n      var foo = params.get('foo')\n      // foo is now 'fooValue'\n\n  @function up.Params#add\n  @param {string} name\n    The name of the new entry.\n  @param {any} value\n    The value of the new entry.\n  @experimental\n  */\n  add(name, value) {\n    this.entries.push({ name, value })\n  }\n\n  /*-\n  Adds all entries from the given list of params.\n\n  The given params value may be of any [supported type](/up.Params).\n\n  @function up.Params#addAll\n  @param {Object|Array|string|FormData|up.Params|undefined} params\n  @experimental\n  */\n  addAll(raw) {\n    if (u.isMissing(raw)) {\n      // nothing to do\n    } else if (raw instanceof this.constructor) {\n      this.entries.push(...raw.entries)\n    } else if (u.isArray(raw)) {\n      // internal use for copying\n      this.entries.push(...raw)\n    } else if (u.isString(raw)) {\n      this._addAllFromQuery(raw)\n    } else if (u.isFormData(raw)) {\n      this._addAllFromFormData(raw)\n    } else if (u.isObject(raw)) {\n      this._addAllFromObject(raw)\n    } else {\n      up.fail(\"Unsupport params type: %o\", raw)\n    }\n  }\n\n  _addAllFromObject(object) {\n    for (let key in object) {\n      const value = object[key]\n      const valueElements = u.isArray(value) ? value : [value]\n      for (let valueElement of valueElements) {\n        this.add(key, valueElement)\n      }\n    }\n  }\n\n  _addAllFromQuery(query) {\n    for (let part of query.split('&')) {\n      if (part) {\n        let [name, value] = part.split('=')\n        name = decodeURIComponent(name)\n        // There are three forms we need to handle:\n        // (1) foo=bar should become { name: 'foo', bar: 'bar' }\n        // (2) foo=    should become { name: 'foo', bar: '' }\n        // (3) foo     should become { name: 'foo', bar: null }\n        if (u.isGiven(value)) {\n          value = decodeURIComponent(value)\n        } else {\n          value = null\n        }\n        this.add(name, value)\n      }\n    }\n  }\n\n  _addAllFromFormData(formData) {\n    for (let value of formData.entries()) {\n      this.add(...value)\n    }\n  }\n\n  /*-\n  Sets the `value` for the entry with given `name`.\n\n  An `up.Params` instance can hold multiple entries with the same name.\n  All existing entries with the given `name` are [deleted](/up.Params.prototype.delete) before the\n  new entry is set. To add a new entry even if the `name` is taken, use `up.Params#add()`.\n\n  @function up.Params#set\n  @param {string} name\n    The name of the entry to set.\n  @param {any} value\n    The new value of the entry.\n  @experimental\n  */\n  set(name, value) {\n    this.delete(name)\n    this.add(name, value)\n  }\n\n  /*-\n  Deletes all entries with the given `name`.\n\n  @function up.Params#delete\n  @param {string} name\n  @experimental\n  */\n  delete(name) {\n    this.entries = u.reject(this.entries, this._matchEntryFn(name))\n  }\n\n  _matchEntryFn(name) {\n    return entry => entry.name === name\n  }\n\n  /*-\n  Returns the first param value with the given `name` from the given `params`.\n\n  Returns `undefined` if no param value with that name is set.\n\n  If the `name` denotes an array field (e.g. `foo[]`), *all* param values with the given `name`\n  are returned as an array. If no param value with that array name is set, an empty\n  array is returned.\n\n  To always return a single value use `up.Params#getFirst()` instead.\n  To always return an array of values use `up.Params#getAll()` instead.\n\n  ### Example\n\n      var params = new up.Params({ foo: 'fooValue', bar: 'barValue' })\n      var params = new up.Params([\n        { name: 'foo', value: 'fooValue' }\n        { name: 'bar[]', value: 'barValue1' }\n        { name: 'bar[]', value: 'barValue2' })\n      ]})\n\n      var foo = params.get('foo')\n      // foo is now 'fooValue'\n\n      var bar = params.get('bar')\n      // bar is now ['barValue1', 'barValue2']\n\n  @function up.Params#get\n  @param {string} name\n  @experimental\n  */\n  get(name) {\n    if (this._isArrayKey(name)) {\n      return this.getAll(name)\n    } else {\n      return this.getFirst(name)\n    }\n  }\n\n  /*-\n  Returns the first param value with the given `name`.\n\n  Returns `undefined` if no param value with that name is set.\n\n  @function up.Params#getFirst\n  @param {string} name\n  @return {any}\n    The value of the param with the given name.\n  @experimental\n  */\n  getFirst(name) {\n    const entry = u.find(this.entries, this._matchEntryFn(name))\n    return entry?.value\n  }\n\n  /*-\n  Returns an array of all param values with the given `name`.\n\n  Returns an empty array if no param value with that name is set.\n\n  @function up.Params#getAll\n  @param {string} name\n  @return {Array}\n    An array of all values with the given name.\n  @experimental\n  */\n  getAll(name) {\n    if (this._isArrayKey(name)) {\n      return this.getAll(name)\n    } else {\n      const entries = u.map(this.entries, this._matchEntryFn(name))\n      return u.map(entries, 'value')\n    }\n  }\n\n  _isArrayKey(key) {\n    return key.endsWith('[]')\n  }\n\n  [u.isBlank.key]() {\n    return this.entries.length === 0\n  }\n\n  /*-\n  Constructs a new `up.Params` instance from the given `<form>`.\n\n  The returned params may be passed as `{ params }` option to\n  `up.request()` or `up.replace()`.\n\n  The constructed `up.Params` will include exactly those form values that would be\n  included in a regular form submission. In particular:\n\n  - All `<input>` types are suppported\n  - Field values are usually strings, but an `<input type=\"file\">` will produce\n    [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) values.\n  - An `<input type=\"radio\">` or `<input type=\"checkbox\">` will only be added if they are `[checked]`.\n  - An `<select>` will only be added if at least one value is `[checked]`.\n  - If passed a `<select multiple>` or `<input type=\"file\" multiple>`, all selected values are added.\n    If passed a `<select multiple>`, all selected values are added.\n  - Fields that are `[disabled]` are ignored\n  - Fields without a `[name]` attribute are ignored.\n\n  ### Example\n\n  Given this HTML form:\n\n  ```html\n  <form>\n    <input type=\"text\" name=\"email\" value=\"foo@bar.com\">\n    <input type=\"password\" name=\"pass\" value=\"secret\">\n  </form>\n  ```\n\n  This would serialize the form into an array representation:\n\n  ```js\n  let params = up.Params.fromForm('input[name=email]')\n  let email = params.get('email') // email is now 'foo@bar.com'\n  let pass = params.get('pass') // pass is now 'secret'\n  ```\n\n  @function up.Params.fromForm\n  @param {Element} form\n    A `<form>` element.\n  @return {up.Params}\n    A new `up.Params` instance with values from the given form.\n  @experimental\n  */\n  static fromForm(form) {\n    return this.fromContainer(form)\n  }\n\n  static fromContainer(container) {\n    let fields = up.form.fields(container)\n    return this.fromFields(fields)\n  }\n\n  /*-\n  Constructs a new `up.Params` instance from one or more\n  [HTML form field](https://www.w3schools.com/html/html_form_elements.asp).\n\n  The constructed `up.Params` will include exactly those form values that would be\n  included for the given fields in a regular form submission. If a given field wouldn't\n  submit a value (like an unchecked `<input type=\"checkbox\">`, nothing will be added.\n\n  See `up.Params.fromForm()` for more details and examples.\n\n  @function up.Params.fromFields\n  @param {Element|List<Element>|jQuery} fields\n  @return {up.Params}\n  @experimental\n  */\n  static fromFields(fields) {\n    const params = new (this)()\n    for (let field of u.wrapList(fields)) {\n      params.addField(field)\n    }\n    return params\n  }\n\n  /*-\n  Adds params from the given [HTML form field](https://www.w3schools.com/html/html_form_elements.asp).\n\n  The added params will include exactly those form values that would be\n  included for the given field in a regular form submission. If the given field wouldn't\n  submit a value (like an unchecked `<input type=\"checkbox\">`, nothing will be added.\n\n  See `up.Params.fromForm()` for more details and examples.\n\n  @function up.Params#addField\n  @param {Element|jQuery} field\n  @experimental\n  */\n  addField(field) {\n    field = e.get(field) // unwrap jQuery\n\n    // Input fields are excluded from form submissions if they have no [name]\n    // or when they are [disabled].\n    let name = field.name\n    if (name && !field.disabled) {\n      const { tagName } = field\n      const { type } = field\n      if (tagName === 'SELECT') {\n        for (let option of field.querySelectorAll('option')) {\n          if (option.selected) {\n            this.add(name, option.value)\n          }\n        }\n      } else if ((type === 'checkbox') || (type === 'radio')) {\n        if (field.checked) {\n          this.add(name, field.value)\n        }\n      } else if (type === 'file') {\n        // The value of an input[type=file] is the local path displayed in the form.\n        // The actual File objects are in the #files property.\n        for (let file of field.files) {\n          this.add(name, file)\n        }\n      } else {\n        return this.add(name, field.value)\n      }\n    }\n  }\n\n  [u.isEqual.key](other) {\n    return (this.constructor === other.constructor) && u.isEqual(this.entries, other.entries)\n  }\n\n  /*-\n  Constructs a new `up.Params` instance from the given URL's\n  [query string](https://en.wikipedia.org/wiki/Query_string).\n\n  Constructs an empty `up.Params` instance if the given URL has no query string.\n\n  ### Example\n\n      var params = up.Params.fromURL('http://foo.com?foo=fooValue&bar=barValue')\n      var foo = params.get('foo')\n      // foo is now: 'fooValue'\n\n  @function up.Params.fromURL\n  @param {string} url\n    The URL from which to extract the query string.\n  @return {string|undefined}\n    The given URL's query string, or `undefined` if the URL has no query component.\n  @experimental\n  */\n  static fromURL(url) {\n    const params = new (this)()\n    const urlParts = u.parseURL(url)\n    let query = urlParts.search\n    if (query) {\n      query = query.replace(/^\\?/, '')\n      params.addAll(query)\n    }\n    return params\n  }\n\n  /*-\n  Returns the given URL without its [query string](https://en.wikipedia.org/wiki/Query_string).\n\n  ### Example\n\n      var url = up.Params.stripURL('http://foo.com?key=value')\n      // url is now: 'http://foo.com'\n\n  @function up.Params.stripURL\n  @param {string} url\n    A URL (with or without a query string).\n  @return {string}\n    The given URL without its query string.\n  @experimental\n  */\n  static stripURL(url) {\n    return u.normalizeURL(url, { search: false })\n  }\n\n  static merge(...objects) {\n    return objects.reduce(\n      function(allParams, params) {\n        allParams.addAll(params)\n        return allParams\n      },\n      new up.Params()\n    )\n  }\n\n}\n", "const e = up.element\n\nconst TRANSITION_DELAY = 300\n\nup.ProgressBar = class ProgressBar {\n\n  constructor() {\n    this._step = 0\n    this._element = e.affix(document.body, 'up-progress-bar')\n    this._element.style.transition = `width ${TRANSITION_DELAY}ms ease-out`\n\n    this._moveTo(0)\n    // The element must be painted at width: 0 before we apply the target width.\n    // If the first paint sees the bar at the target width, we don't get an animated transition.\n    up.element.paint(this._element)\n\n    this._width = 31\n    this._nextStep()\n  }\n\n  _nextStep() {\n    let diff\n    if (this._width < 80) {\n      if (Math.random() < 0.15) {\n        // Sometimes the bar grows quickly by (7..12) percent.\n        diff = 7 + (5 * Math.random())\n      } else {\n        // Most of the time the bar progresses by (1.5..2) percent.\n        diff = 1.5 + (0.5 * Math.random())\n      }\n    } else {\n      // Above 80% completion we grow the bar more slowly,\n      // using a formula that can never reach 100%.\n      diff = 0.13 * (100 - this._width) * Math.random()\n    }\n\n    this._moveTo(this._width + diff)\n    this._step++\n\n    // Steps occur less frequent the longer we wait for the server.\n    const nextStepDelay = TRANSITION_DELAY + (this._step * 40)\n    this.timeout = setTimeout(this._nextStep.bind(this), nextStepDelay)\n  }\n\n  _moveTo(width) {\n    this._width = width\n    this._element.style.width = `${width}vw`\n  }\n\n  destroy() {\n    clearTimeout(this.timeout)\n    this._element.remove()\n  }\n\n  conclude() {\n    clearTimeout(this.timeout)\n    this._moveTo(100)\n    setTimeout(this.destroy.bind(this), TRANSITION_DELAY)\n  }\n}\n", "const u = up.util\n\nup.RenderOptions = (function() {\n\n  const GLOBAL_DEFAULTS = {\n    useHungry: true,\n    useKeep: true,\n    saveScroll: true,\n    saveFocus: true,\n    focus: 'keep',\n    abort: 'target',\n    failOptions: true,\n  }\n\n  const PRELOAD_OVERRIDES = {\n    abort: false,\n    confirm: false,\n    feedback: false,\n    cache: true,\n    background: true,\n  }\n\n  // These properties are used before the request is sent.\n  // Hence there cannot be a failVariant.\n  const PREFLIGHT_KEYS = [\n    'url',\n    'method',\n    'origin',\n    'headers',\n    'params',\n    'cache',\n    'fallback',  // this may produce a different X-Up-Target request header if { target } is missing on page\n    'abort',\n    'abortable',\n    'confirm',\n    'feedback',\n    'origin',\n    'baseLayer',\n    'fail',\n    'onError',\n  ]\n\n  // These properties are used between success options and fail options.\n  // There's a lot of room to think differently about what should be shared and what\n  // should explictely be set separately for both cases. An argument can always be\n  // that it's either convenient to share, or better to be explicit.\n  //\n  // Generally we have decided to share:\n  //\n  // - Options that are relevant before the request is sent (e.g. { url } or { abort }).\n  // - Options that change how we think about the entire rendering operation.\n  //   E.g. if we always want to see a server response, we set { fallback: true }.\n  //\n  // Generally we have decided to not share:\n  //\n  // - Layer-related options (e.g. target layer or options for a new layer)\n  // - Options that change focus. The user might focus a specific element from a success element,\n  //   like { focus: '.result', failFocus: '.errors' }.\n  // - Options that change scrolling. The user might scroll to a specific element from a success element,\n  //   like { scroll: '.result', failScroll: '.errors' }.\n  const SHARED_KEYS = PREFLIGHT_KEYS.concat([\n    'keep',         // If I want to discard [up-keep] elements, I also want to discard them for the fail case.\n    'hungry',       // If I want to opportunistically update [up-hungry] elements, I also want it for the fail case.\n    'history',      // Note that regardless of setting, we only set history for reloadable responses (GET).\n    'source',       // No strong opinions about that one. Wouldn't one always have a source? Might as well not be an option.\n    'saveScroll',   // No strong opinions about that one. Wouldn't one always want to saveScroll? Might as wellnot be an option.\n    'navigate',     // Also set navigate defaults for fail options\n  ])\n\n  // At least one of these properties must be given for Unpoly to render content.\n  const CONTENT_KEYS = [\n    'url',\n    'response',\n    'content',\n    'fragment',\n    'document',\n  ]\n\n  // preprocess() will leave out properties for which there may be a better default\n  // later, in particular from the layer config in up.Change.OpenLayer.\n  const LATE_KEYS = [\n    'history',\n    'focus',\n    'scroll',\n  ]\n\n  function navigateDefaults(options) {\n    if (options.navigate) {\n      return up.fragment.config.navigateOptions\n    }\n  }\n\n  function preloadOverrides(options) {\n    if (options.preload) {\n      return PRELOAD_OVERRIDES\n    }\n  }\n\n  function preprocess(options) {\n    up.migrate.preprocessRenderOptions?.(options)\n\n    const defaults = u.merge(\n      GLOBAL_DEFAULTS,\n      navigateDefaults(options)\n    )\n\n    return u.merge(\n      // Leave out properties for which there may be a better default later, in particular\n      // from the layer config in up.Change.OpenLayer. If we merged it now we could\n      // not distinguish a user option (which always has highest priority) with a\n      // default that may be overridden by the layer config. If there is no better default\n      // later, the original defaults will be applied in finalize().\n      u.omit(defaults, LATE_KEYS),\n      // Remember the defaults in a { default } prop so we can re-use it\n      // later in deriveFailOptions() and finalize().\n      { defaults },\n      { inputDevice: up.event.inputDevice },\n      options,\n      preloadOverrides(options)\n    )\n  }\n\n  function finalize(preprocessedOptions, lateDefaults) {\n    return u.merge(\n      preprocessedOptions.defaults,\n      lateDefaults,\n      preprocessedOptions\n    )\n  }\n\n  function assertContentGiven(options) {\n    if (!u.some(CONTENT_KEYS, contentKey => u.isGiven(options[contentKey]))) {\n      // up.layer.open() should open an empty layer without a content key.\n      if (options.defaultToEmptyContent) {\n        options.content = ''\n      } else {\n        up.fail('up.render() needs either { ' + CONTENT_KEYS.join(', ') + ' } option')\n      }\n    }\n  }\n\n  function failOverrides(options) {\n    const overrides = {}\n    for (let key in options) {\n      // Note that up.fragment.successKey(key) only returns a value\n      // if the given key is prefixed with \"fail\".\n      const value = options[key]\n      let unprefixed = up.fragment.successKey(key)\n      if (unprefixed) {\n        overrides[unprefixed] = value\n      }\n    }\n    return overrides\n  }\n\n  function deriveFailOptions(preprocessedOptions) {\n    if (preprocessedOptions.failOptions) {\n      return {\n        ...preprocessedOptions.defaults,\n        // Only a few keys are shared between success and failure cases.\n        ...u.pick(preprocessedOptions, SHARED_KEYS),\n        ...failOverrides(preprocessedOptions),\n        // We sometimes want to log that fail-prefixed options were used, to alert the\n        // user of the fact that there are different option sets for success and failure.\n        ...{ failPrefixForced: true }\n      }\n    } else {\n      return {\n        // Use all the sucess options.\n        ...preprocessedOptions,\n        // We still allow to override individual options.\n        // This is relevant for up.validate() which does not use fail options,\n        // but lets users still override individual options for the failure case.\n        ...failOverrides(preprocessedOptions),\n      }\n    }\n  }\n\n  return {\n    preprocess,\n    finalize,\n    assertContentGiven,\n    deriveFailOptions,\n  }\n})()\n", "/*-\nInstances of `up.RenderResult` describe the effects of [rendering](/up.render).\n\nFunctions like `up.render()`, `up.follow()` or `up.submit()` return a promise\nthat resolve with an `up.RenderResult`:\n\n```js\nlet result = await up.render('.target', content: 'foo')\nconsole.log(result.fragments) // => [<div class=\"target\">...</div>]\nconsole.log(result.layer)     // => up.Layer.Root\n```\n\n@class up.RenderResult\n@parent up.fragment\n*/\nup.RenderResult = class RenderResult extends up.Record {\n\n  /*-\n  An array of fragments that were inserted.\n\n  @property up.RenderResult#fragments\n  @param {Array<Element>} fragments\n  @stable\n  */\n\n  /*-\n  The updated [layer](/up.layer).\n\n  @property up.RenderResult#layer\n  @param {up.Layer} layer\n  @stable\n  */\n\n  /*-\n  The [target selector](/targeting-fragments) that was rendered.\n\n  @property up.RenderResult#target\n  @param {string} target\n  @stable\n  */\n\n  /*-\n  The effective [render](/up.render) options used to produce this result.\n\n  If this result was produced from a [failed response](/failed-response),\n  [`fail` prefixes](/failed-response#rendering-failed-responses-differently)\n  have been removed from the render options.\n\n  @property up.RenderResult#options\n  @param {string} options\n  @internal\n  */\n\n  /*-\n  A promise that settles when no further DOM changes will be caused by this render pass.\n\n  In particular:\n\n  - [Animations](/up.motion) have concluded and [transitioned](https://unpoly.com/a-up-transition) elements were removed from the DOM tree.\n  - A [cached response](#options.cache) was [revalidated with the server](/caching#revalidation).\n    If the server has responded with new content, this content has also been rendered.\n\n  The promise resolves to the last `up.RenderResult` that updated a fragment.\n  If [revalidation](/caching#revalidation) re-rendered the fragment, it is the result from the\n  second render pass. If no revalidation was performed, or if revalidation yielded an [empty response](/caching#when-nothing-changed),\n  it is the result from the initial render pass.\n\n  The promise will reject if the server sends an error status,\n  if there is a network issue, or if targets could not be matched.\n\n  Also see [Awaiting postprocessing](/render-hooks#awaiting-postprocessing).\n\n  ### Example\n\n  ```js\n  let result = await up.render({ url: '/path' }).finished\n  console.log(result.fragments)\n\n  @property up.RenderResult#finished\n  @param {Promise<up.RenderResult>}\n  ```\n  */\n\n  keys() {\n    return [\n      'fragments',\n      'layer',\n      'target',\n      'options', // set by up.Change.FromContent\n      'finished',\n    ]\n  }\n\n  defaults() {\n    return {\n      fragments: [],\n    }\n  }\n\n  /*-\n  Whether this render pass did not result in any fragments being rendered.\n\n  There are some cases where we did not render any fragment:\n\n  - Server sent HTTP status `304 Not Modified` to [avoid re-rendering unchanged content](/skipping-rendering).\n  - Server sent HTTP status `204 No Content`.\n  - The target selector was set to `':none'` by either client or server.\n  - The server sent an `X-Up-Accept-Layer` or `X-Up-Dismiss-Layer` header.\n    This [closes an overlay](/closing-overlays#closing-from-the-server) before content is rendered.\n\n  @property up.RenderResult#none\n  @param {boolean} none\n  @experimental\n  */\n  get none() {\n    return !this.fragments.length\n  }\n\n  /*-\n  Returns the inserted fragment.\n\n  When [multiple fragments](/targeting-fragments#updating-multiple-fragments) were inserted, the first fragment is returned.\n  To get a list of all inserted fragments, use the [`{ fragments }`](/up.RenderResult.prototype.fragments) property.\n\n  @see up.Request.prototype.fragment\n\n  @property up.RenderResult#fragment\n  @param {Element} fragment\n  @stable\n  */\n  get fragment() {\n    return this.fragments[0]\n  }\n\n  static both(main, extension, mergeFinished = true) {\n    // TODO: Why does mergeFinished call this with an undefined extension?\n    if (!extension) return main\n\n    return new this({\n      target: main.target,\n      layer: main.layer,\n      options: main.options,\n      fragments: main.fragments.concat(extension.fragments),\n      finished: (mergeFinished && this.mergeFinished(main, extension)) //.finished // Promise.all([main.finished, extension.finished])\n    })\n  }\n\n  static async mergeFinished(main, extension) {\n    return this.both(\n      await main.finished,\n      await extension.finished,\n      false\n    )\n  }\n\n  static buildNone() {\n    return new this({\n      target: ':none',\n      finished: Promise.resolve(),\n    })\n  }\n\n}\n", "const u = up.util\n\n/*-\nA normalized description of an [HTTP request](/up.request).\n\nYou can queue a request using the `up.request()` method:\n\n```js\nlet request = up.request('/foo')\nconsole.log(request.url)\n\n// A request object is also a promise for its response\nlet response = await request\nconsole.log(response.text)\n```\n\n@class up.Request\n@parent up.network\n*/\nup.Request = class Request extends up.Record {\n\n  /*-\n  The HTTP method for the request.\n\n  @property up.Request#method\n  @param {string} method\n  @stable\n  */\n\n  /*-\n  The requested URL.\n\n  @property up.Request#url\n  @param {string} url\n  @stable\n  */\n\n  /*-\n  The [hash component](https://en.wikipedia.org/wiki/URI_fragment) of this request's URL.\n\n  The `{ hash }` property is automatically extracted from the given URL:\n\n  ```js\n  let request = up.request({ url: '/path#section' })\n  request.url // => '/path'\n  request.hash // => '#section'\n  ```\n\n  @property up.Request#hash\n  @param {string} hash\n  @stable\n  */\n\n  /*-\n  [Parameters](/up.Params) that should be sent as the request's payload.\n\n  @property up.Request#params\n  @param {Object|FormData|string|Array} params\n  @stable\n  */\n\n  /*-\n  The CSS selector [targeted](/targeting-fragments) by this request.\n\n  The selector will be sent as an `X-Up-Target` header.\n\n  @property up.Request#target\n  @param {string} target\n  @stable\n  */\n\n  /*-\n  The CSS selector [targeted](/targeting-fragments) by this request in case\n  the server responds with an [error code](/failed-responses).\n\n  The selector will be sent as an `X-Up-Fail-Target` header.\n\n  @property up.Request#failTarget\n  @param {string} failTarget\n  @stable\n  */\n\n  /*-\n  An object of HTTP headers that will be sent with this request.\n\n  Unpoly will by default send a number of custom request headers.\n  See `up.protocol` for details.\n\n  @see up.Request.prototype.header\n\n  @property up.Request#headers\n  @param {Object} headers\n  @stable\n  */\n\n  /*-\n  Returns the HTTP request header value with the given name.\n\n  Returns `undefined` if the given header name will not be sent with this request.\n\n  > [note]\n  > For implementation reasons, the search for the header is case-sensitive.\n\n  @function up.Request#header\n  @param {string} name\n    The case-sensitive name.\n  @return {string|undefined}\n    The value of the header.\n  @stable\n  */\n\n  /*-\n  A timeout in milliseconds.\n\n  If the request is queued due to [many concurrent requests](/up.network.config#config.concurrency),\n  the timeout will not include the time spent waiting in the queue.\n\n  @property up.Request#timeout\n  @param {Object|undefined} timeout\n  @stable\n  */\n\n  /*-\n  Whether to wrap non-standard HTTP methods in a POST request.\n\n  If this is set, methods other than GET and POST will be converted to a `POST` request\n  and carry their original method as a `_method` parameter. This is to [prevent unexpected redirect behavior](https://makandracards.com/makandra/38347).\n\n  Defaults to [`up.network.config`](/up.network.config#config.wrapMethod).\n\n  @property up.Request#wrapMethod\n  @param {boolean} wrapMethod\n  @stable\n  */\n\n  /*-\n  The [context](/context) of the layer targeted by this request.\n\n  The context object will be sent as an `X-Up-Context` header.\n\n  @property up.Request#context\n  @param {Object} context\n  @experimental\n  */\n\n  /*-\n  The [context](/context) of the layer targeted by this request in case the server responds with an [error code](/failed-responses).\n\n  The context object will be sent as an `X-Up-Fail-Context` header.\n\n  @property up.Request#failContext\n  @param {Object} failContext\n  @experimental\n  */\n\n  /*-\n  The [layer](/up.layer) targeted by this request.\n\n  Setting the `{ layer }` property will automatically derive `{ context }` and `{ mode }` properties.\n\n  To prevent memory leaks, this property is removed shortly after the response is received.\n\n  @property up.Request#layer\n  @param {up.Layer} layer\n  @experimental\n  */\n\n  /*-\n  The [layer](/up.layer) targeted by this request in case the server responds with an [error code](/failed-responses).\n\n  Setting the `{ failLayer }` property will automatically derive `{ failContext }` and `{ failMode }` properties.\n\n  To prevent memory leaks, this property is removed shortly after the response is received.\n\n  @property up.Request#failLayer\n  @param {up.Layer} layer\n  @experimental\n  */\n\n  /*-\n  The element that triggered the request.\n\n  For example, when this request was triggered by a click on a link, the link\n  element is set as the `{ origin }`.\n\n  To prevent memory leaks, this property is removed shortly after the response is received.\n\n  @property up.Request#origin\n  @param {Element} origin\n  @experimental\n  */\n\n  /*-\n  The [mode](/up.Layer.prototype.mode) of the layer targeted by this request.\n\n  The value will be sent as an `X-Up-Mode` header.\n\n  @property up.Request#mode\n  @param {string} mode\n  @stable\n  */\n\n  /*-\n  The [mode](/up.Layer.prototype.mode) of the layer targeted by this request in case the server responds with an [error code](/failed-responses).\n\n  The value will be sent as an `X-Up-Fail-Mode` header.\n\n  @property up.Request#failMode\n  @param {string} failMode\n  @stable\n  */\n\n  /*-\n  The format in which the [request params](/up.Request.prototype.params) will be encoded.\n\n  @property up.Request#contentType\n  @param {string} contentType\n  @stable\n  */\n\n  /*-\n  The payload that the request will encode into its body.\n\n  By default Unpoly will build a payload from the given `{ params }` option.\n\n  @property up.Request#payload\n  @param {string} payload\n  @stable\n  */\n\n  /*-\n  Whether the request is abortable through `up.fragment.abort()`.\n\n  This belongs to the `up.fragment` API, not `up.request`.\n  A request with `{ abortable: false }` can still be aborted through `up.request.abort()`.\n\n  @property up.Request#abortable\n  @param {boolean} [abortable=true]\n  @internal\n  */\n\n  /*-\n  Whether this request is loading in the background.\n\n  Background requests deprioritized over foreground requests.\n  Background requests also won't emit `up:network:late` events and won't trigger\n  the [progress bar](/up.network.config#config.progressBar).\n\n  @property up.Request#background\n  @param {boolean} [background=false]\n  @experimental\n  */\n\n  /*-\n  The number of milliseconds after which this request can cause\n  an `up:network:late` event.\n\n  Defaults to `up.network.config.badResponseTime`.\n\n  @property up.Request#badResponseTime\n  @param {number} [badResponseTime]\n  @experimental\n  */\n\n  keys() {\n    return [\n      // 'signal',\n      'method',\n      'url',\n      'hash',\n      'params',\n      'target',\n      'failTarget',\n      'headers',\n      'timeout',\n      'background',\n      'cache',  // since up.network.request() options are sometimes wrapped in this class\n      'expireCache',  // since up.network.request() options are sometimes wrapped in this class\n      'evictCache',  // since up.network.request() options are sometimes wrapped in this class\n\n      // While requests are queued or in flight we keep the layer they're targeting.\n      // If that layer is closed we will cancel all pending requests targeting that layer.\n      // Note that when opening a new layer, this { layer } attribute will be the set to\n      // the current layer. The { mode } and { failMode } attributes will belong to the\n      // new layer being opened.\n      'layer',\n      'mode',        // we would love to delegate @mode to @layer.mode, but @layer might be the string \"new\"\n      'context',     // we would love to delegate @context to @layer.context, but @layer might be string \"new\"\n      'failLayer',\n      'failMode',    // we would love to delegate @failMode to @failLayer.mode, but @failLayer might be the string \"new\"\n      'failContext', // we would love to delegate @failContext to @failLayer.mode, but @failLayer might be the string \"new\"\n      'origin',\n      'fragments',\n      'builtAt',\n      'wrapMethod',\n      'contentType',\n      'payload',\n      'onQueued',\n      'onLoading',\n      'fail',\n      'abortable',\n      'badResponseTime',\n    ]\n  }\n\n  defaults() {\n    return {\n      state: 'new',\n      abortable: true,\n      headers: {},\n      timeout: up.network.config.timeout,\n      builtAt: new Date(),\n    }\n  }\n\n  /*-\n  Creates a new `up.Request` object.\n\n  This will not actually send the request over the network. For that use `up.request()`.\n\n  @constructor up.Request\n  @param {string} attrs.url\n  @param {string} [attrs.method='get']\n  @param {up.Params|string|Object|Array|FormData} [attrs.params]\n  @param {string} [attrs.target]\n  @param {string} [attrs.failTarget]\n  @param {Object<string, string>} [attrs.headers]\n  @param {number} [attrs.timeout]\n  @internal\n  */\n  constructor(options) {\n    super(options)\n\n    this.params = new up.Params(this.params) // copies, which we want\n\n    if (this.wrapMethod == null) { this.wrapMethod = up.network.config.wrapMethod }\n\n    // Normalize a first time to get a normalized cache key.\n    this._normalize()\n\n    if ((this.target || this.layer || this.origin) && !options.basic) {\n      const layerLookupOptions = { origin: this.origin }\n      // Calling up.layer.get() will give us:\n      //\n      // (1) Resolution of strings like 'current' to an up.Layer instance\n      // (2) Default of origin's layer\n      // (3) Default of up.layer.current\n      //\n      // up.layer.get('new') will return 'new' unchanged, but I'm not sure\n      // if any code actually calls up.request({ ..., layer: 'new' }).\n      // In up.Change.OpenLayer we connect requests to the base layer we're stacking upon.\n      this.layer = up.layer.get(this.layer, layerLookupOptions)\n      this.failLayer = up.layer.get(this.failLayer, layerLookupOptions)\n      this.context ||= this.layer.context || {} // @layer might be \"new\", so we default to {}\n      this.failContext ||= this.failLayer?.context || {} // @failLayer might be \"new\", so we default to {}\n      this.mode ||= this.layer.mode\n      this.failMode ||= this.failLayer?.mode\n    }\n\n    // This up.Request object is also promise for its up.Response.\n    // We delegate all promise-related methods (then, catch, finally) to an internal\n    // deferred object.\n    this.deferred = u.newDeferred()\n\n    // (1) We want to set the default after all other properties are initialized,\n    //     in case up.network.config.badResponseTime is a function that inspects this request.\n    // (2) We want to set the default once and then keep the value immutable. Otherwise\n    //     the timer logic for up:network:late/:recover gets inconvenient edge cases.\n    this.badResponseTime ??= u.evalOption(up.network.config.badResponseTime, this)\n\n    // this.uid = u.uid()\n\n    this._addAutoHeaders()\n  }\n\n  /*-\n  Returns the underlying `XMLHttpRequest` instance.\n\n  @property up.Request#xhr\n  @param {XMLHttpRequest} xhr\n  @stable\n  */\n  get xhr() {\n    // Initialize the xhr request on first access,\n    // so listeners on up:request:send events have a chance to access the xhr.\n    return this._xhr ??= new XMLHttpRequest()\n  }\n\n  /*-\n  Returns the fragments matched by this request's [target selector](/up.Request.prototype.target).\n\n  @see up.RenderResult.prototype.fragments\n\n  @property up.Request#fragments\n  @param List<Element> fragments\n  @experimental\n  */\n  get fragments() { // eslint-disable-line getter-return\n    // This property is required for `up.fragment.abort()` to select requests within\n    // the subtree that we're cancling.\n    //\n    // We allow users to pass in pre-matched `{ fragments }` in the constructor.\n    // We use this in `up.Change.FromURL` since we already know the element's we're trying\n    // to replace.\n    //\n    // If we haven't received a `{ fragments }` property (or if it has been deleted by\n    // evictExpensitveAttrs()) but did we receive a `{ target }`,we find matching elements here.\n    if (this._fragments) {\n      return this._fragments\n    } else if (this.target) {\n      let steps = up.fragment.parseTargetSteps(this.target)\n      let selectors = u.map(steps, 'selector')\n      let lookupOpts = { origin: this.origin, layer: this.layer }\n\n      // Don't cache the results to prevent memory leaks\n      return u.compact(u.map(selectors, (selector) => up.fragment.get(selector, lookupOpts)))\n    }\n  }\n\n  set fragments(value) {\n    this._fragments = value\n  }\n\n  /*-\n  Returns the fragment matched by this request's [target selector](/up.Request.prototype.target).\n\n  When [multiple fragments](/targeting-fragments#updating-multiple-fragments) were inserted, the first fragment is returned.\n  To get a list of all inserted fragments, use the [`{ fragments }`](/up.Request.prototype.fragments) property.\n\n  @see up.RenderResult.prototype.fragment\n\n  @property up.Request#fragment\n  @param Element fragment\n  @experimental\n  */\n  get fragment() {\n    return this.fragments?.[0]\n  }\n\n  _normalize() {\n    this.method = u.normalizeMethod(this.method)\n    this._extractHashFromURL()\n    this._transferParamsToURL()\n\n    // This consistently strips the hostname from same-origin requests.\n    this.url = u.normalizeURL(this.url)\n  }\n\n  _evictExpensiveAttrs() {\n    // We want to allow up:request:loaded events etc. to still access the properties that\n    // we are about to evict, so we wait for one more frame. It shouldn't matter for GC.\n    u.task(() => {\n      // (1) While the request is still in flight, we require the target layer\n      // to be able to cancel it when the layers gets closed. We now\n      // evict this property, since response.request.layer.element will\n      // prevent the layer DOM tree from garbage collection while the response\n      // is cached by up.network.\n      //\n      // (2) Although we must take care to not evict attributes that are part of our #cacheKey(),\n      // we have already copied all layer-relevant properties, e.g. this.mode, this.context.\n      this.layer = undefined\n      this.failLayer = undefined\n\n      // We want to provide the triggering element as { origin } to the function\n      // providing the CSRF function. We now evict this property, since\n      // response.request.origin will prevent its (now maybe detached) DOM tree\n      // from garbage collection while the response is cached by up.network.\n      this.origin = undefined\n\n      this.fragments = undefined\n    })\n  }\n\n  _extractHashFromURL() {\n    let match = this.url?.match(/^([^#]*)(#.+)$/)\n    if (match) {\n      this.url = match[1]\n      // Remember the #hash for later revealing.\n      return this.hash = match[2]\n    }\n  }\n\n  _transferParamsToURL() {\n    if (!this.url || this.allowsPayload() || u.isBlank(this.params)) {\n      return\n    }\n\n    // GET methods are not allowed to have a payload, so we transfer { params } params to the URL.\n    this.url = this.params.toURL(this.url)\n    // Now that we have transfered the params into the URL, we delete them from the { params } option.\n    this.params.clear()\n  }\n\n  isSafe() {\n    return up.network.isSafeMethod(this.method)\n  }\n\n  allowsPayload() {\n    return u.methodAllowsPayload(this.method)\n  }\n\n  will302RedirectWithGET() {\n    return this.isSafe() || (this.method === 'POST')\n  }\n\n  willCache() {\n    return u.evalAutoOption(this.cache, up.network.config.autoCache, this)\n  }\n\n  runQueuedCallbacks() {\n    u.always(this, () => this._evictExpensiveAttrs())\n\n    this.onQueued?.(this)\n  }\n\n  load() {\n    // If the request was aborted before it was sent (e.g. because it was queued)\n    // we don't send it.\n    if (this.state !== 'new') return\n\n    if (this._emitLoad()) {\n      this.state = 'loading'\n\n      // Listeners to up:request:load may have mutated properties that need to be\n      // re-normalized and/or are part of a cache key.\n      //\n      // To be correct we would also need to re-run _addAutoHeaders() here. However since\n      // this is costly and also rare that listeners mutate properties like #target or #layer,\n      // we leave it to the listener to update headers.\n      this._normalize()\n\n      // This callback is used by up.network to re-cache the request after its cache key\n      // may have changed by mutation from a up:request:load listener.\n      this.onLoading?.()\n\n      // If someone expired this link while it was waiting in the queue (e.g. through\n      // expiring everyhing with up.cache.expire(), it now becomes fresh through the\n      // act of loading.\n      this.expired = false\n\n      // Convert from XHR's callback-based API to up.Request's promise-based API\n      new up.Request.XHRRenderer(this).buildAndSend({\n        onload: () => this._onXHRLoad(),\n        onerror: () => this._onXHRError(),\n        ontimeout: () => this._onXHRTimeout(),\n        onabort: () => this._onXHRAbort()\n      })\n\n      // Signal to callers (in particular to up.Queue) that load() was not aborted.\n      return true\n    } else {\n      this.abort({ reason: 'Prevented by event listener' })\n    }\n  }\n\n  _emitLoad() {\n    let event = this.emit('up:request:load', { log: ['Loading %s', this.description] })\n    return !event.defaultPrevented\n  }\n\n  /*-\n  Loads this request object as a full-page request, replacing the entire browser environment\n  with a new page from the server response.\n\n  The full-page request will be loaded with the [URL](/up.Request.prototype.url),\n  [method](/up.Request.prototype.method) and [params](/up.Request.prototype.params)\n  from this request object.\n  Properties that are not possible in a full-page request (such as custom HTTP headers)\n  will be ignored.\n\n  Aborts all pending requests.\n\n  @function up.Request#loadPage\n  @experimental\n  */\n  loadPage() {\n    // This method works independently of @state, since it is often\n    // a fallback for a request that cannot be processed as a fragment update\n    // (see up:fragment:loaded event).\n\n    // Abort all pending requests so their callbacks won't run\n    // while we're already navigating away.\n    up.network.abort()\n    new up.Request.FormRenderer(this).buildAndSubmit()\n  }\n\n  _onXHRLoad() {\n    const response = this._extractResponseFromXHR()\n\n    const log = 'Loaded ' + response.description\n    this.emit('up:request:loaded', { request: response.request, response, log })\n\n    this.respondWith(response)\n  }\n\n  _onXHRError() {\n    // Neither XHR nor fetch() provide any meaningful error message.\n    // Hence we ignore the passed ProgressEvent and use our own error message.\n    this._setOfflineState('Network error')\n  }\n\n  _onXHRTimeout() {\n    // We used to treat timeouts like a client-side abort. While this is technically\n    // what happens, it is more practical for users to consider a timeout like a failed\n    // connection that we can retry with up.render({ onOffline }) etc.\n    this._setOfflineState('Timeout')\n  }\n\n  _onXHRAbort() {\n    // Use the default message that callers of request.abort() would also get.\n    this._setAbortedState()\n  }\n\n  /*-\n  Aborts this request.\n\n  The request's promise will reject with an `up.AbortError`.\n\n  ### Example\n\n  ```javascript\n  let request = await up.request('/path')\n\n  try {\n    let response = await request('/path')\n  } catch (result) {\n    if (result instanceof up.AbortError) {\n      console.log('Request was aborted.')\n    }\n  }\n\n  request.abort()\n  ```\n\n  @function up.Request#abort\n  @param {string} [options.reason]\n    A message describing the reason for aborting this request.\n\n    If omitted, a generic reason like `\"Aborted request to GET /path\"` will be used.\n\n    The reason will be set as the `up.AbortError`'s message.\n  @experimental\n  */\n  abort({ reason } = {}) {\n    // _setAbortedState() must be called before xhr.abort(), since xhr's event handlers\n    // will call _setAbortedState() a second time, without a message.\n    if (this._setAbortedState(reason) && this._xhr) {\n      this._xhr.abort()\n    }\n  }\n\n  _setAbortedState(reason) {\n    if (this._isSettled()) return\n\n    let message = 'Aborted request to ' + this.description + (reason ? ': ' + reason : '')\n    this.state = 'aborted'\n    this.deferred.reject(new up.Aborted(message))\n    this.emit('up:request:aborted', { log: message })\n\n    // Return true so callers know we didn't return early without actually aborting anything.\n    return true\n  }\n\n  _setOfflineState(reason) {\n    if (this._isSettled()) return\n\n    let message = 'Cannot load request to ' + this.description + (reason ? ': ' + reason : '')\n    this.state = 'offline'\n    this.emit('up:request:offline', { log: message })\n    this.deferred.reject(new up.Offline(message))\n  }\n\n  respondWith(response) {\n    this.response = response\n\n    if (this._isSettled()) return\n    this.state = 'loaded'\n\n    if (response.ok) {\n      this.deferred.resolve(response)\n    } else {\n      this.deferred.reject(response)\n    }\n  }\n\n  _isSettled() {\n    return (this.state !== 'new') && (this.state !== 'loading') && (this.state !== 'tracking')\n  }\n\n  csrfHeader() {\n    return up.protocol.csrfHeader()\n  }\n\n  csrfParam() {\n    return up.protocol.csrfParam()\n  }\n\n  // Returns a CSRF token if this request requires it\n  csrfToken() {\n    if (!this.isSafe() && !this.isCrossOrigin()) {\n      return up.protocol.csrfToken()\n    }\n  }\n\n  isCrossOrigin() {\n    return u.isCrossOrigin(this.url)\n  }\n\n  _extractResponseFromXHR() {\n    const responseAttrs = {\n      method: this.method,\n      url: this.url,\n      request: this,\n      xhr: this.xhr,\n      text: this.xhr.responseText,\n      status: this.xhr.status,\n      title: up.protocol.titleFromXHR(this.xhr),\n      target: up.protocol.targetFromXHR(this.xhr),\n      acceptLayer: up.protocol.acceptLayerFromXHR(this.xhr),\n      dismissLayer: up.protocol.dismissLayerFromXHR(this.xhr),\n      eventPlans: up.protocol.eventPlansFromXHR(this.xhr),\n      context: up.protocol.contextFromXHR(this.xhr),\n      expireCache: up.protocol.expireCacheFromXHR(this.xhr),\n      evictCache: up.protocol.evictCacheFromXHR(this.xhr),\n      fail: this.fail,\n    }\n\n    let methodFromResponse = up.protocol.methodFromXHR(this.xhr)\n\n    let urlFromResponse = up.protocol.locationFromXHR(this.xhr)\n    if (urlFromResponse) {\n      // On browsers other than IE11 we can ask the XHR object for its { responseURL },\n      // which contains the final URL after redirects. The server may also use the\n      // custom X-Up-Location header to signal the final URL for all browsers.\n      //\n      // Unfortunately we cannot ask the XHR object for its response method.\n      // The server may use the custom X-Up-Method for that. If that header is missing\n      // AND the URLs changed between request and response, we assume GET.\n      if (!u.matchURLs(this.url, urlFromResponse)) {\n        methodFromResponse ||= 'GET'\n      }\n\n      responseAttrs.url = urlFromResponse\n    }\n\n    if (methodFromResponse) {\n      responseAttrs.method = methodFromResponse\n    }\n\n    return new up.Response(responseAttrs)\n  }\n\n  _buildEventEmitter(args) {\n    // We prefer emitting request-related events on the targeted layer.\n    // This way listeners can observe event-related events on a given layer.\n    // This request has an optional { layer } attribute, which is used by\n    // EventEmitter.\n    return up.EventEmitter.fromEmitArgs(args, {\n      layer: this.layer,\n      request: this,\n      origin: this.origin\n    })\n  }\n\n  emit(...args) {\n    return this._buildEventEmitter(args).emit()\n  }\n\n  assertEmitted(...args) {\n    this._buildEventEmitter(args).assertEmitted()\n  }\n\n  get description() {\n    return this.method + ' ' + this.url\n  }\n\n  isPartOfSubtree(subtreeElements) {\n    if (!this.fragments || !subtreeElements) {\n      return false\n    }\n\n    subtreeElements = u.wrapList(subtreeElements)\n\n    return u.some(this.fragments, function(fragment) {\n      return u.some(subtreeElements, (subtreeElement) => subtreeElement.contains(fragment))\n    })\n  }\n\n  get age() {\n    return new Date() - this.builtAt\n  }\n\n  header(name) {\n    return this.headers[name]\n  }\n\n  _addAutoHeaders() {\n    // Add information about the response's intended use, so the server may\n    // customize or shorten its response.\n    for (let key of ['target', 'failTarget', 'mode', 'failMode', 'context', 'failContext']) {\n      this._addAutoHeader(\n        up.protocol.headerize(key),\n        this[key]\n      )\n    }\n\n    let csrfHeader, csrfToken\n    if ((csrfHeader = this.csrfHeader()) && (csrfToken = this.csrfToken())) {\n      this._addAutoHeader(csrfHeader, csrfToken)\n    }\n\n    this._addAutoHeader(up.protocol.headerize('version'), up.version)\n  }\n\n  _addAutoHeader(name, value) {\n    if (u.isMissing(value)) {\n      return\n    }\n\n    if (u.isOptions(value) || u.isArray(value)) {\n      value = u.safeStringifyJSON(value)\n    }\n    this.headers[name] = value\n  }\n\n  static tester(condition, { except } = {}) {\n    let testFn\n    if (u.isFunction(condition)) {\n      testFn = condition\n    } else if (condition instanceof this) {\n      testFn = (request) => condition === request\n    } else if (u.isString(condition)) {\n      let pattern = new up.URLPattern(condition)\n      testFn = (request) => pattern.test(request.url)\n    } else { // boolean, truthy/falsy values\n      testFn = (_request) => condition\n    }\n\n    if (except) {\n      return (request) => !up.cache.willHaveSameResponse(request, except) && testFn(request)\n    } else {\n      return testFn\n    }\n  }\n\n  /*-\n  An `up.Request` is also a promise for the server response.\n\n  A request is *fulfilled* with an `up.Response` when the server sends a response\n  with a status code of 2xx or [304](/skipping-rendering#rendering-nothing).\n\n  The promise will reject for responses with a failed HTTP status,\n  when the request is [aborted](/aborting-requests) or when there is\n  [network issue](/network-issues).\n\n  ### Example\n\n  ```js\n  try {\n    let response = await up.request('foo')\n    console.log('Successful response:', response.text)\n  } catch (error) {\n    if (error instanceof up.Request) {\n      console.log('Response with error code:', response.text)\n    } else {\n      console.log(\"Other error during request: \", error)\n    }\n  }\n  ```\n\n  @function up.Request#then\n  @param {Function(up.Response)} onFulfilled\n  @param {Function(up.Response|Error)} onRejected\n  @return {Promise<up.Response>}\n    A promise that fulfills when the server response was fully loaded.\n  @stable\n  */\n  static {\n    // A request is also a promise (\"thenable\") for its response.\n    u.delegate(this.prototype, ['then', 'catch', 'finally'], function() { return this.deferred })\n  }\n}\n", "const u = up.util\n\nup.Request.Cache = class Cache {\n\n  constructor() {\n    this.reset()\n  }\n\n  reset() {\n    this._varyInfo = {}\n    this._map = new Map()\n  }\n\n  _cacheKey(request) {\n    let influencingHeaders = this._getPreviousInfluencingHeaders(request)\n    let varyPart = u.flatMap(influencingHeaders, (headerName) => [headerName, request.header(headerName)])\n    return [request.description, ...varyPart].join(':')\n  }\n\n  _getPreviousInfluencingHeaders(request) {\n    // Returns a list of `Vary` header names that we have seen\n    // in responses to earlier requests with the same method and URL.\n    // This is how we know how fine we must segment our cache buckets.\n    return (this._varyInfo[request.description] ||= new Set())\n  }\n\n  get(request) {\n    request = this._wrap(request)\n    let cacheKey = this._cacheKey(request)\n    let cachedRequest = this._map.get(cacheKey)\n\n    if (cachedRequest) {\n      if (this._isUsable(cachedRequest)) {\n        return cachedRequest\n      } else {\n        this._map.delete(cacheKey)\n      }\n    }\n  }\n\n  get _capacity() {\n    return up.network.config.cacheSize\n\n  }\n\n  _isUsable(request) {\n    return request.age < up.network.config.cacheEvictAge\n  }\n\n  async put(request) {\n    request = this._wrap(request)\n    this._makeRoom()\n    let cacheKey = this._updateCacheKey(request)\n    this._map.set(cacheKey, request)\n  }\n\n  _updateCacheKey(request) {\n    let oldCacheKey = this._cacheKey(request)\n    let { response } = request\n\n    if (response) {\n      this._mergePreviousHeaderNames(request, response)\n      let newCacheKey = this._cacheKey(request)\n      this._renameMapKey(oldCacheKey, newCacheKey)\n      return newCacheKey\n    } else {\n      // If we haven't expanded our cache key above, use the old cache key.\n      return oldCacheKey\n    }\n  }\n\n  _renameMapKey(oldKey, newKey) {\n    if (oldKey !== newKey && this._map.has(oldKey)) {\n      this._map.set(newKey, this._map.get(oldKey))\n      this._map.delete(oldKey)\n    }\n  }\n\n  _mergePreviousHeaderNames(request, response) {\n    let headersInfluencingResponse = response.ownInfluncingHeaders\n    if (headersInfluencingResponse.length) {\n      let previousInfluencingHeaders = this._getPreviousInfluencingHeaders(request)\n      for (let headerName of headersInfluencingResponse) {\n        previousInfluencingHeaders.add(headerName)\n      }\n    }\n  }\n\n  alias(existingCachedRequest, newRequest) {\n    // Check if we have a cached copy of the given up.Request or request options.\n    // Only the cached copy will have the correct promise that will resolve to a response,\n    // even if all other properties match.\n    //\n    // Calling up.get() will also wrap an options object into an up.Request.\n    existingCachedRequest = this.get(existingCachedRequest)\n\n    // If the existing request is no longer in the cache, we have nothing to register an alias against.\n    if (!existingCachedRequest) return\n\n    newRequest = this._wrap(newRequest)\n\n    this.track(existingCachedRequest, newRequest, { force: true })\n    this.put(newRequest)\n\n    // If the user has passed us request options for `newRequest`, we have constructed\n    // the up.Request instance. Return it to the user, who has no other means of accessing it.\n    return newRequest\n  }\n\n  async track(existingRequest, newRequest, options = {}) {\n    newRequest.trackedRequest = existingRequest\n    newRequest.state = 'tracking'\n\n    let value = await u.always(existingRequest)\n\n    if (value instanceof up.Response) {\n      if (options.force || this._isCacheCompatible(existingRequest, newRequest)) {\n        // Remember that newRequest was settles from cache.\n        // This makes it a candidate for cache revalidation.\n        newRequest.fromCache = true\n\n        // Create a variant where response.request === newRequest.\n        // This is needed so up.render({ response }) can see the correct value for response.request.fromCache,\n        // which is true for the cache-missing request but false for the cache-hitting request.\n        value = u.variant(value, { request: newRequest })\n\n        // respondWith() will check response.ok and either fulfill or reject newRequest's promise.\n        newRequest.respondWith(value)\n\n        // Since this request object is never in the cache, we need\n        // to expire ourselves when otherRequest is expired.\n        u.delegate(newRequest, ['expired', 'state'], () => existingRequest)\n      } else {\n        // A supposed cache hit turns out to be a cache *miss* due to the response carrying\n        // an incompatible Vary header.\n        delete newRequest.trackedRequest\n        newRequest.state = 'new'\n\n        // The two requests turned out to not be cache hits for each other, as\n        // the response carried a Vary header. We will re-process newRequest as if it\n        // was just queued.\n        options.onIncompatible?.(newRequest)\n      }\n    } else {\n      // Copy terminal state like 'offline' or 'aborted'\n      newRequest.state = existingRequest.state\n      // If we did not get an up.Response, it must be an error\n      newRequest.deferred.reject(value)\n    }\n  }\n\n  willHaveSameResponse(existingRequest, newRequest) {\n    return existingRequest === newRequest || existingRequest === newRequest.trackedRequest\n  }\n\n  _delete(request) {\n    request = this._wrap(request)\n    let cacheKey = this._cacheKey(request)\n    this._map.delete(cacheKey)\n  }\n\n  evict(condition = true, testerOptions) {\n    this._eachMatch(condition, testerOptions,\n      // It is generally not a great idea to manipulate the list we're iterating over,\n      // but this._eachMatch() copies results before iterating.\n      (request) => this._delete(request)\n    )\n  }\n\n  expire(condition = true, testerOptions) {\n    this._eachMatch(condition, testerOptions,\n      // We need to force cached responses to be expired, regardless of their age.\n      // It may seem strange that we're setting an { expired } property on the *request*\n      // instead, but there are two good reasons:\n      //\n      // (1) The cache only holds request references. These are also promises for their\n      //     responses, but we only have sync access to the requests.\n      // (2) By marking in-flight requests as stale, this will also expire their responses\n      //     when they are eventually received.\n      (request) => request.expired = true\n    )\n  }\n\n  _makeRoom() {\n    while (this._map.size >= this._capacity) {\n      let oldestKey = this._map.keys().next().value\n      this._map.delete(oldestKey)\n    }\n  }\n\n  _eachMatch(condition = true, testerOptions, fn) {\n    let tester = up.Request.tester(condition, testerOptions)\n\n    // Copy results so evict() can delete from the list we're iterating over\n    let results = u.filter(this._map.values(), tester)\n\n    u.each(results, fn)\n  }\n\n  _isCacheCompatible(request1, request2) {\n    return this._cacheKey(request1) === this._cacheKey(request2)\n  }\n\n  _wrap(requestOrOptions) {\n    return u.wrapValue(up.Request, requestOrOptions)\n  }\n\n}\n", "const u = up.util\n\nup.Request.Queue = class Queue {\n\n  constructor() {\n    this.reset()\n  }\n\n  reset() {\n    this._queuedRequests = []\n    this._currentRequests = []\n    this._emittedLate = false\n  }\n\n  get allRequests() {\n    return this._currentRequests.concat(this._queuedRequests)\n  }\n\n  asap(request) {\n    request.runQueuedCallbacks()\n    u.always(request, responseOrError => this._onRequestSettled(request, responseOrError))\n\n    // When considering whether a request is \"slow\", we're measing the duration between request.queuedAt\n    // and the moment when the request gets settled. Note that when setSlowTimer() occurs, it will\n    // make its own check whether a request in the queue is considered slow.\n    this._scheduleSlowTimer(request)\n    this._queueRequest(request)\n    u.microtask(() => this._poke())\n  }\n\n  // Promotes a background request to a non-background request.\n  //\n  // Does not change the request's position in the queue, but foreground requests\n  // are prioritized when picking the next request under concurrency constraints.\n  //\n  // Does nothing if the given request is not a background request.\n  promoteToForeground(request) {\n    if (request.background) {\n      request.background = false\n\n      // If the request has been loading longer than its badResponseTime, we have\n      // already ignored its up:network:late event. Hence we schedule another check.\n      this._scheduleSlowTimer(request)\n    }\n  }\n\n  _scheduleSlowTimer(request) {\n    // In case the request was loading in the background before it was promoted to\n    // the foreground, the request may have less time left than request.badResponseTime.\n    let timeUntilLate = Math.max(request.badResponseTime - request.age, 0)\n\n    // We may have multiple timers running concurrently.\n    // Nonethess we don't emit duplicate events due to the check in @_checkLate().\n    u.timer(timeUntilLate, () => this._checkLate())\n  }\n\n  _getMaxConcurrency() {\n    return u.evalOption(up.network.config.concurrency)\n  }\n\n  _hasConcurrencyLeft() {\n    const maxConcurrency = this._getMaxConcurrency()\n    return (maxConcurrency === -1) || (this._currentRequests.length < maxConcurrency)\n  }\n\n  isBusy() {\n    return this._currentRequests.length > 0 || this._queuedRequests.length > 0\n  }\n\n  _queueRequest(request) {\n    // Queue the request at the end of our FIFO queue.\n    this._queuedRequests.push(request)\n  }\n\n  _pluckNextRequest() {\n    // We always prioritize foreground requests over background requests.\n    // Only when there is no foreground request left in the queue we will send a background request.\n    // Note that if a queued preload request is requested without { preload: true } we will\n    // promote it to the foreground (see @promoteToForeground()).\n    let request = u.find(this._queuedRequests, request => !request.background)\n    request ||= this._queuedRequests[0]\n    return u.remove(this._queuedRequests, request)\n  }\n\n  _sendRequestNow(request) {\n    if (request.load()) {\n      this._currentRequests.push(request)\n    }\n  }\n\n  _onRequestSettled(request, responseOrError) {\n    // If the request was aborted before it was sent, it still sits in @queuedRequests.\n    u.remove(this._currentRequests, request) || u.remove(this._queuedRequests, request)\n\n    if ((responseOrError instanceof up.Response) && responseOrError.ok) {\n      up.network.registerAliasForRedirect(request, responseOrError)\n    }\n\n    // Check if we can emit up:network:recover after a previous up:network:late event.\n    this._checkLate()\n\n    u.microtask(() => this._poke())\n  }\n\n  _poke() {\n    let request\n    if (this._hasConcurrencyLeft() && (request = this._pluckNextRequest())) {\n      return this._sendRequestNow(request)\n    }\n  }\n\n  // Aborting a request will cause its promise to reject, which will also uncache it\n  abort(...args) {\n    let options = u.extractOptions(args)\n    let { except, reason, logOnce } = options\n\n    let conditions = args[0] ?? true\n\n    let tester = up.Request.tester(conditions, { except })\n    for (let list of [this._currentRequests, this._queuedRequests]) {\n      const abortableRequests = u.filter(list, tester)\n      for (let abortableRequest of abortableRequests) {\n        if (logOnce) {\n          up.puts(...logOnce)\n          logOnce = null\n        }\n        abortableRequest.abort({ reason })\n        // Avoid changing the list we're iterating over.\n        u.remove(list, abortableRequest)\n      }\n    }\n  }\n\n  _checkLate() {\n    const currentLate = this._isLate()\n\n    if (this._emittedLate !== currentLate) {\n      this._emittedLate = currentLate\n\n      if (currentLate) {\n        up.emit('up:network:late', { log: 'Server is slow to respond' })\n      } else {\n        up.emit('up:network:recover', { log: 'Slow requests were loaded' })\n      }\n    }\n  }\n\n  _isLate() {\n    const allForegroundRequests = u.reject(this.allRequests, 'background')\n\n    // If badResponseTime is 200, we're scheduling the _checkLate() timer after 200 ms.\n    // The request must be slow when _checkLate() is called, or we will never look\n    // at it again. Since the JavaScript setTimeout() is inaccurate, we allow a request\n    // to \"be slow\" a few ms earlier than actually configured.\n    const timerTolerance = 1\n\n    return u.some(allForegroundRequests, (request) => request.age >= (request.badResponseTime - timerTolerance))\n  }\n}\n", "const u = up.util\nconst e = up.element\n\n// In HTML5, forms may only have a GET or POST method.\n// There were several proposals to extend this to PUT, DELETE, etc.\n// but they have all been abandoned.\nconst HTML_FORM_METHODS = ['GET', 'POST']\n\nup.Request.FormRenderer = class FormRenderer {\n\n  constructor(request) {\n    this._request = request\n  }\n\n  buildAndSubmit() {\n    this.params = u.copy(this._request.params)\n    let action = this._request.url\n    let { method } = this._request\n\n    // GET forms cannot have an URL with a query section in their [action] attribute.\n    // The query section would be overridden by the serialized input values on submission.\n    const paramsFromQuery = up.Params.fromURL(action)\n    this.params.addAll(paramsFromQuery)\n    action = up.Params.stripURL(action)\n\n    if (!u.contains(HTML_FORM_METHODS, method)) {\n      // HTML forms can only have a GET or POST method. Other HTTP methods will be converted\n      // to a `POST` request and carry their original method as a `_method` parameter.\n      method = up.protocol.wrapMethod(method, this.params)\n    }\n\n    this._form = e.affix(document.body, 'form.up-request-loader', { method, action })\n\n    // We only need an [enctype] attribute if the user has explicitly\n    // requested one. If none is given, we can use the browser's default\n    // [enctype]. Binary values cannot be sent by this renderer anyway, so\n    // we don't need to default to multipart/form-data in this case.\n    let contentType = this._request.contentType\n    if (contentType) {\n      this._form.setAttribute('enctype', contentType)\n    }\n\n    let csrfParam, csrfToken\n    if ((csrfParam = this._request.csrfParam()) && (csrfToken = this._request.csrfToken())) {\n      this.params.add(csrfParam, csrfToken)\n    }\n\n    // @params will be undefined for GET requests, since we have already\n    // transfered all params to the URL during normalize().\n    u.each(this.params.toArray(), this._addField.bind(this))\n\n    up.browser.submitForm(this._form)\n  }\n\n  _addField(attrs) {\n    e.affix(this._form, 'input[type=hidden]', attrs)\n  }\n}\n", "const CONTENT_TYPE_URL_ENCODED = 'application/x-www-form-urlencoded'\nconst CONTENT_TYPE_FORM_DATA = 'multipart/form-data'\n\nconst u = up.util\n\nup.Request.XHRRenderer = class XHRRenderer {\n\n  constructor(request) {\n    this._request = request\n  }\n\n  buildAndSend(handlers) {\n    const xhr = this._request.xhr\n\n    // We copy params since we will modify them below.\n    // This would confuse API clients and cache key logic in up.network.\n    this._params = u.copy(this._request.params)\n\n    // IE11 explodes it we're setting an undefined timeout property\n    if (this._request.timeout) {\n      xhr.timeout = this._request.timeout\n    }\n\n    // The XMLHttpRequest method must be opened before we can add headers to it.\n    xhr.open(this._getMethod(), this._request.url)\n\n    // The { contentType } will be missing in case of a FormData payload.\n    // In this case the browser will choose a content-type with MIME boundary,\n    // like: multipart/form-data; boundary=----WebKitFormBoundaryHkiKAbOweEFUtny8\n    let contentType = this._getContentType()\n    if (contentType) {\n      xhr.setRequestHeader('Content-Type', contentType)\n    }\n\n    for (let headerName in this._request.headers) {\n      let headerValue = this._request.headers[headerName]\n      xhr.setRequestHeader(headerName, headerValue)\n    }\n\n    Object.assign(xhr, handlers)\n    xhr.send(this._getPayload())\n  }\n\n  _getMethod() {\n    // By default HTTP methods other than `GET` or `POST` will be converted into a `POST`\n    // request and carry their original method as a `_method` parameter. This is to\n    // [prevent unexpected redirect behavior](https://makandracards.com/makandra/38347)\n    // if the server redirects with 302 (Rails default) instead of 303.\n    let method = this._request.method\n    if (this._request.wrapMethod && !this._request.will302RedirectWithGET()) {\n      method = up.protocol.wrapMethod(method, this._params)\n    }\n    return method\n  }\n\n  _getContentType() {\n    this._finalizePayload()\n    return this._contentType\n  }\n\n  _getPayload() {\n    this._finalizePayload()\n    return this._payload\n  }\n\n  _finalizePayload() {\n    this._payload = this._request.payload\n    this._contentType = this._request.contentType\n\n    // (1) If a user sets { payload } we also expect them to set a { contentType }.\n    //     In that case we don't change anything.\n    // (2) We don't send a { contentType } or { payload } for GET requests.\n    if (!this._payload && this._request.allowsPayload()) {\n\n      // Determine the effective Content-Type by looking at our params values.\n      if (!this._contentType) {\n        this._contentType = this._params.hasBinaryValues() ? CONTENT_TYPE_FORM_DATA : CONTENT_TYPE_URL_ENCODED\n      }\n\n      // Serialize our payload\n      if (this._contentType === CONTENT_TYPE_FORM_DATA) {\n        // The effective Content-Type header will look like\n        // multipart/form-data; boundary=----WebKitFormBoundaryHkiKAbOweEFUtny8\n        // When we send a FormData payload the browser will automatically\n        // chooose a boundary and set the payload.\n        this._contentType = null\n        this._payload = this._params.toFormData()\n      } else {\n        // Only in form submissions %-encoded spaces are sent as a plus characater (\"+\")\n        this._payload = this._params.toQuery().replace(/%20/g, '+')\n      }\n    }\n  }\n\n  static {\n    u.memoizeMethod(this.prototype, {\n      _finalizePayload: true,\n      _getMethod: true,\n    })\n  }\n}\n", "const u = up.util\n\n/*-\nA response to an [HTTP request](/up.request).\n\n### Example\n\n```js\nup.request('/foo').then(function(response) {\n  console.log(response.status) // 200\n  console.log(response.text)   // \"<html><body>...\"\n})\n```\n\n@class up.Response\n@parent up.network\n*/\nup.Response = class Response extends up.Record {\n\n  /*-\n  The HTTP method used for the request that produced this response.\n\n  This is usually the HTTP method used by the initial request, but if the server\n  redirected multiple requests may have been involved. In this case this property reflects\n  the method used by the last request.\n\n  If the response's URL changed from the request's URL,\n  Unpoly will assume a redirect and set the method to `GET`.\n  Also see the `X-Up-Method` header.\n\n  @property up.Response#method\n  @param {string} method\n  @stable\n  */\n\n  /*-\n  The URL from which the response was loaded.\n\n  This is usually the [requested URL](/up.Request.prototype.url), or the final URL after the server redirected.\n\n  @property up.Response#url\n  @param {string} url\n  @stable\n  */\n\n  /*-\n  The response body as a `string`.\n\n  @property up.Response#text\n  @param {string} text\n  @stable\n  */\n\n  /*-\n  The response's\n  [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n  as a `number`.\n\n  A successful response will usually have a `200` or `201' status code.\n\n  @property up.Response#status\n  @param {number} status\n  @stable\n  */\n\n  /*-\n  The original [request](/up.Request) that triggered this response.\n\n  @property up.Response#request\n  @param {up.Request} request\n  @internal\n  */\n\n  /*-\n  The [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\n  object that was used to create this response.\n\n  @property up.Response#xhr\n  @param {XMLHttpRequest} xhr\n  @experimental\n  */\n\n  /*-\n  A [document title pushed by the server](/X-Up-Title).\n\n  If the server pushed no title via HTTP header, this will be `undefined`.\n\n  @property up.Response#title\n  @param {string|undefined} [title]\n    The decoded title.\n  @experimental\n  */\n\n  /*-\n  A [render target pushed by the server](/X-Up-Target).\n\n  If the server pushed no title via HTTP header, this will be `undefined`.\n\n  @property up.Response#target\n  @param {string|undefined} [target]\n    The decoded target.\n  @stable\n  */\n\n  /*-\n  Changes to the current [context](/context) as [set by the server](/X-Up-Context).\n\n  @property up.Response#context\n  @experimental\n  */\n\n  keys() {\n    return [\n      'method',\n      'url',\n      'text',\n      'status',\n      'request',\n      'xhr', // optional\n      'target',\n      'title',\n      'acceptLayer',\n      'dismissLayer',\n      'eventPlans',\n      'context',\n      'expireCache',\n      'evictCache',\n      'headers', // custom headers to for synthetic reponses without { xhr } property\n      'loadedAt',\n      'fail',\n    ]\n  }\n\n  defaults() {\n    return {\n      headers: {},\n      loadedAt: new Date()\n    }\n  }\n\n  /*-\n  Returns whether the server responded with a 2xx HTTP status.\n\n  @property up.Response#ok\n  @param {boolean} ok\n  @stable\n  */\n  get ok() {\n    return !u.evalOption(this.fail ?? up.network.config.fail, this)\n  }\n\n  /*-\n  Response whether the response has an empty body text.\n\n  There are some cases where the server might send us an empty body:\n\n  - HTTP status `304 Not Modified` (especially when reloading)\n  - HTTP status `204 No Content`\n  - Header `X-Up-Target: :none`\n  - Header `X-Up-Accept-Layer` or `X-Up-Dismiss-Layer`, although the server\n    may send an optional body in case the response is used on the root layer.\n\n  @property up.Response#none\n  @param {boolean} none\n  @internal\n  */\n  get none() {\n    return !this.text\n  }\n\n  isCacheable() {\n    // (1) Uncache responses that have failed. We have no control over the server,\n    //     and another request with the same properties may succeed.\n    // (2) Uncache responses that have an empty body, in particular 304 Not Modified.\n    //     Another request with a different ETag may produce a body.\n    return this.ok && !this.none\n  }\n\n  /*-\n  Returns the HTTP header value with the given name.\n\n  The search for the header is case-insensitive.\n\n  Returns `undefined` if the given header name was not included in the response.\n\n  @function up.Response#header\n  @param {string} name\n  @return {string|undefined}\n    The value of the header.\n  @stable\n  */\n  header(name) {\n    return this.headers[name] || this.xhr?.getResponseHeader(name)\n  }\n\n  get ownInfluncingHeaders() {\n    let influencingHeaders = up.protocol.influencingHeadersFromResponse(this)\n    return u.filter(influencingHeaders, (headerName) => this.request.header(headerName))\n  }\n\n  /*-\n  The response's [content-type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type).\n\n  @property up.Response#contentType\n  @param {string} contentType\n  @experimental\n  */\n  get contentType() {\n    return this.header('Content-Type')\n  }\n\n  /*-\n  @property up.Response#cspNonces\n  @param {Array<string>} cspNonces\n  @internal\n  */\n  get cspNonces() {\n    return up.protocol.cspNoncesFromHeader(this.header('Content-Security-Policy') || this.header('Content-Security-Policy-Report-Only'))\n  }\n\n  /*-\n  The last modification time of the response's underlying content.\n\n  This is extracted from the `Last-Modified` header sent by the server.\n\n  @property up.Response#lastModified\n  @param {Date|undefined} lastModified\n  @experimental\n  */\n  get lastModified() { // eslint-disable-line getter-return\n    let header = this.header('Last-Modified')\n    if (header) {\n      return new Date(header)\n    }\n  }\n\n  /*-\n  The response's [ETag](https://en.wikipedia.org/wiki/HTTP_ETag).\n\n  This is extracted from the `ETag` header sent by the server.\n\n  @property up.Response#etag\n  @param {string|undefined} etag\n  @experimental\n  */\n  get etag() {\n    return this.header('ETag')\n  }\n\n  /*-\n  The response body parsed as a JSON string.\n\n  The parsed JSON object is cached with the response object,\n  so multiple accesses will call `JSON.parse()` only once.\n\n  ### Example\n\n      response = await up.request('/profile.json')\n      console.log(\"User name is \" + response.json.name)\n\n  @property up.Response#json\n  @param {Object} json\n  @stable\n  */\n  get json() {\n    return this.parsedJSON ||= JSON.parse(this.text)\n  }\n\n  /*-\n  The number of milliseconds since this response was received.\n\n  @property up.Response#age\n  @param {number} age\n  @experimental\n  */\n  get age() {\n    let now = new Date()\n    return now - this.loadedAt\n  }\n\n  /*-\n  Returns whether this [cached](/caching) response has expired.\n\n  Content rendered from an expired response is [revalidated](/caching#revalidation) with the server.\n\n  @property up.Response#expired\n  @param {boolean} expired\n  @experimental\n  */\n  get expired() {\n    return this.age > up.network.config.cacheExpireAge ||\n      // When the user calls up.cache.expire() it will expire requests, not responses.\n      // Hence we need to delegate to our request.\n      this.request.expired\n  }\n\n  get description() {\n    return `HTTP ${this.status} response to ${this.request.description}`\n  }\n\n}\n", "const u = up.util\nconst e = up.element\n\nup.ResponseDoc = class ResponseDoc {\n\n  constructor({ document, fragment, content, target, origin, cspNonces, match }) {\n    if (document) {\n      this._parseDocument(document)\n    } else if (fragment) {\n      this._parseFragment(fragment)\n    } else {\n      // Parsing { inner } is the last option we try. It should always succeed in case someone\n      // tries `up.layer.open()` without any args. Hence we default the innerHTML to an empty string.\n      this._parseContent(content || '', target)\n    }\n\n\n\n    this._cspNonces = cspNonces\n\n    if (origin) {\n      let originSelector = up.fragment.tryToTarget(origin)\n      if (originSelector) {\n        this._rediscoveredOrigin = this.select(originSelector)\n      }\n    }\n\n    this._match = match\n  }\n\n  _parseDocument(document) {\n    document = this._parse(document, e.createBrokenDocumentFromHTML)\n\n    // Remember that we need to fix <script>, <noscript> and media elements later.\n    // We could fix these elements right now for the entire document, but since we will only use\n    // a fragment, this would cause excessive work.\n    this._isDocumentBroken = true\n\n    this._useParseResult(document)\n  }\n\n  _parseFragment(fragment) {\n    fragment = this._parse(fragment, e.createFromHTML)\n    this._useParseResult(fragment)\n  }\n\n  _parseContent(content, target) {\n    if(!target) up.fail(\"must pass a { target } when passing { content }\")\n\n    target = u.map(up.fragment.parseTargetSteps(target), 'selector').join()\n\n    // Conjure an element that will later match target in @select()\n    const matchingElement = e.createFromSelector(target)\n\n    if (u.isString(content)) {\n      // Don't use e.createFromHTML() here, since content may be a text node.\n      matchingElement.innerHTML = content\n    } else {\n      matchingElement.appendChild(content)\n    }\n\n    this._useParseResult(matchingElement)\n  }\n\n  _parse(value, parseFn) {\n    if (u.isString(value)) {\n      value = parseFn(value)\n    }\n    return value\n  }\n\n  _useParseResult(node) {\n    if (node instanceof Document) {\n      this._document = node\n    } else {\n      // We're creating a faux document to append our fragment root to.\n      // This way, when a step selects the fragment root it will no longer be available\n      // for selection by a later step.\n      this._document = document.createElement('up-document')\n      this._document.append(node)\n      this._document.documentElement = node\n    }\n  }\n\n  rootSelector() {\n    return up.fragment.toTarget(this._document.documentElement)\n  }\n\n  get title() {\n    // We get it from the <head> instead of this._document.title.\n    // We want to distinguish between a parsed document that does not have a <head> or <title>\n    // and a given, but empty title.\n    return this._fromHead(this._getTitleText)\n  }\n\n  /*\n  Returns the root's `<head>`, if it has one.\n\n  Returns `undefined` if the root has no contentful `<head>`, e.g. if the root was\n  parsed from a fragment, or from a docuemnt without a `<head>` element.\n  */\n  // eslint-disable-next-line getter-return\n  _getHead() {\n    // The root may be a `Document` (which always has a `#head`, even if it wasn't present in the HTML)\n    // or an `Element` (which never has a `#head`).\n    let { head } = this._document\n\n    // DocumentParser also produces a document with a <head>, even if the initial HTML\n    // has no <head> element. To work around this we consider the head to be missing\n    // if it has no child nodes.\n    if (head && head.childNodes.length > 0) {\n      return head\n    }\n  }\n\n  _fromHead(fn) {\n    let head = this._getHead()\n    return head && fn(head)\n  }\n\n  get metaTags() {\n    return this._fromHead(up.history.findMetaTags)\n  }\n\n  get assets() {\n    return this._fromHead(up.script.findAssets)\n  }\n\n  _getTitleText(head) {\n    // We must find inside the head ('head title') instead of 'title'\n    // so we won't match the <title> of an inline SVG image.\n    return head.querySelector('title')?.textContent\n  }\n\n  // (1) Selects a single fragment with the given selector.\n  // (2) Supports custom Unpoly selectors like :has() or :main.\n  // (3) Supports origin-aware lookup priorities.\n  // (4) Returns undefined if there is no match.\n  select(selector) {\n    let finder = new up.FragmentFinder({\n      selector: selector,\n      origin: this._rediscoveredOrigin,\n      document: this._document,\n      match: this._match,\n    })\n    return finder.find()\n  }\n\n  selectSteps(steps) {\n    return steps.filter((step) => {\n      return this._trySelectStep(step) || this._cannotMatchStep(step)\n    })\n  }\n\n  commitSteps(steps) {\n    // If multiple steps want to match the same new element, the first step will remain in the left.\n    // This will happen when multiple layers have the same hungry element with [up-if-layer=any].\n    return steps.filter((step) => this.commitElement(step.newElement))\n  }\n\n  _trySelectStep(step) {\n    if (step.newElement) {\n      return true\n    }\n\n    // Look for a match in the new content.\n    // The new content has no layers, so no { layer } option here.\n    let newElement = this.select(step.selector)\n\n    if (!newElement) {\n      return\n    }\n\n    let { selectEvent } = step\n    if (selectEvent) {\n      selectEvent.newFragment = newElement\n      selectEvent.renderOptions = step.originalRenderOptions\n      up.emit(step.oldElement, selectEvent, { callback: step.selectCallback })\n      if (selectEvent.defaultPrevented) {\n        return\n      }\n    }\n\n    step.newElement = newElement\n    return true\n  }\n\n  _cannotMatchStep(step) {\n    if (!step.maybe) {\n      // An error message will be chosen by up.Change.FromContent\n      throw new up.CannotMatch()\n    }\n  }\n\n  commitElement(element) {\n    if (this._document.contains(element)) {\n      // If the user doesn't want to run scripts in the new fragment, we disable all <script> elements.\n      // While <script> elements parsed by `DOMParser` are inert anyway, we also parse HTML through\n      // other methods, which do create non-inert <script> elements.\n      if (!up.fragment.config.runScripts) {\n        up.script.disableSubtree(element)\n      }\n\n      // Ensure that the element cannot be matched for subsequent selects().\n      element.remove()\n      return true\n    }\n  }\n\n  finalizeElement(element) {\n    // Rewrite per-request CSP nonces to match that of the current page.\n    up.NonceableCallback.adoptNonces(element, this._cspNonces)\n\n    // Now that these elements is attached to the current document, we can re-create them\n    // in the correct browsing context.\n    if (this._isDocumentBroken) {\n      let brokenElements = e.subtree(element, ':is(noscript,script,audio,video):not(.up-keeping, .up-keeping *)')\n      u.each(brokenElements, e.fixParserDamage)\n    }\n  }\n\n  static {\n    // Cache since multiple plans will query this.\n    u.memoizeMethod(this.prototype, {\n      _getHead: true,\n    })\n  }\n\n}\n", "const e = up.element\nconst u = up.util\n\nup.RevealMotion = class RevealMotion {\n\n  constructor(element, options = {}) {\n    this._element = element\n    this._viewport = e.get(options.viewport) || up.viewport.get(this._element)\n    this._obstructionsLayer = up.layer.get(this._viewport)\n    this._behavior = options.behavior ?? 'instant'\n\n    const viewportConfig = up.viewport.config\n    this._snap    = options.snap    ?? options.revealSnap    ?? viewportConfig.revealSnap\n    this._padding = options.padding ?? options.revealPadding ?? viewportConfig.revealPadding\n    this._top     = options.top     ?? options.revealTop     ?? viewportConfig.revealTop\n    this._max     = options.max     ?? options.revealMax     ?? viewportConfig.revealMax\n\n    this._topObstructionSelector = viewportConfig.selector('fixedTopSelectors')\n    this._bottomObstructionSelector = viewportConfig.selector('fixedBottomSelectors')\n  }\n\n  start() {\n    const viewportRect = this._getViewportRect(this._viewport)\n    const elementRect = up.Rect.fromElement(this._element)\n    if (this._max) {\n      const maxPixels =  u.evalOption(this._max, this._element)\n      elementRect.height = Math.min(elementRect.height, maxPixels)\n    }\n\n    this._addPadding(elementRect)\n    this._substractObstructions(viewportRect)\n\n    // Cards test (topics dropdown) throw an error when we also fail at zero\n    if (viewportRect.height < 0) {\n      up.fail('Viewport has no visible area')\n    }\n\n    const originalScrollTop = this._viewport.scrollTop\n    let newScrollTop = originalScrollTop\n\n    if (this._top || (elementRect.height > viewportRect.height)) {\n      // Element is either larger than the viewport,\n      // or the user has explicitly requested for the element to align at top\n      // => Scroll the viewport so the first element row is the first viewport row\n      const diff = elementRect.top - viewportRect.top\n      newScrollTop += diff\n    } else if (elementRect.top < viewportRect.top) {\n      // Element fits within viewport, but sits too high\n      // => Scroll up (reduce scrollY), so the element comes down\n      newScrollTop -= (viewportRect.top - elementRect.top)\n    } else if (elementRect.bottom > viewportRect.bottom) {\n      // Element fits within viewport, but sits too low\n      // => Scroll down (increase scrollY), so the element comes up\n      newScrollTop += (elementRect.bottom - viewportRect.bottom)\n    }\n    else {\n      // Element is fully visible within viewport.\n      // Do nothing.\n    }\n\n    if (u.isNumber(this._snap) && (newScrollTop < this._snap) && (elementRect.top < (0.5 * viewportRect.height))) {\n      newScrollTop = 0\n    }\n\n    if (newScrollTop !== originalScrollTop) {\n      this._viewport.scrollTo({ top: newScrollTop, behavior: this._behavior })\n    }\n  }\n\n  _getViewportRect() {\n    if (up.viewport.isRoot(this._viewport)) {\n      // Other than an element with overflow-y, the document viewport\n      // stretches to the full height of its contents. So we create a viewport\n      // sized to the usuable screen area.\n      return new up.Rect({\n        left: 0,\n        top: 0,\n        width: up.viewport.rootWidth(),\n        height: up.viewport.rootHeight()\n      })\n    } else {\n      return up.Rect.fromElement(this._viewport)\n    }\n  }\n\n  _addPadding(elementRect) {\n    elementRect.top -= this._padding\n    elementRect.height += 2 * this._padding\n  }\n\n  _selectObstructions(selector) {\n    let elements = up.fragment.all(selector, { layer: this._obstructionsLayer })\n    return u.filter(elements, e.isVisible)\n  }\n\n  _substractObstructions(viewportRect) {\n    for (let obstruction of this._selectObstructions(this._topObstructionSelector)) {\n      let obstructionRect = up.Rect.fromElement(obstruction)\n      let diff = obstructionRect.bottom - viewportRect.top\n      if (diff > 0) {\n        viewportRect.top += diff\n        viewportRect.height -= diff\n      }\n    }\n\n    for (let obstruction of this._selectObstructions(this._bottomObstructionSelector)) {\n      let obstructionRect = up.Rect.fromElement(obstruction)\n      let diff = viewportRect.bottom - obstructionRect.top\n      if (diff > 0) {\n        viewportRect.height -= diff\n      }\n    }\n  }\n}\n", "const u = up.util\nconst CSS_HAS_SUFFIX_PATTERN = /:has\\(([^)]+)\\)$/\n\nup.Selector = class Selector {\n\n  constructor(selector, elementOrDocument, options = {}) {\n    this._filters = []\n\n    if (!options.destroying) {\n      this._filters.push(up.fragment.isNotDestroying)\n    }\n\n    // If we're given an element that is detached *or* from another document\n    // (think up.ResponseDoc) we are not filtering by element layer.\n    let matchingInExternalDocument = elementOrDocument && !document.contains(elementOrDocument)\n\n    let expandTargetLayer\n\n    if (matchingInExternalDocument || options.layer === 'any') {\n      expandTargetLayer = up.layer.root\n    } else {\n      // Some up.fragment function center around an element, like closest() or matches().\n      options.layer ??= u.presence(elementOrDocument, u.isElement)\n      this._layers = up.layer.getAll(options)\n\n      if (!this._layers.length) throw new up.CannotMatch([\"Unknown layer: %o\", options.layer])\n\n      this._filters.push(match => u.some(this._layers, layer => layer.contains(match)))\n      expandTargetLayer = this._layers[0]\n\n    }\n\n    let expandedTargets = up.fragment.expandTargets(selector, {...options, layer: expandTargetLayer})\n\n    this._selectors = expandedTargets.map((target) => {\n      if (!up.browser.canHasSelector()) {\n        target = target.replace(CSS_HAS_SUFFIX_PATTERN, (match, descendantSelector) => {\n          this._filters.push(element => element.querySelector(descendantSelector))\n          return ''\n        })\n      }\n\n      return target || '*'\n    })\n\n    // If the user has set config.mainTargets = [] then a selector :main\n    // will resolve to an empty array.\n    this._unionSelector = this._selectors.join() || 'match-none'\n  }\n\n  matches(element) {\n    return element.matches(this._unionSelector) && this._passesFilter(element)\n  }\n\n  closest(element) {\n    let parentElement\n    if (this.matches(element)) {\n      return element\n    } else if (parentElement = element.parentElement) {\n      return this.closest(parentElement)\n    }\n  }\n\n  _passesFilter(element) {\n    return u.every(this._filters, filter => filter(element))\n  }\n\n  descendants(root = document) {\n    // There's a requirement that prior selectors must match first.\n    // The background here is that up.fragment.config.mainTargets may match multiple\n    // elements in a layer (like .container and body), but up.fragment.get(':main') should\n    // prefer to match .container.\n    //\n    // To respect this priority we do not join @selectors into a single, comma-separated\n    // CSS selector, but rather make one query per selector and concatenate the results.\n    const results = u.flatMap(this._selectors, selector => root.querySelectorAll(selector))\n    return u.filter(results, element => this._passesFilter(element))\n  }\n\n  subtree(root) {\n    const results = []\n\n    if (!(root instanceof Document) && this.matches(root)) {\n      results.push(root)\n    }\n    results.push(...this.descendants(root))\n    return results\n  }\n}\n", "const u = up.util\nconst e = up.element\n\nup.Tether = class Tether {\n\n  constructor(options) {\n    up.migrate.handleTetherOptions?.(options)\n    this._anchor = options.anchor\n    this._align = options.align\n    this._position = options.position\n\n    this._alignAxis = (this._position === 'top') || (this._position === 'bottom') ? 'horizontal' : 'vertical'\n\n    this._viewport = up.viewport.get(this._anchor)\n    // The document viewport is <html> on some browsers, and we cannot attach children to that.\n    this.parent = this._viewport === e.root ? document.body : this._viewport\n\n    // If the offsetParent is within the viewport (or is the viewport) we can simply\n    // `position: absolute` and it will move as the viewport scrolls, without JavaScript.\n    // If not however, we have no choice but to move it on every scroll event.\n    this._syncOnScroll = !this._viewport.contains(this._anchor.offsetParent)\n  }\n\n  start(element) {\n    this._element = element\n    this._element.style.position = 'absolute'\n    this._setOffset(0, 0)\n    this.sync()\n    this._changeEventSubscription('on')\n  }\n\n  stop() {\n    this._changeEventSubscription('off')\n  }\n\n  _changeEventSubscription(fn) {\n    let doScheduleSync = this._scheduleSync.bind(this)\n    up[fn](window, 'resize', doScheduleSync)\n    if (this._syncOnScroll) { up[fn](this._viewport, 'scroll', doScheduleSync) }\n  }\n\n  _scheduleSync() {\n    clearTimeout(this.syncTimer)\n    return this.syncTimer = u.task(this.sync.bind(this))\n  }\n\n  isDetached() {\n    return !this.parent.isConnected || !this._anchor.isConnected\n  }\n\n  sync() {\n    const elementBox = this._element.getBoundingClientRect()\n\n    const elementMargin = {\n      top:    e.styleNumber(this._element, 'marginTop'),\n      right:  e.styleNumber(this._element, 'marginRight'),\n      bottom: e.styleNumber(this._element, 'marginBottom'),\n      left:   e.styleNumber(this._element, 'marginLeft')\n    }\n\n    const anchorBox = this._anchor.getBoundingClientRect()\n\n    let left\n    let top\n\n    switch (this._alignAxis) {\n      case 'horizontal': { // position is 'top' or 'bottom'\n        switch (this._position) {\n          case 'top':\n            top = anchorBox.top - elementMargin.bottom - elementBox.height\n            break\n            // element\n            // -------\n            // margin\n            // -------\n            // anchor\n          case 'bottom':\n            top = anchorBox.top + anchorBox.height + elementMargin.top\n            break\n        }\n            // anchor\n            // ------\n            // margin\n            // ------\n            // element\n        switch (this._align) {\n          case 'left':\n            // anchored to anchor's left, grows to the right\n            left = anchorBox.left + elementMargin.left\n            break\n            // mg | element\n            // ------------\n            // anchor\n          case 'center':\n            // anchored to anchor's horizontal center, grows equally to left/right\n            left = anchorBox.left + (0.5 * (anchorBox.width - elementBox.width))\n            break\n            // e l e m e n t\n            // -------------\n            //    anchor\n          case 'right':\n            // anchored to anchor's right, grows to the left\n            left = (anchorBox.left + anchorBox.width) - elementBox.width - elementMargin.right\n            break\n            // element | mg\n            // ------------\n            //       anchor\n        }\n        break\n      }\n      case 'vertical': { // position is 'left' or 'right'\n        switch (this._align) {\n          case 'top':\n            // anchored to the top, grows to the bottom\n            top = anchorBox.top + elementMargin.top\n            break\n            //  margin | anchor\n            // --------|\n            // element |\n          case 'center':\n            // anchored to anchor's vertical center, grows equally to left/right\n            top = anchorBox.top + (0.5 * (anchorBox.height - elementBox.height))\n            break\n            //  ele |\n            //  men | anchor\n            //    t |\n          case 'bottom':\n            // anchored to the bottom, grows to the top\n            top = (anchorBox.top + anchorBox.height) - elementBox.height - elementMargin.bottom\n            break\n            // element |\n            // ------- |\n            //  margin | anchor\n        }\n        switch (this._position) {\n          case 'left':\n            left = anchorBox.left - elementMargin.right - elementBox.width\n            break\n            // element | margin | anchor\n          case 'right':\n            left = anchorBox.left + anchorBox.width + elementMargin.left\n            break\n          // anchor | margin | element\n        }\n        break\n      }\n    }\n\n    if (u.isDefined(left) || u.isDefined(top)) {\n      this._moveTo(left, top)\n    } else {\n      up.fail('Invalid tether constraints: %o', this._describeConstraints())\n    }\n  }\n\n  _describeConstraints() {\n    return { position: this._position, align: this._align }\n  }\n\n  _moveTo(targetLeft, targetTop) {\n    const elementBox = this._element.getBoundingClientRect()\n    this._setOffset(\n      (targetLeft - elementBox.left) + this.offsetLeft,\n      (targetTop - elementBox.top) + this.offsetTop\n    )\n  }\n\n  _setOffset(left, top) {\n    this.offsetLeft = left\n    this.offsetTop = top\n    e.setStyle(this._element, { left, top })\n  }\n}\n", "const u = up.util\n\nup.URLPattern = class URLPattern {\n\n  constructor(fullPattern, normalizeURL = u.normalizeURL) {\n    this._normalizeURL = normalizeURL\n    this._groups = []\n\n    const positiveList = []\n    const negativeList = []\n\n    for (let pattern of u.parseTokens(fullPattern)) {\n      if (pattern[0] === '-') {\n        negativeList.push(pattern.substring(1))\n      } else {\n        positiveList.push(pattern)\n      }\n    }\n\n    this._positiveRegexp = this._buildRegexp(positiveList, true)\n    this._negativeRegexp = this._buildRegexp(negativeList, false)\n  }\n\n  _buildRegexp(list, capture) {\n    if (!list.length) { return }\n\n    list = list.map((url) => {\n      // If the current browser location is multiple directories deep (e.g. /foo/bar),\n      // a leading asterisk would be normalized to /foo/*. So we prepend a slash.\n      if (url[0] === '*') {\n        url = '/' + url\n      }\n      url = this._normalizeURL(url)\n      url = u.escapeRegExp(url)\n      return url\n    })\n\n    let reCode = list.join('|')\n\n    reCode = reCode.replace(/\\\\\\*/g, '.*?')\n\n    reCode = reCode.replace(/(:|\\\\\\$)([a-z][\\w-]*)/ig, (match, type, name) => {\n      // It's \\\\$ instead of $ because we do u.escapeRegExp above\n      if (type === '\\\\$') {\n        if (capture) { this._groups.push({ name, cast: Number }) }\n        return '(\\\\d+)'\n      } else {\n        if (capture) { this._groups.push({ name, cast: String }) }\n        return '([^/?#]+)'\n      }\n    })\n\n    return new RegExp('^(?:' + reCode + ')$')\n  }\n\n  // This method is performance-sensitive. It's called for every link in an [up-nav]\n  // after every fragment update.\n  test(url, doNormalize = true) {\n    if (doNormalize) { url = this._normalizeURL(url) }\n    // Use RegExp#test() instead of RegExp#recognize() as building match groups is expensive,\n    // and we only need to know whether the URL matches (true / false).\n    return this._positiveRegexp.test(url) && !this._isExcluded(url)\n  }\n\n  recognize(url, doNormalize = true) {\n    if (doNormalize) { url = this._normalizeURL(url) }\n    let match = this._positiveRegexp.exec(url)\n    if (match && !this._isExcluded(url)) {\n      const resolution = {}\n      this._groups.forEach((group, groupIndex) => {\n        let value = match[groupIndex + 1]\n        if (value) {\n          return resolution[group.name] = group.cast(value)\n        }\n      })\n      return resolution\n    }\n  }\n\n  _isExcluded(url) {\n    return this._negativeRegexp?.test(url)\n  }\n}\n", "/*-\nFramework initialization\n========================\n\nThe `up.framework` module lets you customize Unpoly's [initialization sequence](/install#initialization).\n\n@see up.boot\n@see script[up-boot=manual]\n@see up.framework.isSupported\n\n@module up.framework\n*/\n\nup.framework = (function() {\n\n  // Event                          up.framework.readyState   document.readyState\n  // ------------------------------------------------------------------------------------------------------\n  // Browser starts parsing HTML    -                         loading\n  // Unpoly script is running       evaling                   loading (if sync) or interactive (if defered)\n  // ... submodules are running     evaling                   loading (if sync) or interactive (if defered)\n  // User scripts are running       configuring               loading (if sync) or interactive (if defered)\n  // DOMContentLoaded               configuring => booting    interactive\n  // Initial page is compiling      booting                   interactive\n  // Document resources loaded      booted                    complete\n  let readyState = 'evaling' // evaling => configuring => booting => booted\n\n  /*-\n  Whether Unpoly has finished booting.\n\n  Compilers may query this property to check if the initial page is being compiled\n  (as opposed to a subsequent fragment update).\n\n  @property up.framework.booted\n  @param {boolean} boolean\n  @experimental\n  */\n\n  /*-\n  Resets Unpoly to the state when it was booted.\n  All custom event handlers, animations, etc. that have been registered\n  will be discarded.\n\n  Emits event [`up:framework:reset`](/up:framework:reset).\n\n  @function up.framework.reset\n  @internal\n  */\n  function emitReset() {\n    up.emit('up:framework:reset', {log: false})\n  }\n\n  /*-\n  This event is [emitted](/up.emit) when Unpoly is [reset](/up.framework.reset) during unit tests.\n\n  @event up:framework:reset\n  @internal\n  */\n\n  /*-\n  Manually boots the Unpoly framework.\n\n  It is not usually necessary to call `up.boot()` yourself. When you load [Unpoly's JavaScript file](/install),\n  Unpoly will automatically boot on [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event).\n  There are only two cases when you would boot manually:\n\n  - When you load Unpoly with `<script async>`\n  - When you explicitly ask to manually boot by loading Unpoly with [`<script up-boot=\"manual\">`](/script-up-boot-manual).\n\n  Before you manually boot, Unpoly should be configured and compilers should be registered.\n  Booting will cause Unpoly to [compile](/up.hello) the initial page.\n\n  Unpoly will refuse to boot if the current browser is [not supported](/up.framework.isSupported).\n  This leaves you with a classic server-side application on legacy browsers.\n\n  @function up.boot\n  @experimental\n  */\n  function boot() {\n    if (readyState !== 'configuring') {\n      // In an app with a lot of async script the user may attempt to boot us twice.\n      console.error('Unpoly has already booted')\n      return\n    }\n\n    // This is called synchronously after all Unpoly modules have been parsed\n    // and executed. We cannot delay booting until the DOM is ready, since by then\n    // all user-defined event listeners and compilers will have registered.\n    // Note that any non-async scripts after us will delay DOMContentLoaded.\n    let issue = supportIssue()\n    if (!issue) {\n      // Change the state in case any user-provided compiler calls up.boot().\n      // up.boot() is a no-op unless readyState === 'configuring'.\n      readyState = 'booting'\n      up.emit('up:framework:boot', { log: false })\n      readyState = 'booted'\n      up.emit('up:framework:booted', { log: false })\n    } else {\n      console.error(\"Unpoly cannot boot: %s\", issue)\n    }\n  }\n\n  function mustBootManually() {\n    // Since this function runs before the support check, we may be dealing\n    // with a browser that does not support `document.currentScript` (e.g. IE11).\n    // See https://caniuse.com/document-currentscript\n    let unpolyScript = document.currentScript\n\n    // If we're is loaded via <script async>, there are no guarantees\n    // when we're called or when subsequent scripts that configure Unpoly\n    // have executed\n    if (unpolyScript?.async) {\n      return true\n    }\n\n    // If we're loaded with <script up-boot=\"manual\"> the user explicitly\n    // requested to boot Unpoly manually.\n    if (unpolyScript?.getAttribute('up-boot') === 'manual') {\n      return true\n    }\n\n    // If we're loaded this late, someone loads us dynamically.\n    // We don't know when subsequent scripts that configure Unpoly\n    // have executed.\n    if (document.readyState === 'complete') {\n      return true\n    }\n  }\n\n  /*-\n  This event is emitted after Unpoly has [booted](/up.boot).\n\n  For most apps this event will be emitted in the same [task](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n  as [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event).\n  All [compilers](/up.script) will already have run on the initial page content.\n\n  @event up:framework:booted\n  @experimental\n  */\n\n  /*-\n  Prevent Unpoly from booting automatically.\n\n  By default Unpoly [automatically boots](/install#initialization)\n  on [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event).\n  To prevent this, add an `[up-boot=\"manual\"]` attribute to the `<script>` element\n  that loads Unpoly:\n\n  ```html\n  <script src=\"unpoly.js\" up-boot=\"manual\"></script>\n  ```\n  You may then call `up.boot()` to manually boot Unpoly at a later time.\n\n  @selector script[up-boot=manual]\n  @experimental\n  */\n\n  function onEvaled() {\n    up.emit('up:framework:evaled', { log: false })\n\n    if (mustBootManually()) {\n      console.debug('Call up.boot() after you have configured Unpoly')\n    } else {\n      // (1) On DOMContentLoaded we know that all non-[async] scripts have executed.\n      // (2) Deferred scripts execute after the DOM was parsed (document.readyState === 'interactive'),\n      //     but before DOMContentLoaded. That's why we must *not* boot synchonously when\n      //     document.readyState === 'interactive'. We must wait until DOMContentLoaded, when we know that\n      //     subsequent users scripts have executed and (possibly) configured Unpoly.\n      // (3) There are no guarantees when [async] scripts execute. These must boot Unpoly manually.\n      document.addEventListener('DOMContentLoaded', boot)\n    }\n\n    // After this line user scripts may run and configure Unpoly, add compilers, etc.\n    readyState = 'configuring'\n  }\n\n  function startExtension() {\n    if (readyState !== 'configuring') {\n      throw new Error('Unpoly extensions must be loaded before booting')\n    }\n    readyState = 'evaling'\n  }\n\n  function stopExtension() {\n    readyState = 'configuring'\n  }\n\n  /*-\n  Returns whether Unpoly can boot in the current browser.\n\n  If this returns `false` Unpoly will not automatically [boot](/up.boot)\n  and will not [compile](/up.compiler) the initial page.\n  This leaves you with a server-side web application without any JavaScript enhancements.\n\n  The support check is very cursory. While it will exclude most legacy browsers\n  like Internet Explorer, there may be cases where `up.framework.isSupported()`\n  returns `true` on a browser with other support issues.\n  To use your own conditions for browser support, [boot manually](/script-up-boot-manual).\n\n  ### Browser support\n\n  Unpoly aims to supports all modern browsers.\n\n  #### Chrome, Firefox, Microsoft Edge\n\n  Unpoly supports recent versions of these [evergreen](https://stephenweiss.dev/evergreen-browsers) browsers.\n\n  #### Safari, Mobile Safari\n\n  Unpolys upports the last two major versions of Safari.\n\n  #### Internet Explorer\n\n  Internet Explorer 11 or lower are [now longer supported](https://github.com/unpoly/unpoly/discussions/340).\n\n  If you need to support Internet Explorer 11, use Unpoly 2.\n\n  @function up.framework.isSupported\n  @stable\n  */\n  function isSupported() {\n    return !supportIssue()\n  }\n\n  function supportIssue() {\n    for (let feature of ['URL', 'Proxy', 'Promise', 'DOMParser', 'FormData']) {\n      if (!window[feature]) {\n        return `Browser doesn't support the ${feature} API`\n      }\n    }\n\n    if (document.compatMode === 'BackCompat') {\n      return 'Browser is in quirks mode (missing DOCTYPE?)'\n    }\n  }\n\n  return {\n    onEvaled,\n    boot,\n    startExtension,\n    stopExtension,\n    reset: emitReset,\n    get evaling() { return readyState === 'evaling' },\n    get booted() { return readyState === 'booted' },\n    get beforeBoot() { return readyState !== 'booting' && readyState !== 'booted' },\n    isSupported,\n  }\n})()\n\nup.boot = up.framework.boot\n", "/*-\nEvents\n======\n\nThis module contains functions to [emit](/up.emit) and [observe](/up.on) DOM events.\n\nWhile the browser also has built-in functions to work with events,\nyou will find Unpoly's functions to be very concise and feature-rich.\n\n### Events emitted by Unpoly\n\nMost Unpoly features emit events that are prefixed with `up:`.\n\nUnpoly's own events are documented in their respective modules, for example:\n\n| Event                 | Module             |\n|-----------------------|--------------------|\n| `up:link:follow`      | `up.link`          |\n| `up:form:submit`      | `up.form`          |\n| `up:layer:open`       | `up.layer`         |\n| `up:network:late`     | `up.network`       |\n\n@see up.on\n@see up.emit\n\n@module up.event\n*/\nup.event = (function() {\n\n  const u = up.util\n  const e = up.element\n\n  function reset() {\n    // Resets the list of registered event listeners to the\n    // moment when the framework was booted.\n    for (let globalElement of [window, document, e.root, document.body]) {\n      for (let listener of up.EventListener.allNonDefault(globalElement)) {\n        listener.unbind()\n      }\n    }\n  }\n\n  /*-\n  Listens to a [DOM event](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events)\n  on `document` or a given element.\n\n  `up.on()` has some quality of life improvements over\n  [`Element#addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener):\n\n  - You may pass a selector for [event delegation](https://davidwalsh.name/event-delegate).\n  - The [event target](https://developer.mozilla.org/en-US/docs/Web/API/Event/target) is automatically passed as a second argument.\n  - Your event listener will not be called when Unpoly has not [booted](/up.boot) in an unsupported browser\n  - You may register a listener to multiple events by passing a space-separated list of event name (e.g. `\"click mousedown\"`)\n  - You may register a listener to multiple elements in a single `up.on()` call, by passing a [list](/up.util.isList) of elements.\n  - Any [data attached to the observed element](/data) will be passed as a third argument to your handler function.\n\n  You can prevent the event from being processed further with [up.event.halt(event)](/up.event.halt).\n\n  ### Basic example\n\n  The code below will call the listener when a `<a>` is clicked\n  anywhere in the `document`:\n\n  ```js\n  up.on('click', 'a', function(event, element) {\n    console.log(\"Click on a link %o\", element)\n  })\n  ```\n\n  You may also bind the listener to a given element instead of `document`:\n\n  ```js\n  var form = document.querySelector('form')\n  up.on(form, 'click', function(event, form) {\n    console.log(\"Click within %o\", form)\n  })\n  ```\n\n  ### Event delegation\n\n  You may pass both an element and a selector\n  for [event delegation](https://davidwalsh.name/event-delegate).\n\n  The example below registers a single event listener to the given `form`,\n  but only calls the listener when the clicked element is a `select` element:\n\n  ```\n  var form = document.querySelector('form')\n  up.on(form, 'click', 'select', function(event, select) {\n    console.log(\"Click on select %o within %o\", select, form)\n  })\n  ```\n\n  ### Attaching data\n\n  Any [data attached to the observed element](/data) will be passed to your event handler.\n\n  For instance, this element has attached data in its `[up-data]` attribute:\n\n  ```html\n  <span class='user' up-data='{ \"age\": 18, \"name\": \"Bob\" }'>Bob</span>\n  ```\n\nThe parsed data will be passed to your event handler as a third argument:\n\n  ```js\n  up.on('click', '.user', function(event, element, data) {\n    console.log(\"This is %o who is %o years old\", data.name, data.age)\n  })\n  ```\n\n  ### Unbinding an event listener\n\n  `up.on()` returns a function that unbinds the event listeners when called:\n\n  ```js\n  // Define the listener\n  var listener =  function(event) { ... }\n\n  // Binding the listener returns an unbind function\n  var unbind = up.on('click', listener)\n\n  // Unbind the listener\n  unbind()\n  ```\n\n  There is also a function [`up.off()`](/up.off) which you can use for the same purpose:\n\n  ```js\n  // Define the listener\n  var listener =  function(event) { ... }\n\n  // Bind the listener\n  up.on('click', listener)\n\n  // Unbind the listener\n  up.off('click', listener)\n  ```\n\n  ### Binding to multiple elements\n\n  You may register a listener to multiple elements in a single `up.on()` call, by passing a [list](/up.util.isList) of elements:\n\n  ```js\n  let allForms = document.querySelectorAll('form')\n  up.on(allForms, 'submit', function(event, form) {\n    console.log('Submitting form %o', form)\n  })\n  ```\n\n  ### Binding to multiple event types\n\n  You may register a listener to multiple event types by passing a space-separated list of event types:\n\n  ```js\n  let element = document.querySelector(...)\n  up.on(element, 'mouseenter mouseleave', function(event) {\n    console.log('Mouse entered or left')\n  })\n  ```\n\n  @function up.on\n\n  @param {Element|jQuery} [element=document]\n    The element on which to register the event listener.\n\n    If no element is given, the listener is registered on the `document`.\n\n  @param {string|Array<string>} types\n    The event types to bind to.\n\n    Multiple event types may be passed as either a space-separated string\n    or as an array of types.\n\n  @param {string|Function():string} [selector]\n    The selector of an element on which the event must be triggered.\n\n    Omit the selector to listen to all events of the given type, regardless\n    of the event target.\n\n    If the selector is not known in advance you may also pass a function\n    that returns the selector. The function is evaluated every time\n    an event with the given type is observed.\n\n  @param {boolean} [options.passive=false]\n    Whether to register a [passive event listener](https://developers.google.com/web/updates/2016/06/passive-event-listeners).\n\n    A passive event listener may not call `event.preventDefault()`.\n    This in particular may improve the frame rate when registering\n    `touchstart` and `touchmove` events.\n\n  @param {boolean} [options.once=true]\n    Whether the listener should run at most once.\n\n    If `true` the listener will automatically be unbound\n    after the first invocation.\n\n  @param {boolean} [options.capture=false]\n    Whether the listener should run before the event is emitted on the element.\n\n    See [event capturing](https://javascript.info/bubbling-and-capturing#capturing) for more information\n    about DOM event processing phases.\n\n  @param {Function(event, [element], [data])} listener\n    The listener function that should be called.\n\n    The function takes the observed element as a second argument.\n    The element's [attached data](/data) is passed as a third argument.\n\n  @return {Function()}\n    A function that unbinds the event listeners when called.\n\n  @stable\n  */\n  function on(...args) {\n    return buildListenerGroup(args).bind()\n  }\n\n  /*-\n  Unbinds an event listener previously bound with `up.on()`.\n\n  ### Example\n\n  Let's say you are listing to clicks on `.button` elements:\n\n  ```js\n  var listener = function() { ... }\n  up.on('click', '.button', listener)\n  ```\n\n  You can stop listening to these events like this:\n\n  ```js\n  up.off('click', '.button', listener)\n  ```\n\n  @function up.off\n  @param {Element|jQuery} [element=document]\n  @param {string|Function(): string} events\n  @param {string} [selector]\n  @param {Function(event, [element], [data])} listener\n    The listener function to unbind.\n\n    Note that you must pass a reference to the same function reference\n    that was passed to `up.on()` earlier.\n  @stable\n  */\n  function off(...args) {\n    return buildListenerGroup(args).unbind()\n  }\n\n  function buildListenerGroup(args, options) {\n    return up.EventListenerGroup.fromBindArgs(args, options)\n  }\n\n  function buildEmitter(args) {\n    return up.EventEmitter.fromEmitArgs(args)\n  }\n\n  /*-\n  Emits a event with the given name and properties.\n\n  The event will be triggered as an event on `document` or on the given element.\n\n  Other code can subscribe to events with that name using\n  [`Element#addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n  or [`up.on()`](/up.on).\n\n  ### Example\n\n  ```js\n  up.on('my:event', function(event) {\n    console.log(event.foo)\n  })\n\n  up.emit('my:event', { foo: 'bar' })\n  // Prints \"bar\" to the console\n  ```\n\n  @function up.emit\n  @param {Element|jQuery} [target=document]\n    The element on which the event is triggered.\n\n    If omitted, the event will be emitted on the `document`.\n  @param {string} eventType\n    The event type, e.g. `my:event`.\n  @param {Object} [props={}]\n    A list of properties to become part of the event object that will be passed to listeners.\n  @param {up.Layer|string|number} [props.layer]\n    The [layer](/up.layer) on which to emit this event.\n\n    If this property is set, the event will be emitted on the [layer's outmost element](/up.Layer.prototype.element).\n    Also [up.layer.current](/up.layer.current) will be set to the given layer while event listeners\n    are running.\n  @param {string|Array} [props.log]\n    A message to print to the [log](/up.log) when the event is emitted.\n\n    Pass `false` to not log this event emission.\n\n    @experimental\n  @param {Element|jQuery} [props.target=document]\n    The element on which the event is triggered.\n\n    Alternatively the target element may be passed as the first argument.\n  @return {Event}\n    The emitted event object.\n  @stable\n  */\n  function emit(...args) {\n    return buildEmitter(args).emit()\n  }\n\n  /*-\n  Builds an event with the given type and properties.\n\n  The returned event is not [emitted](/up.emit).\n\n  ### Example\n\n  ```js\n  let event = up.event.build('my:event', { foo: 'bar' })\n  console.log(event.type)              // logs \"my:event\"\n  console.log(event.foo)               // logs \"bar\"\n  console.log(event.defaultPrevented)  // logs \"false\"\n  up.emit(event)                       // emits the event\n  ```\n\n  @function up.event.build\n  @param {string} [type]\n    The event type.\n\n    May also be passed as a property `{ type }`.\n  @param {Object} [props={}]\n    An object with event properties.\n  @param {string} [props.type]\n    The event type.\n\n    May also be passed as a first string argument.\n  @return {Event}\n  @experimental\n  */\n  function build(...args) {\n    const props = u.extractOptions(args)\n    const type = args[0] || props.type || up.fail('Expected event type to be passed as string argument or { type } property')\n\n    const event = document.createEvent('Event')\n    event.initEvent(type, true, true) // name, bubbles, cancelable\n    Object.assign(event, u.omit(props, ['type', 'target']))\n\n    return event\n  }\n\n  /*-\n  [Emits](/up.emit) the given event and throws an `up.AbortError` if it was prevented.\n\n  @function up.event.assertEmitted\n  @param {string} eventType\n  @param {Object} eventProps\n  @param {string|Array} [eventProps.message]\n  @return {Event}\n  @internal\n  */\n  function assertEmitted(...args) {\n    return buildEmitter(args).assertEmitted()\n  }\n\n  /*-\n  Registers an event listener to be called when the user\n  presses the `Escape` key.\n\n  ### Example\n\n  ```js\n  up.event.onEscape(function(event) {\n    console.log('Escape pressed!')\n  })\n  ```\n  @function up.event.onEscape\n  @param {Function(Event)} listener\n    The listener function that will be called when `Escape` is pressed.\n  @function\n  @experimental\n  */\n  function onEscape(listener) {\n    return on('keydown', function(event) {\n      if (event.key === 'Escape') {\n        return listener(event)\n      }\n    })\n  }\n\n  /*-\n  Prevents the event from being processed further.\n\n  In detail:\n\n  - It prevents the event from bubbling up the DOM tree.\n  - It prevents other event handlers bound on the same element.\n  - It prevents the event's default action.\n\n  ### Example\n\n  ```js\n  up.on('click', 'link.disabled', function(event) {\n    up.event.halt(event)\n  })\n  ```\n\n  @function up.event.halt\n  @param {Event} event\n  @stable\n  */\n  function halt(event, options = {}) {\n    if (options.log) up.log.putsEvent(event)\n    event.stopImmediatePropagation()\n    event.preventDefault()\n  }\n\n  const keyModifiers = ['metaKey', 'shiftKey', 'ctrlKey', 'altKey']\n\n  /*-\n  @function up.event.isUnmodified\n  @internal\n  */\n  function isUnmodified(event) {\n    return (u.isUndefined(event.button) || (event.button === 0)) &&\n      !u.some(keyModifiers, modifier => event[modifier])\n  }\n\n  function fork(originalEvent, newType, copyKeys = []) {\n    const newEvent = up.event.build(newType, u.pick(originalEvent, copyKeys))\n    newEvent.originalEvent = originalEvent; // allow users to access other props through event.originalEvent.prop\n\n    ['stopPropagation', 'stopImmediatePropagation', 'preventDefault'].forEach(function(key) {\n      const originalMethod = newEvent[key]\n\n      return newEvent[key] = function() {\n        originalEvent[key]()\n        return originalMethod.call(newEvent)\n      }\n    })\n\n    // If the source event was already prevented, the forked event should also be.\n    if (originalEvent.defaultPrevented) {\n      newEvent.preventDefault()\n    }\n\n    return newEvent\n  }\n\n  /*-\n  Emits the given event when this link is clicked.\n\n  When the emitted event's default' is prevented, the original `click` event's default is also prevented.\n\n  You may use this attribute to emit events when clicking on areas that are no hyperlinks,\n  by setting it on an `<a>` element without a `[href]` attribute.\n\n  ### Example\n\n  This hyperlink will emit an `user:select` event when clicked:\n\n  ```html\n  <a href='/users/5'\n    up-emit='user:select'\n    up-emit-props='{ \"id\": 5, \"firstName\": \"Alice\" }'>\n    Alice\n  </a>\n\n  <script>\n    up.on('a', 'user:select', function(event) {\n      console.log(event.firstName) // logs \"Alice\"\n      event.preventDefault()       // will prevent the link from being followed\n    })\n  </script>\n  ```\n\n  @selector a[up-emit]\n  @param up-emit\n    The type of the event to be emitted.\n  @param [up-emit-props='{}']\n    The event properties, serialized as JSON.\n  @stable\n  */\n  function executeEmitAttr(event, element) {\n    if (!isUnmodified(event)) { return }\n    const eventType = e.attr(element, 'up-emit')\n    const eventProps = e.jsonAttr(element, 'up-emit-props')\n    const forkedEvent = fork(event, eventType)\n    Object.assign(forkedEvent, eventProps)\n    up.emit(element, forkedEvent)\n  }\n\n  on('up:click', 'a[up-emit]', executeEmitAttr)\n\n  let inputDevices = ['unknown']\n\n  /*-\n  The class of input device used to cause the current event.\n\n  It can assume one of the following values:\n\n  | Value        | Meaning                                                                 |\n  |--------------|-------------------------------------------------------------------------|\n  | `'key'`      | The event was caused by a keyboard interaction.                         |\n  | `'pointer'`  | The event was caused by an interaction via mouse, touch or stylus.      |\n  | `'unknown'`  | The input device is unknown or this event was not caused by user input. |\n\n  @property up.event.inputDevice\n  @param inputDevice\n    A string describing the current input device class.\n  @experimental\n  */\n  function getInputDevice() {\n    return u.last(inputDevices)\n  }\n\n  function observeInputDevice(newModality) {\n    inputDevices.push(newModality)\n    setTimeout(() => inputDevices.pop())\n  }\n\n  on('keydown keyup', { capture: true }, () => observeInputDevice('key'))\n  on('pointerdown pointerup', { capture: true }, () => observeInputDevice('pointer'))\n\n  on('up:framework:reset', reset)\n\n  return {\n    on,\n    off,\n    build,\n    emit,\n    assertEmitted,\n    onEscape,\n    halt,\n    isUnmodified,\n    fork,\n    keyModifiers,\n    get inputDevice() { return getInputDevice() }\n    // addCallback,\n  }\n})()\n\nup.on = up.event.on\nup.off = up.event.off\nup.emit = up.event.emit\n", "/*-\nServer protocol\n===============\n\nUnpoly has an **optional** protocol your server may implement to exchange additional information\nwhen Unpoly is [updating fragments](/up.link). The protocol mostly works by adding\nadditional HTTP headers (like `X-Up-Target`) to requests and responses.\n\n> [IMPORTANT]\n> While the protocol can help you optimize performance and handle some edge cases,\n> implementing it is **entirely optional**. For instance, `unpoly.com` itself is a static site\n> that uses Unpoly on the frontend and doesn't even have an active server component.\n\n## Existing implementations\n\nYou should be able to implement the protocol in a very short time.\n\nThere are existing implementations for various web frameworks:\n\n- [Ruby on Rails](/install/ruby)\n- [Roda](https://github.com/adam12/roda-unpoly)\n- [Rack](https://github.com/adam12/rack-unpoly) (Sinatra, Padrino, Hanami, Cuba, ...)\n- [Phoenix](https://elixirforum.com/t/unpoly-a-framework-like-turbolinks/3614/15) (Elixir)\n- [PHP](https://github.com/webstronauts/php-unpoly) (Symfony, Laravel, Stack)\n- [Python](https://gitlab.com/rocketduck/python-unpoly) (Python, including Django support)\n\n@see optimizing-responses\n@see conditional-requests\n@see csp\n\n@module up.protocol\n*/\nup.protocol = (function() {\n\n  const u = up.util\n  const e = up.element\n\n  const headerize = function(camel) {\n    const header = camel.replace(/(^.|[A-Z])/g, char => '-' + char.toUpperCase())\n    return 'X-Up' + header\n  }\n\n  const extractHeader = function(xhr, shortHeader, parseFn = u.identity) {\n    let value = xhr.getResponseHeader(headerize(shortHeader))\n    if (value) {\n      return parseFn(value)\n    }\n  }\n\n  /*-\n  @function up.protocol.targetFromXHR\n  @internal\n  */\n  function targetFromXHR(xhr) {\n    return extractHeader(xhr, 'target')\n  }\n\n  /*-\n  This request header contains the current Unpoly version to mark this request as a fragment update.\n\n  Server-side code may check for the presence of an `X-Up-Version` header to\n  distinguish [fragment updates](/up.link) from full page loads.\n\n  The `X-Up-Version` header is guaranteed to be set for all [requests made through Unpoly](/up.request).\n\n  ### Example\n\n  The user updates a fragment. Unpoly automatically includes the following request header:\n\n    ```http\n  X-Up-Version: 1.0.0\n  ```\n\n  The server chooses to render different HTML to Unpoly requests, e.g. by excluding the document `<head>`\n  and only rendering the `<body>`. The server responds with the folowing HTTP:\n\n  ```http\n  Vary: X-Up-Version\n\n  <body>\n    ...\n  </body>\n  ```\n\n  @include vary-header-note\n\n  @header X-Up-Version\n  @stable\n  */\n\n  /*-\n  This request header contains the [target selector](/targeting-fragments) for a successful fragment update.\n\n  Server-side code is free to [optimize its response](/optimizing-responses) by only rendering HTML\n  that matches the selector. For example, you might prefer to not render an\n  expensive sidebar if the sidebar is not targeted.\n\n  Unpoly will usually update a different selector in case the request fails.\n  This selector is sent as a second header, `X-Up-Fail-Target`.\n\n  ### Example\n\n  The user updates a fragment `.menu`.\n  Unpoly automatically includes the following request header:\n\n  ```http\n  X-Up-Target: .menu\n  ```\n\n  The server chooses to render only the HTML for the updating fragment.\n  It responds with the following HTTP:\n\n  ```http\n  Vary: X-Up-Target\n\n  <div class=\"menu\">...</div>\n  ```\n\n  @include vary-header-note\n\n  ### Changing the render target from the server\n\n  The server may change the render target context by including a CSS selector as an `X-Up-Target` header\n  in its response.\n\n  ```http\n  Content-Type: text/html\n  X-Up-Target: .selector-from-server\n\n  <div class=\"selector-from-server\">\n    ...\n  </div>\n  ```\n\n  The frontend will use the server-provided target for both successful (HTTP status `200 OK`)\n  and failed (status `4xx` or `5xx`) responses.\n\n\n  ### Rendering nothing\n\n  The server may send an `X-Up-Target: :none` response header with an empty body to skip the current render pass.\n\n  Also see [skipping unnecessary rendering](/skipping-rendering).\n\n\n  ### Optional targets\n\n  An optional selector part (`:maybe` suffix) will be omitted from an `X-Up-Target` header unless it\n  matches in the current page.\n\n  Required selector parts are always included in `X-Up-Target`.\n\n\n  @header X-Up-Target\n  @stable\n  */\n\n  /*-\n  This request header contains the [target selector](/targeting-fragments) for a failed fragment update.\n\n  A fragment update is considered *failed* if the server responds with a status code other than 2xx,\n  but still renders HTML.\n\n  Server-side code is free to [optimize its response](/optimizing-responses) to a failed request by only rendering HTML\n  that matches the provided selector. For example, you might prefer to not render an\n  expensive sidebar if the sidebar is not targeted.\n\n  ### Example\n\n  ```http\n  X-Up-Target: .menu\n  X-Up-Fail-Target: body\n  ```\n\n  ### Signaling failed form submissions\n\n  When [submitting a form via AJAX](/form-up-submit)\n  Unpoly needs to know whether the form submission has failed (to update the form with\n  validation errors) or succeeded (to update the `[up-target]` selector).\n\n  For Unpoly to be able to detect a failed form submission, the response must be\n  return a non-2xx HTTP status code. We recommend to use\n  [HTTP 422](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422) (Unprocessable Entity).\n\n  To do so in [Ruby on Rails](http://rubyonrails.org/), pass a [`:status` option to `render`](http://guides.rubyonrails.org/layouts_and_rendering.html#the-status-option):\n\n  ```ruby\n  class UsersController < ApplicationController\n\n    def create\n      user_params = params[:user].permit(:email, :password)\n      @user = User.new(user_params)\n      if @user.save?\n        sign_in @user\n      else\n        render 'form', status: :unprocessable_entity\n      end\n    end\n\n  end\n  ```\n\n  @header X-Up-Fail-Target\n  @stable\n  */\n\n  /*-\n  This request header contains the targeted layer's [mode](/up.layer.mode).\n\n  Server-side code is free to render different HTML for different modes.\n  For example, you might prefer to not render a site navigation for overlays.\n\n  ### Example\n\n  The user updates a fragment `main` within a [drawer overlay](/layer-terminology).\n  Unpoly automatically includes the following request headers:\n\n  ```http\n  X-Up-Mode: drawer\n  X-Up-Target: main\n  ```\n\n  The server chooses to render only the HTML required for the overlay.\n  It responds with the following HTTP:\n\n  ```http\n  Vary: X-Up-Mode\n\n  <main>...</main>\n  ```\n\n  @include vary-header-note\n\n  @header X-Up-Mode\n  @stable\n  */\n\n  /*-\n  This request header contains the [mode](/up.layer.mode) of the layer\n  targeted for a failed fragment update.\n\n  A fragment update is considered *failed* if the server responds with a\n  status code other than 2xx, but still renders HTML.\n\n  Server-side code is free to render different HTML for different modes.\n  For example, you might prefer to not render a site navigation for overlays.\n\n  ### Example\n\n  ```http\n  X-Up-Mode: drawer\n  X-Up-Fail-Mode: root\n  ```\n\n  @header X-Up-Fail-Mode\n  @stable\n  */\n\n  /*-\n  This response header contains a hash identifying the content in the response body.\n\n  Typically, the ETag value is a hash of the underlying data that was rendered,\n  or a hash of the data's last modification time.\n\n  ETags can be used to prevent unnecessary re-rendering of unchanged content.\n  See [Conditional requests](/conditional-requests) for details and examples.\n\n  ### Format\n\n  A (weak) ETag typically looks like this:\n\n  ```http\n  ETag: W/\"55e4d42a148795d9f25f89d4\"\n  ```\n\n  For more information about an ETag's format, see\n  [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) and [RFC 7232](https://www.rfc-editor.org/rfc/rfc7232#section-2.3).\n\n  ### Alternatives\n\n  Instead of sending this header, the server may also render fragments with `[up-etag]` attributes.\n\n  @header ETag\n  @stable\n  */\n\n  /*-\n  This request header contains the ETag of a fragment that is being reloaded.\n\n  The server can use the header value to prevent unnecessary re-rendering of unchanged content.\n  See [Conditional requests](/conditional-requests) for details and examples.\n\n  The header is only set when Unpoly knows the ETag of the loading fragment.\n  For this the fragment must have been rendered with an `ETag` response header or `[up-etag]` attribute.\n\n  ### Format\n\n  The `If-None-Match` header uses the same format as the `ETag` header:\n\n  ```http\n  If-None-Match: W/\"55e4d42a148795d9f25f89d4\"\n  ```\n\n  @header If-None-Match\n  @stable\n  */\n\n  /*-\n  This response header contains the time when the content in the response body was last modified.\n\n  Last modification times can be used to prevent unnecessary re-rendering of unchanged content.\n  See [Conditional requests](/conditional-requests) for details and examples.\n\n  ### Format\n\n  The header value is a date/time in [RFC 1123](https://www.rfc-editor.org/rfc/rfc1123) format:\n\n  ```http\n  Last-Modified: Wed, 15 Nov 2000 13:11:22 GMT\n  ```\n\n  For a readable description of the time format, see [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified).\n\n  ### Alternatives\n\n  Instead of sending this header, the server may also render fragments with `[up-time]` attributes.\n\n  @header Last-Modified\n  @stable\n  */\n\n  /*-\n  This request header contains the last modification time of a fragment that is being reloaded.\n\n  The server can use the header value to prevent unnecessary re-rendering of unchanged content.\n  See [Conditional requests](/conditional-requests) for details and examples.\n\n  The header is only set when Unpoly knows the last modification time of the loading fragment.\n  For this the fragment must have been rendered with an `Last-Modified` response header or `[up-time]` attribute.\n\n  ### Format\n\n  The header value is a date/time in [RFC 1123](https://www.rfc-editor.org/rfc/rfc1123) format:\n\n  ```http\n  If-Modified-Since: Wed, 15 Nov 2000 13:11:22 GMT\n  ```\n\n  @header If-Modified-Since\n  @stable\n  */\n\n  function parseModifyCacheValue(value) {\n    if (value === 'false') {\n      return false\n    } else {\n      return value\n    }\n  }\n\n  function evictCacheFromXHR(xhr) {\n    return extractHeader(xhr, 'evictCache', parseModifyCacheValue)\n  }\n\n  /*-\n  The server may send this optional response header to control which previously [cached](/caching)\n  responses should be [evicted](/caching#eviction) after this response.\n\n  The value of this header is a [URL pattern](/url-patterns) matching responses that should be evicted.\n\n  For example, to expire all responses to URLs starting with `/notes/`:\n\n  ```http\n  X-Up-Evict-Cache: /notes/*\n  ```\n\n  To evict all cache entries:\n\n  ```http\n  X-Up-Evict-Cache: *\n  ```\n\n  @header X-Up-Evict-Cache\n  @stable\n  */\n\n\n  function expireCacheFromXHR(xhr) {\n    return extractHeader(xhr, 'expireCache') || up.migrate.clearCacheFromXHR?.(xhr)\n  }\n\n  /*-\n  The server may send this optional response header to control which previously [cached](/caching)\n  responses should be [expired](/caching#expiration) after this response.\n\n  The value of this header is a [URL pattern](/url-patterns) matching responses that should be expired.\n\n  For example, to expire all responses to URLs starting with `/notes/`:\n\n  ```http\n  X-Up-Expire-Cache: /notes/*\n  ```\n\n  To expire all cache entries:\n\n  ```http\n  X-Up-Expire-Cache: *\n  ```\n\n  ### Overriding the client-side default\n\n  If the server does not send an `X-Up-Expire-Cache` header, Unpoly will [expire the entire cache](/up.network.config#config.expireCache) after a non-GET request.\n\n  You may force Unpoly to keep the cache fresh after a non-GET request:\n\n  ```http\n  X-Up-Expire-Cache: false\n  ```\n\n  @header X-Up-Expire-Cache\n  @stable\n  */\n\n  function contextFromXHR(xhr) {\n    return extractHeader(xhr, 'context', JSON.parse)\n  }\n\n  /*-\n  This request header contains the targeted layer's [context](/context), serialized as JSON.\n\n  ### Example\n\n  The current layer has a context `{ lives: 3 }`.\n  When the user updates a fragment, Unpoly automatically includes the following request headers:\n\n  ```http\n  X-Up-Context: { \"lives\": 3 }\n  X-Up-Target: main\n  ```\n\n  The server may choose to render HTML based on that context, e.g. by including\n  a live counter in the response. It responds with the following HTTP:\n\n  ```http\n  Vary: X-Up-Context\n\n  <main>\n    3 lives left\n    ...\n  </main>\n  ```\n\n  @include vary-header-note\n\n  ### Updating context from the server\n\n  The server may update the layer context by sending a `X-Up-Context` response header with\n  changed key/value pairs:\n\n  ```http\n  Content-Type: text/html\n  X-Up-Context: { \"lives\": 2 }\n\n  <html>\n    ...\n  </html>\n  ```\n\n  @include unicode-header-values\n\n  Upon seeing the response header, Unpoly will merge the server-provided context object into\n  the layer's context object, adding or replacing keys as needed.\n  Client-side context keys not mentioned in the response will remain unchanged.\n\n  There is no explicit protocol to *remove* keys from the context, but the server may send a key\n  with a `null` value to effectively remove a key.\n\n  The frontend will use the server-provided context upates for both successful (HTTP status `200 OK`)\n  and failed (status `4xx` or `5xx`) responses.  If no `X-Up-Context` response header is set,\n  the updating layer's context will not be changed.\n\n  It is recommended that the server only places changed key/value pairs into the `X-Up-Context`\n  response header, and not echo the entire context object. Otherwise any client-side changes made while\n  the request was in flight will get overridden by the server-provided context.\n\n  @header X-Up-Context\n  @experimental\n  */\n\n  /*-\n  This request header contains the [context](/context) of the layer\n  targeted for a failed fragment update, serialized as JSON.\n\n  A fragment update is considered *failed* if the server responds with a\n  status code other than 2xx, but still renders HTML.\n\n  Server-side code is free to render different HTML for different contexts.\n  For example, you might prefer to not render a site navigation for overlays.\n\n  ### Example\n\n  ```http\n  X-Up-Fail-Context: { \"context\": \"Choose a company contact\" }\n  ```\n\n  @header X-Up-Fail-Context\n  @experimental\n  */\n\n  /*-\n  @function up.protocol.methodFromXHR\n  @internal\n  */\n  function methodFromXHR(xhr) {\n    return extractHeader(xhr, 'method', u.normalizeMethod)\n  }\n\n  /*-\n  The server may set this optional response header to change the HTTP method after a fragment update.\n\n  Without this header Unpoly will use the [requested method](/up.Request.prototype.method).\n\n  ### Signaling the HTTP method after a redirect\n\n  Without an `X-Up-Method` header, Unpoly will assume a `GET` method after a redirect.\n\n  This assumption is correct for redirects with status codes 301, 302 and 303,\n  and incorrect for the [less common codes 307 and 308](https://makandracards.com/makandra/501468-modern-http-status-codes-for-redirecting).\n\n  ### Example\n\n  ```http\n  X-Up-Location: /current-url\n  X-Up-Method: GET\n  ```\n\n  @header X-Up-Method\n  @stable\n  */\n\n  /*-\n  @function up.protocol.titleFromXHR\n  @internal\n  */\n  function titleFromXHR(xhr) {\n    return up.migrate.titleFromXHR?.(xhr) ?? extractHeader(xhr, 'title', JSON.parse)\n  }\n\n  /*-\n  The server may set this optional response header to change the document title after a fragment update.\n\n  The title must be encoded as a JSON string.\n\n  Without this header Unpoly will extract the `<title>` from the server response.\n\n  This header is useful when you [optimize your response](/optimizing-responses) to not render\n  the application layout unless targeted. When your shortened response\n  no longer includes a `<title>`, you can instead use this HTTP header to pass the document title.\n\n  @include unicode-header-values\n\n  ### Example\n\n  ```http\n  X-Up-Title: \"Playlist browser\"\n  ```\n\n  Note that the quotes must be included in the JSON-encoded header value.\n\n  @header X-Up-Title\n  @stable\n  */\n\n  /*-\n  This request header contains the names of the [form fields being validated](/up-validate).\n\n  When seeing this header, the server is [expected](/up-validate#backend-protocol)\n  to validate (but not save) the form submission and render a new form state with validation errors.\n  See the documentation for `[up-validate]` for more information\n  on how server-side validation works in Unpoly.\n\n  ### Example\n\n  Let's look at a registration form that uses `[up-validate]` to validate form groups\n  as the user completes fields:\n\n  ```html\n  <form action=\"/users\">\n\n    <fieldset>\n      <label for=\"email\" up-validate>E-mail</label> <!-- mark-phrase \"up-validate\" -->\n      <input type=\"text\" id=\"email\" name=\"email\">\n    </fieldset>\n\n    <fieldset>\n      <label for=\"password\" up-validate>Password</label> <!-- mark-phrase \"up-validate\" -->\n      <input type=\"password\" id=\"password\" name=\"password\">\n    </fieldset>\n\n    <button type=\"submit\">Register</button>\n\n  </form>\n  ```\n\n  When the `email` input is changed, Unpoly will submit the form with an\n  additional `X-Up-Validate` header:\n\n  ```http\n  X-Up-Validate: email\n  X-Up-Target: fieldset:has(#email)\n  ```\n\n  ### Batched validations\n\n  If multiple validations are [batched](/up.validate#batching) into a single request,\n  `X-Up-Validate` contains a space-separated list of all validating field names:\n\n  ```http\n  X-Up-Validate: email password\n  X-Up-Target: fieldset:has(#password)\n  ```\n\n  ### When no origin field is known\n\n  When `up.validate()` is called with a non-field element, Unpoly might not know\n  which element triggered the validation. In that case the header value will be `:unknown`:\n\n  ```http\n  X-Up-Validate: :unknown\n  X-Up-Target: .preview\n  ```\n\n  ### When too many fields are validated\n\n  Validating a long form may cause the `X-Up-Validate` header to become excessively long.\n  This may cause web infrastructure from rejecting the request with an `413 Entity Too Large` error.\n\n  To prevent this, the header value is set to `:unknown` if its length exceeds `up.protocol.config.maxHeaderSize`.\n\n  @header X-Up-Validate\n  @stable\n  */\n\n  function eventPlansFromXHR(xhr) {\n    return extractHeader(xhr, 'events', JSON.parse)\n  }\n\n  /*-\n  The server may set this response header to [emit events](/up.emit) with the\n  requested [fragment update](/a-up-follow).\n\n  The header value is a [JSON](https://en.wikipedia.org/wiki/JSON) array.\n  Each element in the array is a JSON object representing an event to be emitted\n  on the `document`.\n\n  The object property `{ \"type\" }` defines the event's [type](https://developer.mozilla.org/en-US/docs/Web/API/Event/type). Other properties become properties of the emitted\n  event object.\n\n  @include unicode-header-values\n\n  ### Example\n\n  ```http\n  Content-Type: text/html\n  X-Up-Events: [{ \"type\": \"user:created\", \"id\": 5012 }, { \"type\": \"signup:completed\" }]\n  ...\n\n  <html>\n    ...\n  </html>\n  ```\n\n  ### Emitting an event on a layer\n\n  Instead of emitting an event on the `document`, the server may also choose to\n  [emit the event on the layer being updated](/up.layer.emit). To do so, add a property\n  `{ \"layer\": \"current\" }` to the JSON object of an event:\n\n  ```http\n  Content-Type: text/html\n  X-Up-Events: [{ \"type\": \"user:created\", \"name:\" \"foobar\", \"layer\": \"current\" }]\n  ...\n\n  <html>\n    ...\n  </html>\n  ```\n\n  @header X-Up-Events\n  @stable\n  */\n\n  function acceptLayerFromXHR(xhr) {\n    // Even if acceptance has no value, the server will send\n    // X-Up-Accept-Layer: null\n    return extractHeader(xhr, 'acceptLayer', JSON.parse)\n  }\n\n  /*-\n  The server may set this response header to [accept](/up.layer.accept) the targeted overlay\n  in response to a fragment update.\n\n  Upon seeing the header, Unpoly will cancel the fragment update and accept the layer instead.\n  If the root layer is targeted, the header is ignored and the fragment is updated with\n  the response's HTML content.\n\n  The header value is the acceptance value serialized as a JSON object.\n  To accept an overlay without value, set the header value to the string `null`.\n\n  @include unicode-header-values\n\n  ### Example\n\n  The response below will accept the targeted overlay with the value `{user_id: 1012 }`:\n\n  ```http\n  Content-Type: text/html\n  X-Up-Accept-Layer: {\"user_id\": 1012}\n\n  <html>\n    ...\n  </html>\n  ```\n\n  ### Rendering content\n\n  The response may contain `text/html` content. If the root layer is targeted,\n  the `X-Up-Accept-Layer` header is ignored and the fragment is updated with\n  the response's HTML content.\n\n  If you know that an overlay will be closed and don't want to render HTML,\n  have the server change the render target to `:none`:\n\n  ```http\n  Content-Type: text/html\n  X-Up-Accept-Layer: {\"user_id\": 1012}\n  X-Up-Target: :none\n  ```\n\n  @header X-Up-Accept-Layer\n  @stable\n  */\n\n  function dismissLayerFromXHR(xhr) {\n    // Even if dismissal has no value, the server will send\n    // X-Up-Dismiss-Layer: null\n    return extractHeader(xhr, 'dismissLayer', JSON.parse)\n  }\n\n  /*-\n  The server may set this response header to [dismiss](/up.layer.dismiss) the targeted overlay\n  in response to a fragment update.\n\n  Upon seeing the header, Unpoly will cancel the fragment update and dismiss the layer instead.\n  If the root layer is targeted, the header is ignored and the fragment is updated with\n  the response's HTML content.\n\n  The header value is the dismissal value serialized as a JSON object.\n  To accept an overlay without value, set the header value to the string `null`.\n\n  @include unicode-header-values\n\n  ### Example\n\n  The response below will dismiss the targeted overlay without a dismissal value:\n\n  ```http\n  HTTP/1.1 200 OK\n  Content-Type: text/html\n  X-Up-Dismiss-Layer: null\n\n  <html>\n    ...\n  </html>\n  ```\n\n  ### Rendering content\n\n  The response may contain `text/html` content. If the root layer is targeted,\n  the `X-Up-Dismiss-Layer` header is ignored and the fragment is updated with\n  the response's HTML content.\n\n  If you know that an overlay will be closed and don't want to render HTML,\n  have the server change the render target to `:none`:\n\n  ```http\n  HTTP/1.1 200 OK\n  Content-Type: text/html\n  X-Up-Dismiss-Layer: {\"user_id\": 1012}\n  X-Up-Target: :none\n  ```\n\n  @header X-Up-Dismiss-Layer\n  @stable\n  */\n\n  /*-\n  Server-side companion libraries like unpoly-rails set this cookie so we\n  have a way to detect the request method of the initial page load.\n  There is no JavaScript API for this.\n\n  @function up.protocol.initialRequestMethod\n  @internal\n  */\n  const initialRequestMethod = u.memoize(function() {\n    return u.normalizeMethod(up.browser.popCookie('_up_method'))\n  })\n\n  /*-\n  The server may set this optional cookie to echo the HTTP method of the initial request.\n\n  If the initial page was loaded with a non-`GET` HTTP method, Unpoly prefers to make a full\n  page load when you try to update a fragment. Once the next page was loaded with a `GET` method,\n  Unpoly will again update fragments.\n\n  This fixes two edge cases you might or might not care about:\n\n  1. Unpoly replaces the initial page state so it can later restore it when the user\n     goes back to that initial URL. However, if the initial request was a POST,\n     Unpoly will wrongly assume that it can restore the state by reloading with GET.\n  2. Some browsers have a bug where the initial request method is used for all\n     subsequently pushed states. That means if the user reloads the page on a later\n     GET state, the browser will wrongly attempt a POST request.\n     This issue affects Safari 9-12 (last tested in 2019-03).\n     Modern Firefoxes, Chromes and IE10+ don't have this behavior.\n\n  In order to allow Unpoly to detect the HTTP method of the initial page load,\n  the server must set a cookie:\n\n  ```http\n  Set-Cookie: _up_method=POST\n  ```\n\n  When Unpoly boots it will look for this cookie and configure itself accordingly.\n  The cookie is then deleted in order to not affect following requests.\n\n  The **simplest implementation** is to set this cookie for every request that is neither\n  `GET` nor an [Unpoly request](/X-Up-Version). For all other requests\n  an existing `_up_method` cookie should be deleted.\n\n  @cookie _up_method\n  @stable\n  */\n\n  /*-\n  @function up.protocol.locationFromXHR\n  @internal\n  */\n  function locationFromXHR(xhr) {\n    // We prefer the X-Up-Location header to xhr.responseURL.\n    // If the server redirected to a new location, Unpoly-related headers\n    // will be encoded in the request's query params like this:\n    //\n    //     /redirect-target?_up[target]=.foo\n    //\n    // To prevent these these `_up` params from showing up in the browser URL,\n    // the X-Up-Location header will omit these params while `xhr.responseURL`\n    // will still contain them.\n    return extractHeader(xhr, 'location') || xhr.responseURL\n  }\n\n  /*-\n  The server may set this response header to set a custom browser location after a fragment update.\n\n  Without an `X-Up-Location` header Unpoly will set the browser location to the\n  [requested URL](/up.Request.prototype.url). After a redirect the URL of the last request is used.\n  You only need to set `X-Up-Location` when you want to explicitly set a different URL.\n\n  When setting `X-Up-Location` it is recommended to also set `X-Up-Method`.\n\n  ### Example\n\n  ```http\n  X-Up-Location: /current-url\n  X-Up-Method: GET\n  ```\n\n  @header X-Up-Location\n  @stable\n  */\n\n  function influencingHeadersFromResponse(response) {\n    let varyHeaderValue = response.header('Vary')\n    return u.parseTokens(varyHeaderValue, { separator: 'comma' })\n  }\n\n  /*-\n  Request headers that influenced a response should be listed in a `Vary` response header.\n\n  This tells Unpoly to [partition its cache](/caching#caching-optimized-responses) for that URL so that each\n  request header value gets a separate cache entries.\n\n  You can set a `Vary` header manually from your server-side code. You may also be using\n  a library like [unpoly-rails](https://github.com/unpoly/unpoly-rails) that sets the `Vary` header automatically.\n\n\n  > [tip]\n  > Server-side Unpoly apps may inspect [request headers](/up.protocol) to [customize or shorten responses](/optimizing-responses),\n  > e.g. by omitting content that isn't [targeted](/targeting-fragments).\n  > When a response is optimized in that fasion, a `Vary` header should be sent.\n\n  ### Example\n\n  The user makes a request to `/sitemap` in order to updates a fragment `.menu`.\n  Unpoly makes a request like this:\n\n  ```http\n  GET /sitemap HTTP/1.1\n  X-Up-Target: .menu\n  ```\n\n  The server may choose to [optimize its response](/optimizing-responses) by only render only the HTML for\n  the `.menu` fragment. It responds with the HTTP seen below. Note that it includes a `Vary` header\n  indicating that the `X-Up-Target` header has influenced the response body:\n\n  ```http\n  Vary: X-Up-Target\n\n  <div class=\"menu\">...</div>\n  ```\n\n  After observing the `Vary: X-Up-Target` header, Unpoly will partition cache entries to `/sitemap` by `X-Up-Target` value.\n  That means a request targeting `.menu` is no longer a cache hit for a request targeting a different selector.\n\n  ### Resources\n\n  - [RFC 9110: Vary](https://httpwg.org/specs/rfc9110.html#field.vary)\n  - [MDN: Vary](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary)\n  - [Key CDN: Vary](https://www.keycdn.com/support/vary-header)\n\n  @header Vary\n  @stable\n  */\n\n  /*-\n  Configures strings used in the optional [server protocol](/up.protocol).\n\n  @property up.protocol.config\n\n  @param {string} [config.csrfHeader='X-CSRF-Token']\n    The name of the HTTP header that will include the\n    [CSRF token](https://en.wikipedia.org/wiki/Cross-site_request_forgery#Synchronizer_token_pattern)\n    for AJAX requests.\n\n  @param {string|Function(): string} [config.csrfParam]\n    The `name` of the hidden `<input>` used for sending a\n    [CSRF token](https://en.wikipedia.org/wiki/Cross-site_request_forgery#Synchronizer_token_pattern) when\n    submitting a default, non-AJAX form. For AJAX request the token is sent as an\n    [HTTP header](/up.protocol.config#config.csrfHeader instead.\n\n    The parameter name can be configured as a string or as function that returns the parameter name.\n    If no name is set, no token will be sent.\n\n    Defaults to the `content` attribute of a `<meta>` tag named `csrf-param`:\n\n    ```html\n    <meta name=\"csrf-param\" content=\"authenticity_token\">\n    ```\n\n  @param {string|Function(): string} [config.csrfToken]\n    The [CSRF token](https://en.wikipedia.org/wiki/Cross-site_request_forgery#Synchronizer_token_pattern)\n    to send for unsafe requests. The token will be sent as either a HTTP header (for AJAX requests)\n    or hidden form `<input>` (for default, non-AJAX form submissions).\n\n    The token can either be configured as a string or as function that returns the token.\n    If no token is set, no token will be sent.\n\n    Defaults to the `content` attribute of a `<meta>` tag named `csrf-token`:\n\n    ```\n    <meta name='csrf-token' content='secret12345'>\n    ```\n\n  @param {string|Function(): string} [config.cspNonce]\n    A [CSP script nonce](https://content-security-policy.com/nonce/)\n    for the initial page that [booted](/up.boot) Unpoly.\n\n    The nonce let Unpoly run JavaScript in HTML attributes like\n    [`[up-on-loaded]`](/a-up-follow#up-on-loaded) or [`[up-on-accepted]`](/a-up-layer-new#up-on-accepted).\n    See [Working with a strict Content Security Policy](/csp).\n\n    The nonce can either be configured as a string or as function that returns the nonce.\n\n    Defaults to the `content` attribute of a `<meta>` tag named `csp-nonce`:\n\n    ```\n    <meta name='csrf-token' content='secret98765'>\n    ```\n\n  @param {string} [config.methodParam='_method']\n    The name of request parameter containing the original request method when Unpoly needs to\n    [wrap](/up.network.config#config.wrapMethod) the method.\n\n    Methods must be wrapped when making a [full page request](/up.network.loadPage) with a methods other\n    than GET or POST. In this case Unpoly will make a POST request with the original request method\n    in a form parameter named `_method`:\n\n    ```http\n    POST /test HTTP/1.1\n    Host: example.com\n    Content-Type: application/x-www-form-urlencoded\n    Content-Length: 11\n\n    _method=PUT\n    ```\n\n  @param {number} [config.maxHeaderSize]\n    The preferred maximum length of an `X-Up`-prefixed header's value.\n\n    This is currently only honored for `X-Up-Validate`.\n\n    @experimental\n\n  @stable\n  */\n  const config = new up.Config(() => ({\n    methodParam: '_method',\n    csrfParam() { return e.metaContent('csrf-param') },\n    csrfToken() { return e.metaContent('csrf-token') },\n    cspNonce() { return e.metaContent('csp-nonce') },\n    csrfHeader: 'X-CSRF-Token', // Used by Rails. Other frameworks use different headers.\n    maxHeaderSize: 2048,\n  }))\n\n  function csrfHeader() {\n    return u.evalOption(config.csrfHeader)\n  }\n\n  function csrfParam() {\n    return u.evalOption(config.csrfParam)\n  }\n\n  function csrfToken() {\n    return u.evalOption(config.csrfToken)\n  }\n\n  function cspNonce() {\n    return u.evalOption(config.cspNonce)\n  }\n\n  function cspNoncesFromHeader(cspHeader) {\n    let nonces = []\n    if (cspHeader) {\n      let parts = cspHeader.split(/\\s*;\\s*/)\n      for (let part of parts) {\n        if (part.indexOf('script-src') === 0) {\n          let noncePattern = /'nonce-([^']+)'/g\n          let match\n          while (match = noncePattern.exec(part)) {\n            nonces.push(match[1])\n          }\n        }\n      }\n    }\n    return nonces\n  }\n\n  function wrapMethod(method, params) {\n    params.add(config.methodParam, method)\n    return 'POST'\n  }\n\n  return {\n    config,\n    locationFromXHR,\n    titleFromXHR,\n    targetFromXHR,\n    methodFromXHR,\n    acceptLayerFromXHR,\n    contextFromXHR,\n    dismissLayerFromXHR,\n    eventPlansFromXHR,\n    expireCacheFromXHR,\n    evictCacheFromXHR,\n    csrfHeader,\n    csrfParam,\n    csrfToken,\n    cspNonce,\n    initialRequestMethod,\n    headerize,\n    wrapMethod,\n    cspNoncesFromHeader,\n    influencingHeadersFromResponse,\n  }\n})()\n", "/*-\nLogging\n=======\n\nUnpoly can print debugging information to the [browser console](https://developer.chrome.com/docs/devtools/console/).\n\nThe information in the log includes:\n\n- Which [events](/up.event) are called\n- When we're [making requests to the network](/up.request)\n- Which [compilers](/up.script) are applied to which elements\n\nBy default only errors are logged. You can enable debug logging through `up.log.enable()`:\n\n![Screenshot of Unpoly logging to the browser console](images/log-interaction-event.png){:width='800'}\n\n@see up.log.enable\n@see up.log.disable\n\n@module up.log\n*/\nup.log = (function() {\n\n  const u = up.util\n\n  /*-\n  Configures the logging output on the developer console.\n\n  @property up.log.config\n  @param {boolean} [config.enabled=false]\n    Whether Unpoly will print debugging information to the developer console.\n\n    Debugging information includes which elements are being [compiled](/up.script)\n    and which [events](/up.event) are being emitted.\n    Note that errors will always be printed, regardless of this setting.\n  @param {boolean} [config.banner=true]\n    Print the Unpoly banner to the developer console.\n  @param {boolean} [config.format=true]\n    Format output using CSS.\n  @stable\n  */\n  const config = new up.LogConfig()\n\n\n  /*-\n  Prints a logging message to the browser console.\n\n  @function up.puts\n  @param {string} message\n  @param {Array} ...args\n  @internal\n  */\n  function printToStandard(...args) {\n    if (config.enabled) {\n      printToStream('log', ...args)\n    }\n  }\n\n  /*-\n  @function up.warn\n  @internal\n  */\n  const printToWarn = (...args) => printToStream('warn', ...args)\n\n  /*-\n  @function up.log.error\n  @internal\n  */\n  const printToError = (...args) => printToStream('error', ...args)\n\n  function printToStream(stream, trace, message, ...args) {\n    printToStreamStyled(stream, trace, '', message, ...args)\n  }\n\n  function printToStreamStyled(stream, trace, customStyles, message, ...args) {\n    if (message) {\n      if (config.format) {\n        console[stream](\n          `%c${trace}%c ${message}`,\n          'color: #666666; padding: 1px 3px; border: 1px solid #bbbbbb; border-radius: 2px; font-size: 90%; display: inline-block;' + customStyles,\n          '', // reset for message after trace\n          ...args\n        )\n      } else {\n        console[stream](`[${trace}] ${u.sprintf(message, ...args)}`)\n      }\n    }\n  }\n\n  function printUserEvent(event) {\n    if (config.enabled) {\n      event = event.originalEvent || event\n      let color = '#5566cc'\n      printToStreamStyled('log', event.type, `color: white; border-color: ${color}; background-color: ${color}`, 'Interaction on %o', event.target)\n    }\n  }\n\n  function printBanner() {\n    if (!config.banner) { return }\n\n    // The ASCII art looks broken in code since we need to escape backslashes\n    const logo =\n      \" __ _____  ___  ___  / /_ __\\n\" +\n      `/ // / _ \\\\/ _ \\\\/ _ \\\\/ / // /  ${up.version}\\n` +\n      \"\\\\___/_//_/ .__/\\\\___/_/\\\\_. / \\n\" +\n      \"        / /            / /\\n\\n\"\n\n    let text = \"\"\n\n    if (!up.migrate.loaded) {\n      text += \"Load unpoly-migrate.js to polyfill deprecated APIs.\\n\\n\"\n    }\n\n    if (config.enabled) {\n      text += \"Call `up.log.disable()` to disable logging for this session.\"\n    } else {\n      text += \"Call `up.log.enable()` to enable logging for this session.\"\n    }\n\n    const color = 'color: #777777'\n\n    if (config.format) {\n      console.log('%c' + logo + '%c' + text, 'font-family: monospace;' + color, color)\n    } else {\n      console.log(logo + text)\n    }\n  }\n\n  up.on('up:framework:boot', printBanner)\n\n\n  /*-\n  Starts printing debugging information to the developer console.\n\n  Debugging information includes which elements are being [compiled](/up.script)\n  and which [events](/up.event) are being emitted.\n\n  Errors will always be printed, regardless of this setting.\n\n  @function up.log.enable\n  @stable\n  */\n  function enable() {\n    config.enabled = true\n  }\n\n  /*-\n  Stops printing debugging information to the developer console.\n\n  Errors will still be printed, even with logging disabled.\n\n  @function up.log.disable\n  @stable\n  */\n  function disable() {\n    config.enabled = false\n  }\n\n  return {\n    puts: printToStandard,\n    putsEvent: printUserEvent,\n    error: printToError,\n    warn: printToWarn,\n    config,\n    enable,\n    disable,\n  }\n})()\n\nup.puts = up.log.puts\nup.warn = up.log.warn\n", "/*-\nCustom JavaScript\n=================\n\nThe `up.script` package lets you pair HTML elements with JavaScript behavior.\n\n### Migrating existing JavaScript code\n\nUnpoly encourages you to migrate all your custom JavaScript from `DOMContentLoaded`\ncallbacks to [compilers](/up.compiler). This will make sure they run both at page load and\nwhen a new fragment is inserted later. See [Migrating legacy JavaScripts](/legacy-scripts)\nfor details.\n\n@see data\n@see legacy-scripts\n@see handling-asset-changes\n\n@see up.compiler\n@see [up-data]\n@see up.macro\n@see up.hello\n\n@module up.script\n*/\nup.script = (function() {\n\n  const u = up.util\n  const e = up.element\n\n  /*-\n  Configures defaults for script handling.\n\n  @param [config.assetSelectors]\n    An array of CSS selectors matching default [assets](/up-asset).\n\n    By default all remote scripts and stylesheets in the `<head>` are considered assets.\n    [Inline scripts](https://simpledev.io/lesson/inline-script-javascript-1/) and\n    [internal styles](https://www.tutorialspoint.com/How-to-use-internal-CSS-Style-Sheet-in-HTML)\n    are not tracked by default, but you can include them with an `[up-asset]` attribute.\n\n    Unpoly only tracks assets in the `<head>`. Elements in the `<body>` are never tracked,\n    even if they match one of the configured selectors.\n\n    See [Tracking assets](/handling-asset-changes#tracking-assets) for examples.\n\n  @param [config.noAssetSelectors]\n    Exceptions to `up.script.config.assetSelectors`.\n\n    Matching elements will *not* be considered [assets](/up-asset)\n    even if they match `up.script.config.assetSelectors`.\n\n  @param [config.scriptSelectors]\n    An array of CSS selectors matching elements that run JavaScript.\n\n    By default this matches all `<script>` tags.\n\n    Matching elements will be removed from new page fragments with `up.fragment.config.runScripts = false`.\n\n    This configuration does not affect what Unpoly considers an [assets](/up-asset).\n    For this configure `up.script.config.assetSelectors`.\n\n    @experimental\n  @param [config.noScriptSelectors]\n    Exceptions to `up.script.config.scriptSelectors`.\n\n    @experimental\n  @property up.script.config\n  @stable\n  */\n  const config = new up.Config(() => ({\n    assetSelectors: [\n      'link[rel=stylesheet]',\n      'script[src]',\n      '[up-asset]'\n    ],\n    noAssetSelectors: [\n      '[up-asset=false]',\n    ],\n    nonceableAttributes: [\n      'up-watch',\n      'up-on-accepted',\n      'up-on-dismissed',\n      'up-on-loaded',\n      'up-on-rendered',\n      'up-on-finished',\n      'up-on-error',\n      'up-on-offline',\n    ],\n    scriptSelectors: [\n      'script'\n    ],\n    noScriptSelectors: [\n      'script[type=\"application/ld+json\"]'\n    ]\n  }))\n\n  const SYSTEM_MACRO_PRIORITIES = {\n    '[up-back]': -100,        // sets [up-href] to previous URL\n    '[up-content]': -200,     // A11y for link-like elements\n    '[up-drawer]': -200,      //\n    '[up-modal]': -200,       //\n    '[up-cover]': -200,       //\n    '[up-popup]': -200,       //\n    '[up-tooltip]': -200,     //\n    '[up-dash]': -200,        // sets [up-href] unless already set, also other [up-*] attributes\n    '[up-flashes]': -200,     //\n    '[up-expand]': -300,      // distributes [up-*] attributes to parents\n    '[data-method]': -400,    // converts [data-method] to [up-method] only if link has followable [up-*] attributes\n    '[data-confirm]': -400,   // converts [data-conform] to [up-confirm] only if link has followable [up-*] attributes\n  }\n\n  let registeredCompilers = []\n  let registeredMacros = []\n\n  /*-\n  Registers a function to be called when an element with\n  the given selector is inserted into the DOM.\n\n  Use compilers to activate your custom JavaScript behavior on matching\n  elements.\n\n  You should migrate your [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)\n  callbacks to compilers. This will make sure they run both at page load and\n  when a new fragment is inserted later.\n  See [Migrating legacy JavaScripts](/legacy-scripts) for advice on migrating legacy applications.\n\n  ### Example\n\n  This compiler will insert the current time into a\n  `<div class='current-time'></div>`:\n\n  ```js\n  up.compiler('.current-time', function(element) {\n    var now = new Date()\n    element.textContent = now.toString()\n  })\n  ```\n\n  The compiler function will be called once for each matching element when\n  the page loads, or when a matching fragment is rendered later.\n\n  ### Integrating JavaScript libraries\n\n  `up.compiler()` is a great way to integrate JavaScript libraries.\n  Let's say your JavaScript plugin wants you to call `lightboxify()`\n  on links that should open a lightbox. You decide to\n  do this for all links with an `lightbox` class:\n\n  ```html\n  <a href=\"river.png\" class=\"lightbox\">River</a>\n  <a href=\"ocean.png\" class=\"lightbox\">Ocean</a>\n  ```\n\n  This JavaScript will do exactly that:\n\n  ```js\n  up.compiler('a.lightbox', function(element) {\n    lightboxify(element)\n  })\n  ```\n\n  ### Cleaning up after yourself {#destructor}\n\n  If your compiler returns a function, Unpoly will use this as a *destructor* to\n  clean up if the element leaves the DOM. Note that in Unpoly the same DOM and JavaScript environment\n  will persist through many page loads, so it's important to not create\n  [memory leaks](https://makandracards.com/makandra/31325-how-to-create-memory-leaks-in-jquery).\n\n  You should clean up after yourself whenever your compilers have global\n  side effects, like a [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval)\n  or [event handlers bound to the document root](/up.on).\n\n  Here is a version of `.current-time` that updates\n  the time every second, and cleans up once it's done. Note how it returns\n  a function that calls `clearInterval`:\n\n  ```js\n  up.compiler('.current-time', function(element) {\n    let update = () => element.textContent = new Date().toString()\n    setInterval(update, 1000)\n    return () => clearInterval(update)\n  })\n  ```\n\n  If we didn't clean up after ourselves, we would have many ticking intervals\n  operating on detached DOM elements after we have created and removed a couple\n  of `.current-time` elements.\n\n  An alternative way to register a destructor function is `up.destructor()`.\n\n  > [important]\n  > The destructor function is *not* expected to remove the element from the DOM.\n\n  ### Passing parameters to a compiler\n\n  You may attach data to an element using HTML5 data attributes\n  or encoded as JSON in an `[up-data]` attribute:\n\n  ```html\n  <span class='user' up-data='{ \"age\": 31, \"name\": \"Alice\" }'>Alice</span>\n  ```\n\n  An object with the element's attached data will be passed to your [compilers](/up.compiler)\n  as a second argument:\n\n  ```js\n  up.compiler('.user', function(element, data) { // mark-phrase \"data\"\n    console.log(data.age)  // => 31\n    console.log(data.name) // => \"Alice\"\n  })\n  ```\n\n  See [attaching data to elements](/data) for more details and examples.\n\n\n  ### Throwing exceptions from compilers\n\n  It is safe to throw exceptions from a compiler or its [destructor](#destructor).\n  A crashing compiler will *not* interrupt a render pass, or prevent other compilers on the same element.\n\n  Exceptions thrown by compiler functions are logged to the browser's [error console](https://developer.mozilla.org/en-US/docs/Web/API/console/error).\n  Unpoly also emits an [`error` event on `window`](https://developer.mozilla.org/en-US/docs/Web/API/Window/error_event).\n\n  See [errors in user code](/render-hooks#errors-in-user-code) for details.\n\n\n  ### Accessing information about the render pass\n\n  Compilers may accept a third argument with information about the current [render pass](/up.render):\n\n  ```js\n  up.compiler('.user', function(element, data, meta) { // mark-phrase \"meta\"\n    console.log(meta.layer.mode)   // => \"root\"\n    console.log(meta.revalidating) // => boolean\n  })\n  ```\n\n  The following properties are available:\n\n  | Property               | Type          |                                                 | Description                                               |\n  |------------------------|---------------|-------------------------------------------------|-----------------------------------------------------------|\n  | `meta.layer`           | `up.Layer`    |                                                 | The [layer](/up.layer) of the fragment being compiled.<br>This has the same value as `up.layer.current`. |\n  | `meta.revalidating`    | `boolean`     | <span class=\"tag is_light_gray\">optional</span> | Whether the element was reloaded for the purpose of [cache revalidation](/caching#revalidation). |\n\n  ### Registering compilers after booting\n\n  When you [deliver your JavaScript in multiple files](https://makandracards.com/makandra/498036-webpacker-loading-code-on-demand),\n  you may register compilers after Unpoly was booted.\n\n  When compilers are registered after Unpoly was booted, it is run\n  on current elements, but **only** if the compiler has the default priority.\n\n  If the compiler has a non-default priority, it is run on future\n  fragments only. In this case either remove the `{ priority }` option\n  or manually call `up.hello()` on an element that should be\n  [recompiled](/up.hello#recompiling-elements).\n\n  @function up.compiler\n  @param {string} selector\n    The selector to match.\n  @param {number} [options.priority=0]\n    The priority of this compiler.\n\n    Compilers with a higher priority are run first.\n    Two compilers with the same priority are run in the order they were registered.\n  @param {boolean} [options.batch=false]\n    If set to `true` and a fragment insertion contains multiple\n    elements matching `selector`, the `compiler` function is only called once\n    with all these elements.\n  @param {Function(element, data, meta): Function(element)} compiler\n    The function to call when an element matching `selector` is inserted.\n\n    The function may accept up to three arguments:\n\n    1. The new element being compiled.\n    2. Any [attached data](/data).\n    3. [Information about the current render pass](#accessing-information-about-the-render-pass).\n\n    The function may return a [destructor](/up.destructor) function that [cleans the compiled object](#destructor)\n    before it is removed from the DOM. The destructor function is called with the compiled element.\n  @stable\n  */\n  function registerCompiler(...args) {\n    const compiler = buildCompiler(args)\n    return insertCompiler(registeredCompilers, compiler)\n  }\n\n  /*-\n  Registers a [compiler](/up.compiler) that is run before all other compilers.\n\n  A macro lets you set UJS attributes that will be compiled afterwards.\n\n  If you want default attributes for *every* link and form, consider customizing your\n  [navigation options](/navigation).\n\n  ### Example\n\n  You will sometimes find yourself setting the same combination of UJS attributes again and again:\n\n  ```html\n  <a href=\"/page1\" up-layer=\"new modal\" up-class=\"warning\" up-animation=\"shake\">Page 1</a>\n  <a href=\"/page1\" up-layer=\"new modal\" up-class=\"warning\" up-animation=\"shake\">Page 1</a>\n  <a href=\"/page1\" up-layer=\"new modal\" up-class=\"warning\" up-animation=\"shake\">Page 1</a>\n  ```\n\n  We would much rather define a new `[smooth-link]` attribute that let's us\n  write the same links like this:\n\n  ```html\n  <a href=\"/page1\" smooth-link>Page 1</a>\n  <a href=\"/page2\" smooth-link>Page 2</a>\n  <a href=\"/page3\" smooth-link>Page 3</a>\n  ```\n\n  We can define the `[content-link]` attribute by registering a macro that\n  sets the `[up-layer]`, `[up-class]` and `[up-animation]` attributes for us:\n\n  ```js\n  up.macro('[smooth-link]', function(link) {\n    link.setAttribute('up-layer', 'new modal')\n    link.setAttribute('up-class', 'warning')\n    link.setAttribute('up-animation', 'shake')\n  })\n  ```\n\n  @function up.macro\n  @param {string} selector\n    The selector to match.\n  @param {Object} options\n    See options for [`up.compiler()`](/up.compiler).\n  @param {Function(element, data)} macro\n    The function to call when a matching element is inserted.\n\n    See [`up.compiler()`](/up.compiler#parameters) for details.\n  @stable\n  */\n  function registerMacro(...args) {\n    const macro = buildCompiler(args)\n\n    if (up.framework.evaling) {\n      // Don't allow the default priority (0) for Unpoly's own macros.\n      macro.priority ||= detectSystemMacroPriority(macro.selector) ||\n        up.fail('Unregistered priority for system macro %o', macro.selector)\n    }\n    return insertCompiler(registeredMacros, macro)\n  }\n\n  function detectSystemMacroPriority(macroSelector) {\n    macroSelector = u.evalOption(macroSelector)\n    for (let substr in SYSTEM_MACRO_PRIORITIES) {\n      const priority = SYSTEM_MACRO_PRIORITIES[substr]\n      if (macroSelector.indexOf(substr) >= 0) {\n        return priority\n      }\n    }\n  }\n\n  const parseCompilerArgs = function(args) {\n    const defaults = u.extractOptions(args)\n    const selector = args.shift()\n    const callback = args.pop()\n    const options = { ...defaults, ...u.extractOptions(args) }\n    return [selector, options, callback]\n  }\n\n  function buildCompiler(args) {\n    let [selector, options, callback] = parseCompilerArgs(args)\n\n    options = u.options(options, {\n      selector,\n      isDefault: up.framework.evaling,\n      priority: 0,\n      batch: false,\n    })\n    return Object.assign(callback, options)\n  }\n\n  function insertCompiler(queue, newCompiler) {\n    let existingCompiler\n    let index = 0\n    while ((existingCompiler = queue[index]) && (existingCompiler.priority >= newCompiler.priority)) {\n      index += 1\n    }\n    queue.splice(index, 0, newCompiler)\n\n    if (up.framework.booted) {\n      if (newCompiler.priority === 0) {\n        for (let layer of up.layer.stack) {\n          compile(layer.element, { layer, compilers: [newCompiler] })\n        }\n      } else {\n        up.puts('up.compiler()', 'Compiler %s was registered after booting Unpoly. Compiler will run for future fragments only.', newCompiler.selector)\n      }\n    }\n\n    return newCompiler\n  }\n\n  /*-\n  Applies all compilers on the given element and its descendants.\n\n  Unlike [`up.hello()`](/up.hello), this doesn't emit `up:fragment:inserted`.\n\n  @function up.script.compile\n  @param {Element} target\n  @param {Array<Element>} [options.skip]\n    A list of elements whose subtrees should not be compiled.\n  @param {Object} [options.data]\n    Override data for `target`\n  @param {Object} [options.dataMap]\n    An object mapping selectors to data-override in subtree of `target`.\n  @param {Object} [options.compilers]\n    A list of compilers to use.\n\n    Defaults to all registered macros and compilers.\n  @internal\n  */\n  function compile(fragment, options) {\n    up.emit(fragment, 'up:fragment:compile', { log: false })\n    let compilers = options.compilers || registeredMacros.concat(registeredCompilers)\n    const pass = new up.CompilerPass(fragment, compilers, options)\n    pass.run()\n  }\n\n  /*-\n  Registers a function to be called when the given element\n  is destroyed.\n\n  Elements are destroyed when they are swapped during render pass, when their [layer](/up.layer)\n  closes, or when `up.destroy()` is called on the element or its container.\n\n  An alternative way to register a destructor function is to\n  [`return` it from your compiler function](/up.compiler#destructor).\n\n  ### Example\n\n  The code below will log a message when `element` exits the DOM:\n\n  ```js\n  let element = document.querySelector('.element')\n  up.destructor(element, () => console.log('Element was destroyed!'))\n  ```\n\n  ### Reusing destructor functions\n\n  You may reuse the same destructor function for multiple element.\n  The destructor function is called with the element being destroyed:\n\n  ```js\n  let fn = (element) => console.log('Element %o was destroyed', element)\n\n  for (let element of document.querySelector('div')) {\n    up.destructor(fn)\n  }\n  ```\n\n  @function up.destructor\n  @param {Element} element\n  @param {Function(Element)|Array<Function(Element)>} destructor\n    One or more destructor functions.\n  @stable\n  */\n  function registerDestructor(element, destructor) {\n    let destructors = element.upDestructors\n    if (!destructors) {\n      destructors = []\n      element.upDestructors = destructors\n      element.classList.add('up-can-clean')\n    }\n    if (u.isArray(destructor)) {\n      destructors.push(...destructor)\n    } else {\n      destructors.push(destructor)\n    }\n  }\n\n  /*-\n  Manually compiles a page fragment that has been inserted into the DOM\n  by external code.\n\n  All registered [compilers](/up.compiler) and [macros](/up.macro) will be called\n  with matches in the given `element`.\n\n  The [`up:fragment:inserted`](/up:fragment:inserted) event is emitted on the compiled element.\n\n  ### Unpoly automatically calls `up.hello()`\n\n  When the page is manipulated using Unpoly functions or HTML selectors,\n  Unpoly will automatically call `up.hello()` on new fragments:\n\n  ```js\n  let link = document.querySelector('a[href]')\n  let { fragment } = await up.follow(link)\n  // The fragment is already compiled. No need to call up.hello().\n  ```\n\n  You only ever need to use `up.hello()` after creating DOM elements without Unpoly's involvement, for example:\n\n  - Creating elements with `document.createElement()`.\n  - Setting the `innerHTML` property on an existing element\n  - Parsing HTML into elements using browser APIs like `DOMParser()`.\n  - Elements created by other libraries\n\n  In this case compilers will *not* run automatically  and some of Unpoly's own HTML selectors will not be active.\n  We can address this by manually calling `up.hello()` on new elements:\n\n  ```js\n  let element = document.createElement('div')\n  element.innerHTML = '...'\n  // The element is not compiled yet. We must compile it manually:\n  up.hello(element)\n  ```\n\n  ### Recompiling elements\n\n  It is safe to call `up.hello()` multiple times with the same elements.\n  In particular every compiler function is guaranteed to only run once for each matching element.\n\n  If a new compiler is registered after initial compilation,\n  that new compiler is [run automatically on current elements](/up.compiler#registering-compilers-after-booting).\n\n  ### Detecting compiler errors\n\n  If a compiler function throws an error, `up.hello()` will still finish the compilation and *not* throw an error.\n\n  Instead compiler errors will print to the [error console](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n  and emit an [`error` event on `window`](https://developer.mozilla.org/en-US/docs/Web/API/Window/error_event):\n\n  ```js\n  window.addEventListener('error', function(error) {\n    alert(\"Got an error \" + error.name)\n  })\n\n  up.hello(element)\n  ```\n\n  See [errors in user code](/render-hooks#errors-in-user-code) for details.\n\n  @function up.hello\n  @param {Element|jQuery|string} element\n    The root element of the new page fragment.\n  @param {Object} [options.layer]\n    An existing `up.Layer` object can be passed to prevent re-lookup.\n    @internal\n  @param {Object} [options.data]\n    Overrides properties from the new fragment's `[up-data]`\n    with the given [data object](/data).\n    @experimental\n  @param {Object} [options.dataMap]\n    An object mapping selectors to `options.data`.\n    @internal\n  @param {Object} [options.meta={}]\n    An object containing information about this compiler pass.\n\n    This typically contains `{ request, response, revalidating }` properties.\n\n    It will be passed as a third [compiler](/up.compiler) argument.\n    @experimental\n  @return {Element}\n    The compiled element\n  @stable\n  */\n  function hello(element, options = {}) {\n    // If passed a selector, up.fragment.get() will prefer a match on the current layer.\n    element = up.fragment.get(element, options)\n\n    up.puts('up.hello()', \"Compiling fragment %o\", element)\n    compile(element, options)\n    up.fragment.emitInserted(element)\n\n    return element\n  }\n\n  /*-\n  Runs any destructor on the given fragment and its descendants in the same layer.\n\n  Unlike [`up.destroy()`](/up.destroy), this does not emit any events\n  and does not remove the element from the DOM.\n\n  @function up.script.clean\n  @param {Element} fragment\n  @param {up.Layer} options.layer\n  @internal\n  */\n  function clean(fragment, options = {}) {\n    new up.DestructorPass(fragment, options).run()\n  }\n\n  /*-\n  Returns the [data](/data) attached to the given element.\n\n  Returns an empty object if the element has no attached data.\n\n  Multiple `up.data()` calls for the same object always return the same object reference.\n\n  ### Use with `[up-data]`\n\n  You have an element with JSON data serialized into an `[up-data]` attribute:\n\n  ```html\n  <span class='person' up-data='{ \"age\": 18, \"name\": \"Bob\" }'>Bob</span>\n  ```\n\n  Calling `up.script.data()` will deserialize the JSON string into a JavaScript object:\n\n  ```js\n  up.data('.person') // returns { age: 18, name: 'Bob' }\n  ```\n\n  ### Use with data attributes\n\n  You may also use standard [`[data-*]` attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)\n  to attach data to an element.\n\n  ```html\n  <span class='person' data-first-name='Alice' data-last-name='Anderson'>Alice</span>\n  ```\n\n  The object returned by `up.data()` will contain all data attributes with camelCased keys:\n\n  ```js\n  up.data('.person') // returns { firstName: 'Alice', lastName: 'Anderson' }\n  ```\n\n  You may use both `[up-data]` and `[data-*]` attributes on the same element.\n  The object returned by `up.data()` will contain values from both.\n\n  @function up.data\n  @param {string|Element|jQuery} element\n    The element for which to return data.\n  @return {Object}\n    The [data](/data) attached to the element.\n\n    Returns an empty object if the element has no attached data.\n\n    Multiple `up.data()` calls for the same object always return the same object reference.\n  @stable\n  */\n\n  /*-\n  Attaches structured data to an element, to be consumed by a compiler or event handler.\n\n  If an element with an `[up-data]` attribute enters the DOM,\n  Unpoly will parse the JSON and pass the resulting object to any matching\n  `up.compiler()` functions and `up.on()` callbacks.\n\n  To programmatically parse an `[up-data]` attribute into an object, use `up.data(element)`.\n\n  ### Example\n\n  A container for a [Google Map](https://developers.google.com/maps/documentation/javascript/tutorial)\n  might attach the location and names of its marker pins:\n\n  ```html\n  <div class='google-map' up-data='[\n    { \"lat\": 48.36, \"lng\": 10.99, \"title\": \"Friedberg\" },\n    { \"lat\": 48.75, \"lng\": 11.45, \"title\": \"Ingolstadt\" }\n  ]'></div>\n  ```\n\n  The JSON will be parsed and handed to your compiler as a second argument:\n\n  ```js\n  up.compiler('.google-map', function(element, pins) {\n    var map = new google.maps.Map(element)\n    for (let pin of pins) {\n      var position = new google.maps.LatLng(pin.lat, pin.lng)\n      new google.maps.Marker({ position, map, title: pin.title })\n    }\n  })\n  ```\n\n  Similarly, when an event is triggered on an element annotated with\n  [`up-data`], the parsed object will be passed to any matching\n  [`up.on()`](/up.on) handlers:\n\n  ```js\n  up.on('click', '.google-map', function(event, element, data) {\n    console.log(\"There are %d pins on the clicked map\", data.pins.length)\n  })\n  ```\n\n  You may also parse the data object programmatically using the `up.data()` function:\n\n  ```\n  let data = up.data('.google-map')\n  data[0].lat // => 48.36\n  data[0].lng // => 10.99\n  data[0].title // => 'Friedberg'\n  ```\n\n  ### Alternatives\n\n  See [attaching data to elements](/data).\n\n  @selector [up-data]\n  @param up-data\n    A serialized JSON string\n  @stable\n  */\n  function readData(element) {\n    // If passed a selector, up.fragment.get() will prefer a match on the current layer.\n    element = up.fragment.get(element)\n\n    return element.upData ||= buildData(element)\n  }\n\n  function buildData(element) {\n    // up.on(document) and up.on(window) may call this with a non-element.\n    if (!element.getAttribute) {\n      return {}\n    }\n\n    let rawJSON = element.getAttribute('up-data')\n    let parsedJSON\n\n    if (rawJSON) {\n      parsedJSON = JSON.parse(rawJSON)\n\n      // If the [up-data] JSON isn't an object then we cannot offer live merging\n      // of [up-data] and [data-...] attributes.\n      //\n      // It would be better to parse this lazily, but I don't want to pay\n      // the bytes for a second Proxy handler when dealing with this edge case.\n      if (!u.isOptions(parsedJSON)) {\n        return parsedJSON\n      }\n    }\n\n    return {\n      ...element.dataset,\n      ...parsedJSON,\n      ...element.upCompileData,\n    }\n  }\n\n  function findAssets(head = document.head) {\n    return head.querySelectorAll(config.selector('assetSelectors'))\n  }\n\n  /*-\n  Tracks an element as a [frontend asset](/handling-asset-changes), usually JavaScripts and stylesheets.\n\n  When [rendering](/up.render), Unpoly compares the assets on the current page with the new assets\n  from the server response. If the assets don't match, an `up:assets:changed` event is emitted.\n\n\n  ### Default assets\n\n  By default all remote scripts and stylesheets in the `<head>` are considered assets:\n\n  ```html\n  <html>\n    <head>\n      <link rel=\"stylesheet\" href=\"/assets/frontend-5f3aa101.css\"> <!-- mark-line -->\n      <script src=\"/assets/frontend-81ba23a9.js\"></script> <!-- mark-line -->\n    </head>\n    <body>\n      ...\n    </body>\n  </html>\n  ```\n\n  Unpoly only tracks assets in the `<head>`. Elements in the `<body>` are never tracked.\n\n  [Inline scripts](https://simpledev.io/lesson/inline-script-javascript-1/) and\n  [internal styles](https://www.tutorialspoint.com/How-to-use-internal-CSS-Style-Sheet-in-HTML)\n  are not tracked by default, but you can [include them explicitly](#including-assets).\n\n\n  ### Excluding assets from tracking {#excluding-assets}\n\n  To *exclude* an element in the `<head>` from tracking, mark it with an `[up-asset=\"false\"]` attribute:\n\n  ```html\n  <script src=\"/assets/analytics.js\" up-asset=\"false\"></script>\n  ```\n\n  To exclude assets by default, configure `up.script.config.noAssetSelectors`.\n\n\n  ### Tracking additional assets {#including-assets}\n\n  To track additional assets in the `<head>`, mark them with an `[up-asset]` attribute.\n\n  For example, [inline scripts](https://simpledev.io/lesson/inline-script-javascript-1/) are not tracked by default,\n  but you can include them explictily:\n\n  ```html\n  <script up-asset>\n    window.SALE_START = new Date('2024-05-01')\n  </script>\n  ```\n\n  Only elements in the `<head>` can be matched this way.\n\n  To track additional assets by default, configure `up.script.config.assetSelectors`.\n\n  ### Tracking the backend version {#tracking-backend-versions}\n\n  To detect a new deployment of your *backend* code, consider including the deployed commit hash in a `<meta>` tag.\n\n  By marking the `<meta>` tag with `[up-asset]` it will also emit an `up:assets:changed` event when the commit hash changes:\n\n  ```html\n  <meta name=\"backend-version\" value=\"d50c6dd629e9bbc80304e14a6ba99a18c32ba738\" up-asset>\n  ```\n\n\n  @selector [up-asset]\n  @stable\n  */\n\n  function assertAssetsOK(newAssets, renderOptions) {\n    let oldAssets = findAssets()\n\n    let oldHTML = u.map(oldAssets, 'outerHTML').join()\n    let newHTML = u.map(newAssets, 'outerHTML').join()\n\n    if (oldHTML !== newHTML) {\n      up.event.assertEmitted('up:assets:changed', { oldAssets, newAssets, renderOptions })\n    }\n  }\n\n  /*-\n  This event is emitted when [frontend code](/up-asset) changes while the application is running.\n\n  There is no default behavior when assets have changed.\n  In particular no asset elements from the response are updated in the current page.\n  Even listeners may [handle changed frontend code](/handling-asset-changes#handling-changed-assets),\n  e.g. by [notifying the user](/handling-asset-changes#notifying-the-user) or [loading new assets](/handling-asset-changes#loading-new-assets).\n\n  When a server response has no `<head>`, this event is never emitted.\n\n  The event is emitted on the `document`.\n\n\n  ### Example\n\n  The code below inserts a clickable `<div id=\"new-version\">` banner when assets change.\n  The user can then choose to reload at their convenience, by clicking on the notification.\n\n  @include new-asset-notification-example\n\n  For more examples see [Handling asset changes](/handling-asset-changes).\n\n\n  ### Emission time\n\n  The event is emitted at a particular time in the [render lifecycle](/render-hooks):\n\n   - *after* new content has been loaded from the server\n   - *before* any fragments have been changed on the page.\n   - *before* the [browser history](/up.history) was changed. A future history location may be found in `event.renderOptions.location`.\n\n  If you cannot allow the rendering to proceed with changed assets, listeners may abort the render pass by calling `event.preventDefault()`.\n\n  @event up:assets:changed\n  @param {List<Element>} event.newAssets\n    A list of all [assets](/up-asset) in the new content.\n\n    The list also includes asset that have a matching element on the current page.\n\n    By default no new asset are inserted into the current page.\n    Event listeners must [explicitly load new assets](/handling-asset-changes#loading-new-assets).\n  @param {List<Element>} event.oldAssets\n    A list of [assets](/up-asset) in the `<head>` of the current page.\n  @param {Object} event.renderOptions\n    The [render options](/up.render#parameters) for the current render pass.\n  @param event.preventDefault()\n    Aborts this render pass before new content is inserted.\n\n    @experimental\n  @stable\n  */\n\n  function disableScript(scriptElement) {\n    scriptElement.type = 'up-disabled-script'\n  }\n\n  function disableScriptsInSubtree(root) {\n    let selector = config.selector('scriptSelectors')\n    u.each(e.subtree(root, selector), disableScript)\n  }\n\n  /*\n  Resets the list of registered compiler directives to the\n  moment when the framework was booted.\n  */\n  function reset() {\n    registeredCompilers = u.filter(registeredCompilers, 'isDefault')\n    registeredMacros = u.filter(registeredMacros, 'isDefault')\n  }\n\n  up.on('up:framework:reset', reset)\n\n  return {\n    config,\n    compiler: registerCompiler,\n    macro: registerMacro,\n    destructor: registerDestructor,\n    hello,\n    clean,\n    data: readData,\n    findAssets,\n    assertAssetsOK,\n    disableSubtree: disableScriptsInSubtree,\n  }\n})()\n\nup.compiler = up.script.compiler\nup.destructor = up.script.destructor\nup.macro = up.script.macro\nup.data = up.script.data\nup.hello = up.script.hello\n", "/*-\nHistory\n========\n\nThe `up.history` module helps you work with the browser history.\n\n@see up.history.location\n@see up:location:changed\n@see a[up-back]\n\n@see updating-history\n@see restoring-history\n@see analytics\n\n@module up.history\n*/\nup.history = (function() {\n\n  const u = up.util\n  const e = up.element\n\n  /*-\n  Configures behavior when the user goes back or forward in browser history.\n\n  @property up.history.config\n  @param {Array} [config.restoreTargets=[]]\n    A list of possible CSS selectors to [replace](/up.render)\n    when the user [goes back or forward in history](/restoring-history).\n\n    If more than one target is configured, the first selector matching both\n    the current page and server response will be updated.\n\n    If nothing is configured, the `<body>` element will be replaced.\n  @param {boolean} [config.enabled=true]\n    Configures whether [fragment updates](/up.render) can [update history](/updating-history).\n\n    If set to `false` Unpoly will never change history.\n\n  @param {boolean} [config.updateMetaTags=true]\n    Configures whether [history changes](/updating-history) update\n    [meta tags](/updating-history#history-state) in addition\n    to the document's title and URL.\n\n    Instead of disabling meta tag synchronization globally you may also disable it\n    per render pass. To do so pass a [`{ metaTags: false }`](/up.render#options.metaTags) option\n    or set an [`[up-meta-tags=\"false\"]`](/a-up-follow#up-meta-tags) attribute\n    on a link.\n\n  @param {Array<string>} [config.metaTagSelectors]\n    An array of CSS selectors matching default [meta tags](/up-meta)\n    that are be updated during [history changes](/updating-history).\n\n    By default popular `<meta>` and certain `<link>` elements are considered meta tags.\n\n    Because of the [large number of `[rel]` attribute values](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)\n    Unpoly the most common `link[rel]` elements are matched by default.\n    You can [include additional elements](/up-meta#including-meta-tags) by assigning an `[up-meta]` attribute\n    or by pushing their selector into this configuration array.\n\n    Only elements in the `<head>` can be matched. Elements in the `<body>` are never considered,\n    even if they match one of the configured selectors.\n\n  @param {Array<string>} [config.noMetaTagSelectors]\n    Exceptions to `up.history.config.metaTagSelectors`.\n\n    Matching elements will *not* be considered [meta tags](/up-meta)\n    even if they match `up.history.config.metaTagSelectors`.\n\n  @stable\n  */\n  const config = new up.Config(() => ({\n    enabled: true,\n    updateMetaTags: true,\n    // Prefer restoring the body instead of :main, in case the last fragment update\n    // changed the page layout. See https://github.com/unpoly/unpoly/issues/237.\n    restoreTargets: ['body'],\n    metaTagSelectors: [\n      'meta',\n      'link[rel=alternate]',\n      'link[rel=canonical]',\n      'link[rel=icon]',\n      '[up-meta]',\n      'script[type=\"application/ld+json\"]',\n    ],\n    noMetaTagSelectors: [\n      'meta[http-equiv]',\n      '[up-meta=false]',\n      // Do not invalidate existing nonced callbacks.\n      // New nonced callbacks from the response will validates and then rewritten to match the existing nonce.\n      'meta[name=csp-nonce]',\n    ],\n  }))\n\n  /*-\n  Returns a normalized URL for the previous history entry.\n\n  Only history entries added by Unpoly functions will be considered.\n\n  @property up.history.previousLocation\n  @param {string} previousLocation\n  @experimental\n  */\n  let previousLocation\n  let nextPreviousLocation\n\n  function reset() {\n    previousLocation = undefined\n    nextPreviousLocation = undefined\n    trackCurrentLocation()\n  }\n\n  const DEFAULT_NORMALIZE_OPTIONS = { hash: true }\n\n  function normalizeURL(url, options) {\n    // The reason why we this takes an { options } object is that\n    // isCurrentLocation() ignores a trailing slash. This is used to check whether\n    // we're already at the given URL before pushing a history state.\n    options = u.merge(DEFAULT_NORMALIZE_OPTIONS, options)\n    return u.normalizeURL(url, options)\n  }\n\n  /*-\n  Returns a normalized URL for the current browser location.\n\n  The returned URL is an absolute pathname like `\"/path\"` without a hostname or port.\n  It will include a `#hash` fragment and query string, if present.\n\n  > [NOTE]\n  > If the current [layer](/up.layer) does not have [visible history](/up.Layer.prototype.history),\n  > the browser's address bar will show the location of an ancestor layer.\n  > To get the location of the current layer, use `up.layer.location`.\n\n  @property up.history.location\n  @param {string} location\n  @experimental\n  */\n  function currentLocation(normalizeOptions) {\n    return normalizeURL(location.href, normalizeOptions)\n  }\n\n  /*-\n  Remembers the current URL so we can use previousURL on pop.\n\n  @function trackCurrentLocation\n  @internal\n  */\n  function trackCurrentLocation() {\n    const url = currentLocation()\n\n    if (nextPreviousLocation !== url) {\n      previousLocation = nextPreviousLocation\n      nextPreviousLocation = url\n    }\n  }\n\n  trackCurrentLocation()\n\n  // Some web frameworks care about a trailing slash, some consider it optional.\n  // Only for the equality test (\"is this the current URL?\") we consider it optional.\n  // Note that we inherit { hash: true } from DEFAULT_NORMALIZE_OPTIONS.\n  const ADDITIONAL_NORMALIZE_OPTIONS_FOR_COMPARISON = { trailingSlash: false  }\n\n  /*-\n  Returns whether the given URL matches the [current browser location](/up.history.location).\n\n  ### Examples\n\n  ```js\n  location.hostname // => '/path'\n\n  up.history.isLocation('/path') // => true\n  up.history.isLocation('/path?query') // => false\n  up.history.isLocation('/path#hash') // => false\n  up.history.isLocation('/other') // => false\n  ```\n\n  The given URL is [normalized](/up.util.normalizeURL), so any URL string pointing to the browser location\n  will match:\n\n  ```js\n  location.hostname // => '/current-host'\n  location.pathname // => '/foo'\n\n  up.history.isLocation('/foo') // => true\n  up.history.isLocation('http://current-host/foo') // => true\n  up.history.isLocation('http://otgher-host/foo') // => false\n  ```\n\n  @function up.history.isLocation\n  @param {string} url\n    The URL to compare against the current browser location.\n\n    This can be a either an absolute pathname (`/path`), a relative filename (`index.html`) or a fully qualified URL (`https://...`).\n  @param {boolean} [options.hash=true]\n    Whether to consider `#hash` fragments in the given or current URLs.\n\n    When set to `false` this function will consider the URLs `/foo#one` and `/foo#two` to be equal.\n  @return {boolean}\n  @experimental\n  */\n  function isLocation(url, options) {\n    options = u.merge(ADDITIONAL_NORMALIZE_OPTIONS_FOR_COMPARISON, options)\n    return normalizeURL(url, options) === currentLocation(options)\n  }\n\n  /*-\n  Replaces the current history entry and updates the browser's location bar with the given URL.\n\n  When the user navigates to the replaced history entry at a later time,\n  Unpoly will update the `<body>` element with the `<body>` fetched from the restored URL.\n\n  To update a fragment other than body, configure `up.history.config.restoreTargets`.\n\n  > [TIP]\n  > [Navigating](/navigation) functions like `up.follow()` or `up.submit()`\n  > will automatically update the browser's location bar for you. This can be disabled with\n  > an [`{ history: false }`](/up.render#options.history) option.\n\n  @function up.history.replace\n  @param {string} url\n  @internal\n  */\n  function replace(location, options = {}) {\n    location = normalizeURL(location)\n    if (manipulate('replaceState', location) && (options.event !== false)) {\n      emitLocationChanged({ location, reason: 'replace', log: `Replaced state for ${location}` })\n    }\n  }\n\n  /*-\n  Adds a new history entry and updates the browser's\n  address bar with the given URL.\n\n  When the user restores the new history entry later,\n  Unpoly will replace a selector from `up.history.config.restoreTargets` with the body from that URL.\n\n  Note that [fragment navigation](/navigation) will automatically update the\n  browser's location bar for you.\n\n  Does not add a history entry if the the given URL is already the current browser location.\n\n  Emits event `up:location:changed`.\n\n  @function up.history.push\n  @param {string} url\n    The URL for the history entry to be added.\n  @experimental\n  */\n  function push(location) {\n    location = normalizeURL(location)\n    if (!isLocation(location) && manipulate('pushState', location)) {\n      emitLocationChanged({ location, reason: 'push', log: `Advanced to location ${location}` })\n    }\n  }\n\n  function emitLocationChanged(props) {\n    let event = up.event.build('up:location:changed', props)\n    up.migrate?.renamedProperty?.(event, 'url', 'location')\n    up.emit(event)\n  }\n\n  /*-\n  This event is [emitted](/up.emit) after the browser's address bar was updated with a new URL.\n\n  There may be several reasons why the browser location was changed:\n\n  - A fragment update changes history through [navigation](/navigation) or rendering with `{ history: true }`.\n  - The user uses the back or forward buttons in their browser UI.\n  - Programmatic calls to `up.history.push()`.\n\n  When a [layer](/up.layer) has no [visible history](/up.Layer.prototype.history), following a link\n  will not cause the browser's address bar to be updated. In this case no `up:location:changed` event will be emitted.\n  However, a `up:layer:location:changed` will be emitted even if the address bar did not change.\n\n  The `up:location:changed` event is *not* emitted when the page is loaded initially.\n  For this observe `up:framework:booted`.\n\n  @event up:location:changed\n  @param {string} event.location\n    The URL for the history entry after the change.\n  @param {string} event.reason\n    The action that caused this change in [history state](https://developer.mozilla.org/en-US/docs/Web/API/History/state).\n\n    The value of this property is either `'push'`, `'pop'` or `'replace'`.\n\n    @experimental\n  @stable\n  */\n\n  function manipulate(method, url) {\n    if (config.enabled) {\n      const state = buildState()\n      window.history[method](state, '', url)\n      trackCurrentLocation()\n      // Signal that manipulation was successful\n      return true\n    }\n  }\n\n  function buildState() {\n    return { up: {} }\n  }\n\n  function restoreStateOnPop(state) {\n    if (!state?.up) {\n      up.puts('popstate', 'Ignoring a history state not owned by Unpoly')\n      return\n    }\n\n    let location = currentLocation()\n\n    if (up.emit('up:location:restore', { location, log: `Restoring location ${location}` }).defaultPrevented) {\n      return\n    }\n\n    up.render({\n      // The browser has already restored the URL, but hasn't changed content\n      // four our synthetic history state. We're now fetching the content for the restored URL.\n      url: location,\n      target: config.restoreTargets,\n\n      // The browser won't let us prevent the state restoration, so we're\n      // rendering whatever the server sends us.\n      fail: false,\n\n      history: true,\n      // (1) While the browser has already restored the earlier URL, we must still\n      //     pass it to render() so the current layer can track the new URL.\n      // (2) Since we're passing the current URL, up.history.push() will not add another state.\n      // (2) Pass the current URL to ensure that this exact URL is being rendered\n      //     and not something derived from the up.Response.\n      location,\n\n      // Don't replace elements in a modal that might still be open\n      // We will close all overlays and update the root layer.\n      peel: true,\n      layer: 'root',\n\n      // We won't usually have a cache hit for config.restoreTargets ('body')\n      // since most earlier cache entries are for a main target. But it doesn't hurt to try.\n      cache: true,\n\n      // We already saved view state in onPop()\n      saveScroll: false,\n      scroll: ['restore', 'auto'],\n      saveFocus: false,\n      focus: ['restore', 'auto'],\n    })\n  }\n\n  /*-\n  This event is emitted when the user is [restoring a previous history entry](/restoring-history),\n  usually by pressing the back button.\n\n  Listeners may prevent `up:location:restore` and substitute their own restoration behavior:\n\n  ```js\n  up.on('up:location:restore', function(event) {\n    event.preventDefault()\n    document.body.innerText = `Restored content for ${event.location}!`\n  })\n  ```\n\n  Preventing the event will *not* prevent the browser from restoring the URL in the address bar.\n\n  > [important]\n  > Custom restoration code should avoid pushing new history entries.\n\n  @event up:location:restore\n  @param {string} event.location\n    The URL for the restored history entry.\n  @param event.preventDefault()\n    Prevent Unpoly from restoring content for this history entry.\n\n    Preventing the event will *not* prevent the browser from restoring the URL in the address bar.\n  @stable\n  */\n\n  function onPop(event) {\n    // The earlier URL has now been restored by the browser. This cannot be prevented.\n    trackCurrentLocation()\n    let location = currentLocation()\n    emitLocationChanged({ location, reason: 'pop', log: `Navigated to history entry ${location}` })\n\n    up.viewport.saveFocus({ location: previousLocation })\n    up.viewport.saveScroll({ location: previousLocation })\n\n    restoreStateOnPop(event.state)\n  }\n\n  function register() {\n    window.addEventListener('popstate', onPop)\n\n    // Unpoly replaces the initial page state so it can later restore it when the user\n    // goes back to that initial URL. However, if the initial request was a POST,\n    // Unpoly will wrongly assume that it can restore the state by reloading with GET.\n    if (up.protocol.initialRequestMethod() === 'GET') {\n      // Replace the vanilla state of the initial page load with an Unpoly-enabled state\n      replace(currentLocation(), {event: false})\n    }\n  }\n\n  up.on('up:framework:boot', function() {\n    if ('jasmine' in window) {\n      // Can't delay this in tests.\n      register()\n    } else {\n      // Defeat an unnecessary popstate that some browsers trigger\n      // on pageload (Safari, Chrome < 34).\n      // We should check in 2023 if we can remove this.\n      setTimeout(register, 100)\n    }\n  })\n\n  function findMetaTags(head = document.head) {\n    return head.querySelectorAll(config.selector('metaTagSelectors'))\n  }\n\n  /*-\n  Configures whether this `<head>` element is updated during [history changes](/updating-history).\n\n  By default popular `<meta>` and certain `<link>` elements in the `<head>` are considered meta tags.\n  They will be updated when history is changed, in addition to the document's title and URL.\n\n  ```html\n  <link rel=\"canonical\" href=\"https://example.com/dresses/green-dresses\"> <!-- mark-line -->\n  <meta name=\"description\" content=\"About the AcmeCorp team\"> <!-- mark-line -->\n  <meta prop=\"og:image\" content=\"https://app.com/og.jpg\"> <!-- mark-line -->\n  <script src=\"/assets/app.js\"></script>\n  <link rel=\"stylesheet\" href=\"/assets/app.css\">\n  ```\n\n  The linked JavaScript and stylesheet are *not* part of history state and will not be updated\n  during history changes.\n\n  ### Including additional elements {#including-meta-tags}\n\n  To update additional `<head>` elements during history changes, mark them with an `[up-meta]` attribute:\n\n  ```html\n  <link rel=\"license\" href=\"https://opensource.org/license/mit/\" up-meta>\n  ```\n\n  Only elements in the `<head>` can be matched this way.\n\n  To include additional elements by default, configure `up.history.config.metaTagSelectors`.\n\n  ### Excluding elements {#excluding-meta-tags}\n\n  To preserve a `<head>` element during history, changes, set an `[up-meta=false]` attribute:\n\n  ```html\n  <meta charset=\"utf-8\" up-meta=\"false\">\n  ```\n\n  To exclude elements by default, configure `up.history.config.noMetaTagSelectors`.\n\n  @selector [up-meta]\n  @stable\n  */\n\n  function updateMetaTags(newMetaTags) {\n    let oldMetaTags = findMetaTags()\n    for (let oldMetaTag of oldMetaTags) {\n      // We do not use up.destroy() as meta tags may be inserted/removed\n      // multiple times as we open and close an overlay.\n      oldMetaTag.remove()\n    }\n\n    for (let newMetaTag of newMetaTags) {\n      document.head.append(newMetaTag)\n    }\n  }\n\n  /*-\n  Changes the link's destination so it points to the previous URL.\n\n  If no previous URL is known, the link will not be changed.\n\n  > [NOTE]\n  > Clicking an `a[up-back]` will *not* call [`history.back()`](https://developer.mozilla.org/en-US/docs/Web/API/History/back).\n  > Instead the link's `[up-href]` attribute will be set to the actual, previous URL.\n\n  ### Example\n\n  This link ...\n\n  ```html\n  <a href=\"/default\" up-back>\n    Go back\n  </a>\n  ```\n\n  ... will be transformed to:\n\n  ```html\n  <a href=\"/default\" up-href=\"/previous-page\" up-scroll=\"restore\" up-follow>\n    Go back\n  </a>\n  ```\n\n  @selector a[up-back]\n  @stable\n  */\n  up.macro('a[up-back], [up-href][up-back]', function(link) {\n    if (previousLocation) {\n      e.setMissingAttrs(link, {\n        'up-href': previousLocation,\n        'up-scroll': 'restore'\n      })\n      link.removeAttribute('up-back')\n      up.link.makeFollowable(link)\n    }\n  })\n\n  up.on('up:framework:reset', reset)\n\n  return {\n    config,\n    push,\n    replace,\n    get location() { return currentLocation() },\n    get previousLocation() { return previousLocation },\n    normalizeURL,\n    isLocation,\n    findMetaTags,\n    updateMetaTags,\n  }\n})()\n", "up-wrapper {\n  display: inline-block;\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiL2hvbWUvaGVubmluZy9Qcm9qZWN0cy91bnBvbHkvc3JjL3VucG9seSIsInNvdXJjZXMiOlsiZnJhZ21lbnQuc2FzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUlFIiwic291cmNlc0NvbnRlbnQiOlsidXAtd3JhcHBlclxuICAvLyBUaGlzIGVsZW1lbnQgbXVzdCBub3QgZGlzcGxheSBpbmxpbmUsIHNpbmNlIGlubGluZSBlbGVtZW50cyBoYXZlIG5vIGhlaWdodDpcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0NTUzIvdmlzdWRldC5odG1sI2lubGluZS1ub24tcmVwbGFjZWRcbiAgLy8gVGhpcyBjYXVzZXMgdS5tZWFzdXJlIGluIHVwLnZpZXdwb3J0LnJldmVhbCB0byByZXR1cm4gYW4gZWxlbWVudCB3aXRoIGEgdG9wLCBidXQgYSB6ZXJvIGhlaWdodC5cbiAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4iXX0= */", "require('./fragment.sass')\n\nconst u = up.util\nconst e = up.element\n\n/*-\nFragment API\n===========\n\nThe `up.fragment` module offers a high-level JavaScript API to work with DOM elements.\n\nA fragment is an element with some additional properties that are useful in the context of\na server-rendered web application:\n\n- Fragments are [identified by a CSS selector](/target-derivation), like a `.class` or `#id`.\n- Fragments are usually updated by a [link](/a-up-follow) for [form](/form-up-submit) that targets their selector.\n  When the server renders HTML with a matching element, the fragment is swapped with a new version.\n- As fragments enter the page they are automatically [compiled](/up.compiler) to activate [JavaScript behavior](/up.script).\n- Fragment changes may be [animated](/up.motion).\n- Fragments are placed on a [layer](/up.layer) that is isolated from other layers.\n  Unpoly features will only see or change fragments from the [current layer](/up.layer.current)\n  unless you [explicitly target another layer](/layer-option).\n- Fragments [know the URL from where they were loaded](/up.fragment.source).\n  They can be [reloaded](/up.reload) or [polled periodically](/up-poll).\n\n### Differences to `up.element`\n\nFunctions in `up.fragment` by default only see elements on the [current layer](/up.layer.current).\nThey also support non-standard CSS extensions like `:main` or `:has()`.\n\nFor low-level DOM utilities that complement the browser's native API, see `up.element`.\n\n@see navigation\n@see render-content\n@see render-hooks\n@see skipping-rendering\n@see target-derivation\n\n@see up.render\n@see up.navigate\n@see up.destroy\n@see up.reload\n@see up.fragment.get\n\n@module up.fragment\n*/\nup.fragment = (function() {\n\n  function upTagName(element) {\n    let tagName = e.tagName(element)\n    if (tagName.startsWith('up-')) {\n      return tagName\n    }\n  }\n\n  /*-\n  Configures defaults for fragment updates.\n\n  @property up.fragment.config\n\n  @param {Array<string>} [config.mainTargets=['[up-main]', 'main', ':layer']]\n    An array of CSS selectors matching default [render targets](/targeting-fragments).\n\n    When no explicit target is given, Unpoly will update the first selector matching both\n    the current page and the server response.\n\n    When [navigating](/navigation) to a main target, Unpoly will automatically\n    [reset scroll positions](/scrolling#automatic-scrolling-logic) and\n    [update the browser history](/updating-history).\n\n    This property is aliased as [`up.layer.config.any.mainTargets`](/up.layer.config#config.any.mainTargets).\n\n    Also see [targeting the main element](/targeting-fragments#targeting-the-main-element).\n\n  @param {Array<string|Function<Element>: string|undefined>} [config.targetDerivers]\n    An array of [target derivation patterns](/target-derivation#derivation-patterns)\n    used to [guess a target selector](/target-derivation) for an element.\n\n    For instance, a pattern pattern `'a[href]'` is applicable to all `<a href=\"...\">` elements.\n    It produces a target like `a[href=\"/users\"]`.\n\n    If your deriver can't be expressed in a pattern string, you may also add a function that\n    accepts an `Element` and returns a target selector, if applicable. If the function\n    is not applicable it may return `undefined`. In that case the next pattern will be tried.\n\n  @param {Array<string|RegExp>} [config.badTargetClasses]\n    An array of class names that should be ignored when\n    [deriving a target selector from a fragment](/target-derivation).\n\n    The class names may also be passed as a regular expression.\n\n  @param {boolean} [config.verifyDerivedTarget=true]\n    Whether [derived targets](/target-derivation) must match the element to be applicable.\n\n    When verification is disabled, the first applicable [derivation pattern](/target-derivation#derivation-patterns)\n    will be used, even if the produced target would match another element on the page.\n\n    Also see [Derived target verification](/target-derivation#derived-target-verification).\n\n  @param {Object} [config.navigateOptions]\n    An object of default options to apply when [navigating](/navigation).\n\n  @param {string} [config.match='region']\n    How to match fragments when a [target selector](/targeting-fragments) yields multiple results.\n\n    When set to `'region'` Unpoly will prefer to match fragments in the\n    [region](/targeting-fragments#resolving-ambiguous-selectors) of the [origin element](/up.render#options.origin).\n\n    If set to `'first'` Unpoly will always use the first matching fragment.\n\n  @param {Array<string>} [config.autoHistoryTargets]\n    When an updated fragments contain an element matching one of the given [target selectors](/targeting-fragments),\n    history will be updated with `{ history: 'auto' }`.\n\n    By default Unpoly will auto-update history when updating a [main target](#config.mainTargets).\n\n  @param {boolean|string|Function(Element)} [config.autoScroll]\n    How to scroll after updating a fragment with `{ scroll: 'auto' }`.\n\n    See [Scrolling](/scrolling) for a list of allowed values.\n\n    The default configuration tries, in this order:\n\n    - If the URL has a `#hash`, scroll to the hash.\n    - If updating a [main target](/up-main), reset scroll positions.\n\n  @param {boolean|string|Function(Element)} [config.autoFocus]\n    How to focus when updating a fragment with `{ focus: 'auto' }`.\n\n    See [Controlling focus](/focus) for a list of allowed values.\n\n    The default configuration tries the following strategies, in this order:\n\n    - Focus a `#hash` in the URL.\n    - Focus an `[autofocus]` element in the new fragment.\n    - If updating a [main target](/up-main), focus the new fragment.\n    - If focus was lost with the old fragment, re-focus a [similar](/target-derivation) element.\n    - If focus was lost with the old fragment, focus the new fragment.\n\n  @param {boolean} [config.runScripts=true]\n    Whether to execute `<script>` tags in updated fragments.\n\n    Scripts will load asynchronously, with no guarantee of execution order.\n\n    Note that the `<body>` element is a default\n    [main target](/main. If you are including your global application scripts\n    at the end of your `<body>` for performance reasons, swapping the `<body>` will re-execute\n    these scripts. In that case you can [configure a different main target](/up.fragment.config#config.mainTargets)\n    or [move your scripts to the `<head>` with a `[defer]` attribute](https://makandracards.com/makandra/504104-you-should-probably-load-your-javascript-with-script-defer),\n    which is even better for performance.\n\n  @param {boolean|Function(up.Response): boolean} [config.autoRevalidate]\n    Whether to reload a fragment after it was rendered from a cached response with `{ revalidate: 'auto' }`.\n\n    By default Unpoly verifies cached responses that are older than `up.fragment.config.expireAge`:\n\n    ```js\n    up.fragment.config.autoRevalidate = (response) => response.expired\n    ```\n\n    You can exempt server paths from being auto-revalidated like this:\n\n    ```js\n    up.fragment.config.autoRevalidate = (response) => response.expired && response.url != '/dashboard'\n    ```\n\n  @param {Function(Object): boolean} [config.skipResponse]\n    When to finishes a render pass without changes,\n    usually to [not re-insert identical content](/skipping-rendering).\n\n    The configured function accepts an object with the same properties\n    as an `up:fragment:loaded` event.\n\n    By default Unpoly skips the following responses:\n\n    - Responses without text in their body.\n      Such responses occur when a [conditional request](/conditional-requests)\n      in answered with HTTP status `304 Not Modified` or `204 No Content`.\n    - When [revalidating](/caching#revalidation), if the expired response and fresh response\n      have the exact same text.\n\n    You may also skip responses by calling `event.skip()` on an `up:fragment:loaded` event.\n\n    @experimental\n\n  @stable\n  */\n  const config = new up.Config(() => ({\n    badTargetClasses: [/^up-/],\n\n    targetDerivers: [\n      '[up-id]',\n      '[id]',\n      'html',\n      'head',\n      'body',\n      'main',\n      '[up-main]',\n      upTagName,\n      'link[rel][type]',\n      'link[rel=preload][href]',\n      'link[rel=preconnect][href]',\n      'link[rel=prefetch][href]',\n      'link[rel]',\n      'meta[property]',\n      '*[name]',\n      'form[action]',\n      'a[href]',\n      '[class]',\n      '[up-flashes]',\n      'form',\n    ],\n\n    verifyDerivedTarget: true,\n\n    // These defaults will be set to both success and fail options\n    // if { navigate: true } is given.\n    navigateOptions: {\n      cache: 'auto',\n      revalidate: 'auto',\n      feedback: true,\n      fallback: true,\n      focus: 'auto',\n      scroll: 'auto',\n      history: 'auto',\n      peel: true,\n    },\n\n    match: 'region',\n    runScripts: true,\n    autoHistoryTargets: [':main'],\n    autoFocus: ['hash', 'autofocus', 'main-if-main', 'keep', 'target-if-lost'],\n    autoScroll: ['hash', 'layer-if-main'],\n    autoRevalidate: (response) => response.expired,\n    skipResponse: defaultSkipResponse\n  }))\n\n  // Users who are not using layers will prefer settings default targets\n  // as up.fragment.config.mainTargets instead of up.layer.config.any.mainTargets.\n  u.delegate(config, ['mainTargets'], () => up.layer.config.any)\n\n  function defaultSkipResponse({ response, expiredResponse }) {\n    return !response.text || response.text === expiredResponse?.text\n  }\n\n  /*-\n  Returns the URL the given element was retrieved from.\n\n  If the given element was never directly updated, but part of a larger fragment update,\n  the [closest](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest) known source of an ancestor element is returned.\n\n  ### Example\n\n  In the HTML below, the element `#one` was loaded from the URL `/foo`:\n\n  ```html\n  <div id=\"one\" up-source\"/foo\">\n  <div id=\"two\">...</div>\n  </div>\n  ```\n\n  We can now ask for the source of an element:\n\n  ```javascript\n  up.fragment.source('#two') // returns '/foo'\n  ```\n\n  @function up.fragment.source\n  @param {Element|string} element\n    The element or CSS selector for which to look up the source URL.\n  @return {string|undefined}\n  @stable\n  */\n  function sourceOf(element, options = {}) {\n    element = getSmart(element, options)\n    return e.closestAttr(element, 'up-source')\n  }\n\n  /*-\n  Returns the last modification time of the content in the given element.\n\n  The last modification time corresponds to the `Last-Modified` header in the response that\n  rendered the fragment. Alternatively the `[up-time]` attribute of the element or an ancestor is used.\n\n  When the fragment is reloaded,\n  its modification time is sent as an `If-Modified-Since` request header. The server may check the header and decide to [skip rendering](/skipping-rendering).\n  See [Conditional requests](/conditional-requests) for a full example.\n\n  @function up.fragment.time\n  @param {Element} element\n  @return {Date|undefined}\n    The fragment's last modification time.\n\n    Return `undefined` if the fragment was rendered without a modification time.\n  @experimental\n  */\n  function timeOf(element) {\n    let value = e.closestAttr(element, 'up-time')\n    if (value && value !== 'false') {\n      // We support both Unix timestamps (e.g. \"1445412480\")\n      // and RFC 1123 times (e.g. \"Wed, 21 Oct 2015 07:28:00 GMT\").\n      if (/^\\d+$/.test(value)) {\n       value = Number(value) * 1000\n      }\n      return new Date(value)\n    }\n  }\n\n  /*-\n  Sets the time when the fragment's underlying data was last changed.\n\n  When the fragment is reloaded,\n  its known modification time is sent as an `If-Modified-Since` request header.\n  The server may check the header and decide to [skip rendering](/skipping-rendering).\n  See [Conditional requests](/conditional-requests) for a full example.\n\n  ### How `[up-etag]` attributes are set\n\n  Unpoly will automatically set an `[up-time]` attribute when a fragment was rendered\n  from a response with a `Last-Modified` header. When a fragment was rendered without such a header,\n  Unpoly will set `[up-time=false]` to indicate that its modification time is unknown.\n\n  A large response may contain multiple fragments that are later reloaded individually\n  and should each have their own modification time. In this case the server may also also render multiple\n  fragments with each their own `[up-time]` attribute.\n  See [Individual versions per fragment](/conditional-requests#fragment-versions) for an example.\n\n  @selector [up-time]\n  @param {string} up-time\n    The time when the element's underlying data was last changed.\n\n    The value can either be a Unix timestamp (e.g. `\"1445412480\"`)\n    or an [RFC 1123](https://www.rfc-editor.org/rfc/rfc1123) time (e.g. `Wed, 21 Oct 2015 07:28:00 GMT`).\n\n    You can also set the value to `\"false\"` to prevent a `If-Modified-Since` request header\n    when reloading this fragment.\n  @experimental\n  */\n\n  /*-\n  Returns the [ETag](https://en.wikipedia.org/wiki/HTTP_ETag) of the content in the given element.\n\n  The ETag corresponds to the [`ETag` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)\n  in the response that rendered the fragment. Alternatively the `[up-etag]` attribute of the element\n  or an ancestor is used.\n\n  When the fragment is reloaded,\n  its ETag is sent as an `If-None-Match` request header. The server may check the header and decide to [skip rendering](/skipping-rendering).\n  See [Conditional requests](/conditional-requests) for a full example.\n\n  @function up.fragment.etag\n  @param {Element} element\n  @return {string|undefined}\n    The fragment's ETag.\n\n    Return `undefined` if the fragment was rendered without an ETag.\n  @experimental\n  */\n  function etagOf(element) {\n    let value = e.closestAttr(element, 'up-etag')\n    if (value && value !== 'false') {\n      return value\n    }\n  }\n\n  /*-\n  Sets an [ETag](https://en.wikipedia.org/wiki/HTTP_ETag) for the fragment's underlying data.\n\n  ETags can be used to skip unnecessary rendering of unchanged content.\\\n  See [Conditional requests](/conditional-requests) for a full example.\n\n  ### How `[up-etag]` attributes are set\n\n  Unpoly will automatically set an `[up-etag]` attribute when a fragment was rendered\n  from a response with a `ETag` header. When a fragment was rendered without such a header,\n  Unpoly will set `[up-etag=false]` to indicate that its ETag is unknown.\n\n  A large response may contain multiple fragments that are later reloaded individually\n  and should each have their own ETag. In this case the server may also also render multiple\n  fragments with each their own `[up-etag]` attribute.\n  See [Individual versions per fragment](/conditional-requests#fragment-versions) for an example.\n\n  @selector [up-etag]\n  @param {string} up-etag\n    An ETag for the element's underlying data.\n\n    You can also set the value to `\"false\"` to prevent a `If-None-Match` request header\n    when reloading this fragment.\n  @experimental\n  */\n\n  /*-\n  Sets this element's source URL for [reloading](/up.reload) and [polling](/up-poll)\n\n  When an element is reloaded, Unpoly will make a request from the URL\n  that originally brought the element into the DOM. You may use `[up-source]` to\n  use another URL instead.\n\n  ### Example\n\n  Assume an application layout with an unread message counter.\n  You use `[up-poll]` to refresh the counter every 30 seconds.\n\n  By default this would make a request to the URL that originally brought the\n  counter element into the DOM. To save the server from rendering a lot of\n  unused HTML, you may poll from a different URL like so:\n\n  ```html\n  <div class=\"unread-count\" up-poll up-source=\"/unread-count\">\n    2 new messages\n  </div>\n  ```\n\n  @selector [up-source]\n  @param {string} up-source\n    The URL from which to reload this element.\n  @stable\n  */\n\n  /*-\n  Replaces elements on the current page with matching elements from a server response or HTML string.\n\n  ### Choosing which fragment to update\n\n  The current and new elements must both match the same [target selector](/targeting-fragments).\n  The selector is either given as `{ target }` option,\n  or a [main target](/up-main) is used as default.\n\n  Let's say your current HTML looks like this:\n\n  ```html\n  <div class=\"one\">old one</div>\n  <div class=\"two\">old two</div>\n  ```\n\n  We now replace the second `<div>` by [targeting](/targeting-fragments) its CSS class:\n\n  ```js\n  up.render({ target: '.two', url: '/new' })\n  ```\n\n  The server renders a response for `/new`:\n\n  ```html\n  <div class=\"one\">new one</div>\n  <div class=\"two\">new two</div>\n  ```\n\n  Unpoly looks for the selector `.two` in the response and places it\n  the current page. The current page now looks like this:\n\n  ```html\n  <div class=\"one\">old one</div>\n  <div class=\"two\">new two</div>\n  ```\n\n  Note how only `.two` has changed. The update for `.one` was\n  discarded, since it didn't match the selector.\n\n  See [targeting fragments](/targeting-fragments) for many examples for how you can target content.\n\n  ### Passing the new fragment\n\n  The new fragment content can be passed as one of the following options:\n\n  @include render-content-table\n\n  See [providing content to render](/render-content) for more details and examples.\n\n  ### Enabling side effects\n\n  This function has many options to enable scrolling, focus, request cancelation and other side\n  effects. These options are all disabled by default and must be opted into one-by-one.\n\n  To enable defaults that a user would expects for navigation (like clicking a link),\n  pass [`{ navigate: true }`](#options.navigate) or use `up.navigate()` instead.\n\n  ### Hooking into the render process\n\n  Your code may hook into specific stages of the rendering process. This allows you to modify the rendered result or handle error cases.\n\n  See [render hooks](/render-hooks) for details.\n\n  ### Concurrency\n\n  Unfinished requests [targeting](/targeting-fragments) the updated fragment or its descendants are [aborted](/aborting-requests).\n  You may control this behavior using the [`{ abort }`](#options.abort) option.\n\n  ### Events\n\n  Unpoly will emit events at various stages of the rendering process:\n\n  - `up:fragment:destroyed`\n  - `up:fragment:loaded`\n  - `up:fragment:inserted`\n\n  @function up.render\n\n  @param {string|Element|jQuery|Array<string>} [target]\n    The [target selector](/targeting-fragments) to update.\n\n    If omitted a [main target](/up-main) will be rendered.\n\n    You may also pass a DOM element or jQuery element here, in which case a selector\n    will be [derived](/target-derivation).\n    The given element will also be used as [`{ origin }`](#options.origin) for the fragment update.\n\n    You may also pass an array of selector alternatives. The first selector\n    matching in both old and new content will be used.\n\n    Instead of passing the target as the first argument, you may also pass it as\n    a [`{ target }`](#options.target) option..\n\n  @param {string|Element|jQuery|Array<string>} [options.target]\n    The [target selector](/targeting-fragments) to update.\n\n    See documentation for the [`target`](#target) parameter.\n\n  @param {string|boolean} [options.fallback=false]\n    Specifies behavior if the [target selector](/targeting-fragments) is missing from the current page or the server response.\n\n    If set to a CSS selector string, Unpoly will attempt to replace that selector instead.\n\n    If set to `true` Unpoly will attempt to replace a [main target](/up-main) instead.\n\n    If set to `false` Unpoly will immediately reject the render promise.\n\n    Also see [Dealing with missing targets](/targeting-fragments#dealing-with-missing-targets).\n\n  @param {string} [options.match='region']\n    Controls which fragment to update when the [`{ target }`](#options.target) selector yields multiple results.\n\n    When set to `'region'` Unpoly will prefer to update fragments in the\n    [region](/targeting-fragments#resolving-ambiguous-selectors) of the [origin element](/up.render#options.origin).\n\n    If set to `'first'` Unpoly will always update the first matching fragment.\n\n    Defaults to `up.fragment.config.match`, which defaults to `'region'`.\n\n  @param {boolean} [options.navigate=false]\n    Whether this fragment update is considered [navigation](/navigation).\n\n  @param {string} [options.url]\n    The URL to fetch from the server.\n\n    See [loading content from a URL](/render-content#url).\n\n    Instead of making a server request, you may also render an [existing string of HTML](/render-content#local).\n\n  @param {string} [options.method='get']\n    The HTTP method to use for the request.\n\n    Common values are `'get'`, `'post'`, `'put'`, `'patch'` and `'delete`'.\n    The value is case insensitive.\n\n  @param {Object|up.Params|FormData|string|Array} [options.params]\n    Additional [parameters](/up.Params) that should be sent as the request's\n    [query string](https://en.wikipedia.org/wiki/Query_string) or payload.\n\n    When making a `GET` request to a URL with a query string, the given `{ params }` will be added\n    to the query parameters.\n\n  @param {Object} [options.headers={}]\n    An object with additional request headers.\n\n    Unpoly will by default send a number of custom request headers.\n    E.g. the `X-Up-Target` header includes the [targeted](/targeting-fragments) CSS selector.\n    See `up.protocol` for details.\n\n  @param {string|Element} [options.content]\n    The new [inner HTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n    for the targeted fragment.\n\n    See [Updating an element's inner HTML from a string](/render-content#content).\n\n  @param {string|Element} [options.fragment]\n    A string of HTML comprising only the new fragment's [outer HTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML).\n\n    When passing `{ fragment }` you can omit the `{ target }` option.\n    The target will be [derived](/target-derivation) from the root element in the given HTML.\n\n    See [Rendering a string that only contains the fragment](/render-content#fragment).\n\n  @param {string|Element|Document} [options.document]\n    A string of HTML containing the targeted fragment.\n\n    See [Extracting an element's outer HTML from a larger HTML string](/render-content#document).\n\n  @param {up.Response} [options.response]\n    An `up.Response` object that contains the targeted fragments in its [text](/up.Response.prototype.text).\n\n    See [Rendering an up.Response object](/render-content#response).\n\n  @param {boolean|Function(up.Response): boolean} [options.fail]\n    Whether the server response should be considered failed.\n\n    By [default](/up.network.config#config.fail) any HTTP status code other than 2xx or 304 is considered an error code.\n\n    For failed responses Unpoly will use options prefixed with `fail`, e.g. `{ failTarget }`.\n    See [handling server errors](/failed-responses) for details.\n\n  @param {boolean|string} [options.history]\n    Whether the browser URL, window title and meta tags will be [updated](/updating-history).\n\n    If set to `true`, the history will always be updated, using history\n    the server response, or from given `{ title }` and `{ location }` options.\n\n    If set to `'auto'` history will be updated if the `{ target }` matches\n    a selector in `up.fragment.config.autoHistoryTargets`. By default this contains all\n    [main targets](/main).\n\n    If set to `false`, the history will remain unchanged.\n\n    @see updating-history\n\n  @param {boolean|string} [options.title]\n    An explicit document title to set before rendering.\n\n    By default the title is extracted from the response's `<title>` tag.\n    To prevent the title from being updated, pass `{ title: false }`\n\n    This option is only used when [updating history](#options.history).\n\n  @param {boolean|string} [options.location]\n    An explicit browser location URL to set before rendering.\n\n    By default Unpoly will use the `{ url }` or the final URL after the server redirected.\n    To prevent the URL from being updated, pass `{ location: false }`.\n\n    This option is only used when [updating history](#options.history).\n\n  @param {boolean|Array<Element>} [options.metaTags]\n    Whether to update [meta tags](/up-meta) in the `<head>`.\n\n    By default Unpoly will extract meta tags from the response's `<head>`.\n    To prevent meta tags from being updated, pass `{ metaTags: false }`.\n\n    This option is only used when [updating history](#options.history).\n\n  @param {string} [options.transition]\n    The name of an [transition](/up.motion) to morph between the old and few fragment.\n\n    If you are [prepending or appending content](/targeting-fragments#appending-or-prepending-content),\n    use the `{ animation }` option instead.\n\n  @param {string} [options.animation]\n    The name of an [animation](/up.motion) to reveal a new fragment when\n    [prepending or appending content](/targeting-fragments#appending-or-prepending-content).\n\n    If you are replacing content (the default), use the `{ transition }` option instead.\n\n  @param {number} [options.duration]\n    The duration of the transition or animation (in millisconds).\n\n  @param {string} [options.easing]\n    The timing function that accelerates the transition or animation.\n\n    See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function)\n    for a list of available timing functions.\n\n  @param {boolean} [options.cache]\n    Whether to read from and write to the [cache](/caching).\n\n    With `{ cache: true }` Unpoly will try to re-use a cached response before connecting\n    to the network. To prevent display of stale content, cached responses are\n    [reloaded once rendered](#options.revalidate).\n    If no cached response exists, Unpoly will make a request and cache\n    the server response.\n\n    With `{ cache: 'auto' }` Unpoly will use the cache only if `up.network.config.autoCache`\n    returns `true` for the request.\n\n    With `{ cache: false }` Unpoly will always make a network request.\n\n  @param {boolean} [options.revalidate]\n    Whether to reload the targeted fragment after it was rendered from a cached response.\n\n    With `{ revalidate: 'auto' }` Unpoly will revalidate if the `up.fragment.config.autoRevalidate(response)`\n    returns `true`. By default this configuration will return true for\n    [expired](/up.fragment.config#config.autoRevalidate) responses.\n\n    With `{ revalidate: true }` Unpoly will always revalidate cached content, regardless\n    of its age.\n\n    With `{ revalidate: false }` Unpoly will never revalidate cached content.\n\n  @param {boolean|string} [options.expireCache]\n    Whether existing [cache](/caching) entries will be [expired](/caching#expiration) with this request.\n\n    Defaults to the result of `up.network.config.expireCache`, which\n    defaults to `true` for [unsafe](https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP) requests.\n\n    To only expire some requests, pass an [URL pattern](/url-patterns) that matches requests to uncache.\n    You may also pass a function that accepts an existing `up.Request` and returns a boolean value.\n\n  @param {boolean|string} [options.evictCache]\n    Whether existing [cache](/caching) entries will be [evicted](/caching#eviction) with this request.\n\n    Defaults to the result of `up.network.config.evictCache`, which\n    defaults to `false`.\n\n    To only evict some requests, pass an [URL pattern](/url-patterns) that matches requests to uncache.\n    You may also pass a function that accepts an existing `up.Request` and returns a boolean value.\n\n  @param {boolean|string|Function(request): boolean} [options.abort='target']\n    Whether to abort existing requests before rendering.\n\n    See [aborting requests](/aborting-requests) for details and a list of options.\n\n  @param {boolean} [options.abortable=true]\n    Whether this request may be aborted by other requests [targeting](/targeting-fragments)\n    the same fragments or layer.\n\n    See [aborting requests](/aborting-requests) for details.\n\n  @param {boolean} [options.background=false]\n    Whether this request will load in the background.\n\n    Background requests deprioritized over foreground requests.\n    Background requests also won't emit `up:network:late` events and won't trigger\n    the [progress bar](/loading-indicators#progress-bar).\n\n  @param {number} [options.badResponseTime]\n    The number of milliseconds after which this request can cause\n    an `up:network:late` event and show the [progress bar](/loading-indicators#progress-bar).\n\n    Defaults to `up.network.config.badResponseTime`.\n\n    @experimental\n\n  @param {number} [options.timeout]\n    The number of milliseconds after which this request fails with a timeout.\n\n    Defaults to `up.network.config.timeout`.\n\n  @param {Element|jQuery} [options.origin]\n    The element that triggered the change.\n\n    When multiple elements in the current page match the `{ target }`,\n    Unpoly will replace an element in the [origin's proximity](/targeting-fragments#resolving-ambiguous-selectors).\n\n    The origin's selector will be substituted for `:origin` in a [target selector](/targeting-fragments).\n\n  @param {string|up.Layer|Element} [options.layer='origin current']\n    The [layer](/up.layer) in which to match and render the fragment.\n\n    See [layer option](/layer-option) for a list of allowed values.\n\n    To [open the fragment in a new overlay](/opening-overlays), pass `{ layer: 'new' }`.\n    In this case options for `up.layer.open()` may also be used.\n\n  @param {boolean} [options.peel]\n    Whether to close overlays obstructing the updated layer when the fragment is updated.\n\n    This is only relevant when updating a layer that is not the [frontmost layer](/up.layer.front).\n\n  @param {Object} [options.context]\n    An object that will be merged into the [context](/context) of the current layer once the fragment is rendered.\n\n  @param {boolean|string|Element|Function} [options.scroll]\n    How to scroll after the new fragment was rendered.\n\n    See [scrolling](/scrolling) for a list of allowed values.\n\n  @param {string} [options.scrollBehavior='instant']\n    Whether to [animate the scroll motion](/scroll-tuning#animating-the-scroll-motion)\n    when [prepending or appending](/targeting-fragments#appending-or-prepending-content) content.\n\n  @param {number} [options.revealSnap]\n    When to [snap to the top](/scroll-tuning#snapping-to-the-screen-edge)\n    when scrolling to an element near the top edge of the viewport's scroll buffer.\n\n  @param {number} [options.revealTop]\n    When to [move a revealed element to the top](/scroll-tuning#moving-revealed-elements-to-the-top)\n    when scrolling to an element.\n\n  @param {string} [options.revealPadding]\n    How much [space to leave to the closest viewport edge](/scroll-tuning#revealing-with-padding)\n    when scrolling to an element.\n\n  @param {string} [options.revealMax]\n    How many pixel lines of [high element to reveal](/scroll-tuning#revealing-with-padding) when scrolling to an element.\n\n  @param {boolean} [options.saveScroll=true]\n    Whether to [save scroll positions](/up.viewport.saveScroll) before updating the fragment.\n\n    Saved scroll positions can later be restored with [`{ scroll: 'restore' }`](/scrolling#restoring-scroll-positions).\n\n  @param {boolean|string|Element|Function} [options.focus]\n    What to focus after the new fragment was rendered.\n\n    See [Controlling focus](/focus) for a list of allowed values.\n\n  @param {boolean} [options.saveFocus=true]\n    Whether to [save focus-related state](/up.viewport.saveFocus) before updating the fragment.\n\n    Saved focus state can later be restored with [`{ focus: 'restore' }`](/focus#restoring-focus).\n\n  @param {string} [options.confirm]\n    A message the user needs to confirm before fragments are updated.\n\n    The message will be shown as a [native browser prompt](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt).\n\n    If the user does not confirm the render promise will reject and no fragments will be updated.\n\n  @param {boolean|Element} [options.feedback]\n    Whether to give the [`{ origin }`](#options.origin) element an `.up-active` class\n    and the targeted element an `.up-loading` class\n    while loading content.\n\n    See [navigation feedback](/up.feedback).\n\n  @param {Object} [options.data]\n    Overrides properties from the new fragment's `[up-data]`\n    with the given [data object](/data).\n\n  @param {Function(Event)} [options.onLoaded]\n    A callback that will be run when the server responds with new HTML,\n    but before the HTML is rendered.\n\n    The callback argument is a preventable `up:fragment:loaded` event.\n\n  @param {Function(up.RenderResult)} [options.onRendered]\n    A function to call when Unpoly has updated fragments.\n\n    This callback may be called zero, one or two times:\n\n    - When the server rendered an [empty response](/skipping-rendering#rendering-nothing), no fragments are updated. `{ onRendered }` is not called.\n    - When the server rendered a matching fragment, it will be updated on the page. `{ onRendered }` is called with the [result](/up.RenderResult).\n    - When [revalidation](/caching#revalidation) renders a second time, `{ onRendered }` is called again with the final result.\n\n    Also see [Running code after rendering](/render-hooks#running-code-after-rendering).\n\n  @param {Function(up.RenderResult)} [options.onFinished]\n    A function to call when no further DOM changes will be caused by this render pass.\n\n    In particular:\n\n    - [Animations](/up.motion) have concluded and [transitioned](https://unpoly.com/a-up-transition) elements were removed from the DOM tree.\n    - A [cached response](#options.cache) was [revalidated with the server](/caching#revalidation).\n      If the server has responded with new content, this content has also been rendered.\n\n    The callback argument is the last `up.RenderResult` that updated a fragment.\n    If [revalidation](/caching#revalidation) re-rendered the fragment, it is the result from the\n    second render pass. If no revalidation was performed, or if revalidation yielded an [empty response](/caching#when-nothing-changed),\n    it is the result from the initial render pass.\n\n    Also see [Awaiting postprocessing](/render-hooks#awaiting-postprocessing).\n\n  @param {Function(Event)} [options.onOffline]\n    A callback that will be run when the fragment could not be loaded\n    due to a [disconnect or timeout](/network-issues).\n\n    The callback argument is a preventable `up:fragment:offline` event.\n\n  @param {Function(Error)} [options.onError]\n    A callback that will be run when any error is thrown during the rendering process.\n\n    The callback is also called when the render pass fails due to [network issues](/network-issues),\n    or [aborts](/aborting-requests).\n\n    Also see [Handling errors](/render-hooks#handling-errors).\n\n  @param {boolean} [options.useKeep=true]\n    Whether [`[up-keep]`](/up-keep) elements will be preserved in the updated fragment.\n\n    @experimental\n\n  @param {boolean} [options.useHungry=true]\n    Whether [`[up-hungry]`](/up-hungry) elements outside the updated fragment will also be updated.\n\n    @experimental\n\n  @return {up.RenderJob}\n    A promise that fulfills with an `up.RenderResult` once the page has been updated.\n\n    If the update is animated, the promise will be resolved *before* the existing element was\n    removed from the DOM tree. The old element will be marked with the `.up-destroying` class\n    and removed once the animation finishes. To run code after the old element was removed,\n    pass an `{ onFinished }` callback.\n\n  @stable\n  */\n  const render = up.mockable((...args) => {\n    let options = parseTargetAndOptions(args)\n    return new up.RenderJob(options).execute()\n  })\n\n  /*-\n  [Navigates](/navigation) to the given URL by updating a major fragment in the current page.\n\n  `up.navigate()` will mimic a click on a vanilla `<a href>` link to satisfy user expectations\n  regarding scrolling, focus, request cancelation and [many other side effects](/navigation).\n  To update a fragment without side effects, use `up.render()`.\n\n  Instead of calling `up.navigate()` you may also call `up.render({ navigate: true })`.\n\n  @function up.navigate\n  @param {string|Element|jQuery} [target]\n    The [target selector](/targeting-fragments) to update.\n\n    If omitted a [main target](/main) will be rendered.\n\n    You can also pass a DOM element or jQuery element here, in which case a selector\n    will be [derived from the element attributes](/target-derivation). The given element\n    will also be set as the `{ origin }` option.\n\n    Instead of passing the target as the first argument, you may also pass it as\n    [`{ target }` option](/up.render#options.target).\n  @param {string} [options.url]\n    The URL to navigate to.\n  @param {Object} [options]\n    See options for `up.render()`.\n  @return {up.RenderJob}\n    A promise that fulfills with an `up.RenderResult` once the page has been updated.\n\n    For details, see return value for `up.render()`.\n  @stable\n  */\n  const navigate = up.mockable((...args) => {\n    const options = parseTargetAndOptions(args)\n    return render({...options, navigate: true})\n  })\n\n  /*-\n  This event is [emitted](/up.emit) after the server response was loaded, but before\n  the HTML is used to [change a fragment](/up.render).\n\n  This gives you a chance to inspect the response or DOM state right before a fragment would be inserted.\n  You may then choose to [abort](#event.preventDefault) or [skip](#event.skip) the render pass\n  to do something else instead.\n\n  The event is emitted on the targeted layer.\n\n  ### Example: Making a full page load instead\n\n  Event listeners may call `event.preventDefault()` on an `up:fragment:loaded` event\n  to prevent any changes to the DOM and browser history.\n\n  This is useful to detect an entirely different page layout\n  (like a maintenance page or fatal server error)\n  which should be open with a full page load:\n\n  ```js\n  up.on('up:fragment:loaded', (event) => {\n    let isMaintenancePage = event.response.header('X-Maintenance')\n\n    if (isMaintenancePage) {\n      // Prevent the fragment update and don't update browser history\n      event.preventDefault() // mark-line\n\n      // Make a full page load for the same request.\n      event.request.loadPage() // mark-line\n    }\n  })\n  ```\n\n  ### Example: Changing render options\n\n  Instead of preventing the update, listeners may also access the `event.renderOptions` object\n  to mutate options to the `up.render()` call that will process the server response:\n\n  ```js\n  up.on('up:fragment:loaded', async function(event) {\n    // If we see an X-Course-Completed header, render the main target\n    if (event.response.headers['X-Course-Completed']) {\n      event.renderOptions.target = ':main' // mark-line\n    }\n  })\n  ```\n\n  ### Example: Do something else, then retry\n\n  You may retry a prevented fragment update later, by calling `up.render(event.renderOptions)`:\n\n  ```js\n  up.on('up:fragment:loaded', async function(event) {\n    // When we couldn't access a page since we're signed out, the server sends a header\n    if (event.response.header('X-Session-Missing')) {\n      // Don't render the error message\n      event.preventDefault() // mark-line\n\n      // Sign in using a modal overlay\n      await up.layer.ask('/sign_in', { acceptEvent: 'app:session:created' })\n\n      // Now that we're signed in, retry the original request\n      up.render(event.renderOptions) // mark-line\n    }\n  })\n  ```\n\n  ### Example: Discarding a revalidation response\n\n  When rendering [cached](/caching) content that is too old, Unpoly automatically reloads the fragment\n  to ensure that the user never sees expired content. This process is called [cache revalidation](/caching#revalidation).\n\n  To prevent the insertion of [revalidated](/caching#revalidation) content *after* the\n  server responded you may prevent the `up:fragment:loaded` event with an `{ revalidating: true }` property.\n\n  The following would skip rendering a validation response if it has the same `X-Version` header as\n  the original, stale response:\n\n  ```js\n  up.on('up:fragment:loaded', function(event) {\n    if (event.revalidating) {\n      let newVersion = event.response.header('X-Version')\n      let oldVersion = event.expiredResponse.header('X-Version')\n      if (newVersion === oldVersion) {\n        event.skip()\n      }\n    }\n  })\n  ```\n\n  Also see [skipping unnecessary rendering](/skipping-rendering).\n\n  @event up:fragment:loaded\n\n  @param event.preventDefault()\n    Aborts this render pass without changes.\n\n    Programmatic callers will reject with an `up.AbortError`.\n\n  @param event.skip()\n    Finishes this render pass without changes,\n    usually to [not re-insert identical content](/skipping-rendering).\n\n    Programmatic callers will fulfill with an [empty](/up.RenderResult.prototype.none) `up.RenderResult`.\n\n    To configure global rules for responses that should be skipped, you may\n    also use `up.fragment.config.skipResponse` instead of registering an `up:fragment:oaded` listener.\n\n    @experimental\n\n  @param {up.Request} event.request\n    The original request to the server.\n\n  @param {up.Response} event.response\n    The response received from the server.\n\n  @param {boolean} event.revalidating\n     Whether the response contains fresh content for the purpose [cache revalidation](/caching#revalidation).\n     @experimental\n\n  @param {up.Response|undefined} event.expiredResponse\n     When [revalidating](/caching#revalidation), this property is set to the expired content\n     that is being reloaded to ensure that the user never sees stale content.\n\n     You may compare the `{ response }` and `{ expiredResponse }` properties to prevent\n     [re-insertion of identical content](/skipping-rendering).\n\n     Also see `up.fragment.config.skipResponse`.\n\n     @experimental\n\n  @param {Element|undefined} event.origin\n    The link, input or form element that caused the fragment update.\n\n    If no origin element is known, this property is left `undefined`.\n\n  @param {Object} event.renderOptions\n    Options for the `up.render()` call that will process the server response.\n\n  @stable\n  */\n\n  /*-\n  This event is emitted when the device loses its network connection while [rendering](/up.render) content.\n\n  Listeners may decide how to handle the connection loss. E.g. you may choose to display an error, or to offer a button that retries the failed request.\n  See [handling connection loss](/network-issues#disconnects) for more details and examples.\n\n  The event is emitted on the targeted layer.\n\n  @event up:fragment:offline\n\n  @param {up.Request} event.request\n    The original request to the server.\n\n  @param {Object} event.renderOptions\n    Options for the `up.render()` call that has caused the failed request.\n\n  @param {Function(Object): Promise<up.RenderResult>} event.retry()\n    Retry the render pass with the same options.\n\n    You may pass an object to override individual properties from the original render options.\n\n    Retrying causes a second render pass with its own async `up.RenderResult`.\n    The promise from the original render pass has already been rejected when `up:fragment:offline` is emitted.\n\n  @param {Element} [event.origin]\n    The link or form element that caused the fragment update.\n\n  @experimental\n  */\n\n  /*-\n  Elements with an `[up-keep]` attribute will be persisted during\n  [fragment updates](/up.fragment).\n\n  Common use cases for `[up-keep]` include:\n\n  - Elements that are expensive to [initialize](/up.compiler).\n  - Media elements (`<video>`, `<audio>`) that should retain their playback state during updates.\n  - Other elements with client-side state that is difficult to express in a URL or [data object](/data).\n\n  The element must have a [derivable target selector](/target-derivation)\n  so Unpoly can find its position within new content.\n\n  Emits the [`up:fragment:keep`](/up:fragment:keep) event.\n\n  ### Example\n\n  A common use case is to preserve the playback state of media elements:\n\n  ```html\n  <article>\n    <p>Content</p>\n    <audio id=\"player\" up-keep src=\"song.mp3\"></audio>\n  </article>\n  ```\n\n  When [targeting](/targeting-fragments) the `<article>` fragment, the `<audio>` element and\n  its playback state will be the same before and after the update. All other elements (like the `<p>`)\n  will be updated with new content.\n\n  ### Controlling if an element will be kept\n\n  Unpoly will **only** keep an existing element if:\n\n  - The existing element has an `[up-keep]` attribute\n  - The response contains an element matching the [derived target](/target-derivation) of the existing element\n  - The matching element has *no* `[up-keep=false]` attribute\n  - The [`up:fragment:keep`](/up:fragment:keep) event that is [emitted](/up.emit) on the existing element\n    is not prevented.\n  - The [`up:fragment:keep`](/up:fragment:keep) event that is passed to an [`[up-on-keep]`](#up-on-keep)\n    callback on the existing element is not prevented.\n\n  Let's say we want only keep an `<audio up-keep>` element as long as it plays\n  the same song (as identified by the tag's `src` attribute).\n\n  On the client we can achieve this by listening to an `up:keep:fragment` event\n  and preventing it if the `src` attribute of the old and new element differ:\n\n  ```js\n  up.on('up:fragment:keep', 'audio', function(event) {\n    if (element.getAttribute('src') !== event.newElement.getAttribute('src')) {\n      event.preventDefault()\n    }\n  })\n  ```\n\n  ### Updating data for kept elements\n\n  Even when keeping elements, you may reconcile its [data object](/data) with the data\n  from the new element that was discarded.\n\n  Let's say you want to display a map within an element. The center of the map\n  is encoded using an `[up-data]` attribute:\n\n  ```html\n  <div id='map' up-keep up-data='{ \"lat\": 50.86, \"lng\": 7.40 }'></div>\n  ```\n\n  We can initialize the map using a [compiler](/up.compiler) like this:\n\n  ```js\n  up.compiler('#map', function(element, data) {\n    var map = new google.maps.Map(element)\n    map.setCenter(data)\n  })\n  ```\n\n  While we want to preserve the map during page loads, we *do* want to pick up\n  a new center coordinate when the containing fragment is updated. We can do so by\n  listening to an `up:fragment:keep` event and observing `event.newData`:\n\n  ```js\n  up.compiler('#map', function(element, data) {\n    var map = new google.maps.Map(element)\n    map.setCenter(data)\n\n    map.addEventListener('up:fragment:keep', function(event) { // mark-line\n      map.setCenter(event.newData) // mark-line\n    }) // mark-line\n  })\n  ```\n\n  > [TIP]\n  > Instead of keeping an element and update its data you may also\n  > [preserve an element's data through reloads](/data#preserving-data-through-reloads).\n\n  ### Limitations\n\n  - The `[up-keep]` attribute is only supported for elements within the `<body>`.\n  - If an `<audio up-keep>` or `<video up-keep>` element is a *direct* child of the `<body>`,\n    it will lose its playback state during a fragment update. To preserve its playback\n    state, insert a container element between the `<body>` and the media element.\n\n\n  @selector [up-keep]\n  @param [up-on-keep]\n    Code to run before an existing element is kept during a page update.\n\n    Calling `event.preventDefault()` will prevent the element from being kept.\n    It will then be swapped with `newFragment`.\n\n    The code may use the variables `event` (of type `up:fragment:keep`),\n    `this` (the old fragment), `newFragment` and `newData`.\n  @stable\n  */\n\n  /*-\n  This event is [emitted](/up.emit) before an existing element is [kept](/up-keep) during\n  a page update.\n\n  Event listeners can call `event.preventDefault()` on an `up:fragment:keep` event\n  to prevent the element from being persisted. If the event is prevented, the element\n  will be replaced with a fragment from the response.\n\n  ### Example\n\n  The following would only keep an `<audio up-keep>` element as long as it plays\n  the same song (as identified by the tag's `src` attribute):\n\n  ```js\n  up.on('up:fragment:keep', 'audio', function(event) {\n    if (element.getAttribute('src') !== event.newElement.getAttribute('src')) {\n      event.preventDefault()\n    }\n  })\n  ```\n\n  > [TIP]\n  > You may also define an `up:fragment:keep` listener in HTML using an [`[up-on-keep]`](/up-keep#up-on-keep) attribute.\n\n  @event up:fragment:keep\n  @param event.preventDefault()\n    Prevents the fragment from being kept.\n\n    The fragment will be replaced with `event.newFragment`.\n  @param {Element} event.target\n    The fragment that will be kept.\n  @param {Element} event.newFragment\n    The discarded element.\n  @param {Object} event.newData\n    The [data](/data) attached to the discarded element.\n  @param {Object} event.renderOptions\n    An object with [render options](/up.render#parameters) for the current fragment update.\n  @stable\n  */\n\n  /*-\n  When any page fragment has been [inserted or updated](/up.replace),\n  this event is [emitted](/up.emit) on the fragment.\n\n  If you're looking to run code when a new fragment matches\n  a selector, use `up.compiler()` instead.\n\n  ### Example\n\n  ```js\n  up.on('up:fragment:inserted', function(event, fragment) {\n    console.log(\"Looks like we have a new %o!\", fragment)\n  })\n  ```\n\n  @event up:fragment:inserted\n  @param {Element} event.target\n    The fragment that has been inserted or updated.\n  @stable\n  */\n  function emitFragmentInserted(element) {\n    return up.emit(element, 'up:fragment:inserted', {\n      log: ['Inserted fragment %o', element],\n    })\n  }\n\n  function emitFragmentKeep(keepPlan) {\n    let { oldElement, newElement: newFragment, newData, renderOptions } = keepPlan\n    const log = ['Keeping fragment %o', oldElement]\n    const callback = e.callbackAttr(oldElement, 'up-on-keep', { exposedKeys: ['newFragment', 'newData'] })\n    return up.emit(oldElement, 'up:fragment:keep', { newFragment, newData, renderOptions, log, callback })\n  }\n\n  function emitFragmentDestroyed(fragment, options) {\n    const log = options.log ?? ['Destroyed fragment %o', fragment]\n    const parent = options.parent || document\n    return up.emit(parent, 'up:fragment:destroyed', {fragment, parent, log})\n  }\n\n  function isNotDestroying(element) {\n    return !element.closest('.up-destroying')\n  }\n\n  /*-\n  Returns whether the given fragment is both connected and not currently in a destroy animation.\n\n  @function up.fragment.isAlive\n  @param {Element} fragment\n  @internal\n  */\n  function isAlive(fragment) {\n    return fragment.isConnected && isNotDestroying(fragment)\n  }\n\n  /*-\n  Returns the first fragment matching the given CSS selector.\n\n  This function differs from `document.querySelector()` and `up.element.get()`:\n\n  - This function only selects elements in the [current layer](/up.layer.current).\n    Pass a `{ layer }`option to match elements in other layers.\n  - This function ignores elements that are being [destroyed](/up.destroy) or that are being\n    removed by a [transition](/up.morph).\n  - This function prefers to match elements in the [region](/targeting-fragments#resolving-ambiguous-selectors)\n    of a given `{ origin }` element (optional).\n  - This function supports non-standard CSS extensions like `:main` and `:has()`.\n\n  If no element matches these conditions, `undefined` is returned.\n\n  ### Matching a selector in a layer\n\n  To select the first element with the selector `.foo` on the [current layer](/up.layer.current):\n\n  ```js\n  let foo = up.fragment.get('.foo')\n  ```\n\n  You may also pass a `{ layer }` option to match elements within another layer:\n\n  ```js\n  let foo = up.fragment.get('.foo', { layer: 'any' })\n  ```\n\n  ### Matching the descendant of an element\n\n  To only select in the descendants of an element, pass a root element as the first argument:\n\n  ```js\n  let container = up.fragment.get('.container')\n  let fooInContainer = up.fragment.get(container, '.foo')\n  ```\n\n  ### Matching in the origin's region\n\n  When processing a user interaction, it is often helpful to match elements in the region of the link\n  that's being clicked or of the form field that's being changed. In this case you may pass\n  the triggering element as `{ origin }` element.\n\n  Assume the following HTML:\n\n  ```html\n  <div class=\"element\">\n  </div>\n  <div class=\"element\">\n    <a href=\"...\"></a>\n  </div>\n  ```\n\n  When processing an event for the `<a href\"...\">` you can pass the link element\n  as `{ origin }` to match the [closest](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)\n  element in the link's ancestry:\n\n  ```js\n  let link = event.target\n  up.fragment.get('.element') // returns the first .element\n  up.fragment.get('.element', { origin: link }) // returns the second .element\n  ```\n\n  When the link's does not have an ancestor matching `.element`,\n  Unpoly will search the entire layer for `.element`.\n\n  To [disable region-aware fragment matching](/targeting-fragments#disabling-region-aware-fragment-matching), pass a `{ match: 'first' }` option:\n\n  ```js\n  up.fragment.get('.element', { origin: link, match: 'first' })\n  ```\n\n  ### Matching an origin sibling\n\n  When processing a user interaction, it is often helpful to match elements\n  within the same container as the the link that's being clicked or the form field that's\n  being changed.\n\n  Assume the following HTML:\n\n  ```html\n  <div class=\"element\" id=\"one\">\n    <div class=\"inner\"></div>\n  </div>\n  <div class=\"element\" id=\"two\">\n    <a href=\"...\"></a>\n    <div class=\"inner\"></div>\n  </div>\n  ```\n\n  When processing an event for the `<a href\"...\">` you can pass the link element\n  as `{ origin }` to match within the link's container:\n\n  ```js\n  let link = event.target\n  up.fragment.get('.element .inner') // returns the first .inner\n  up.fragment.get('.element .inner', { origin: link }) // returns the second .inner\n  ```\n\n  Only when the link's `.element` container does not have a child `.inner`,\n  Unpoly will search the entire layer for `.element .inner`.\n\n  ### Elements are returned unchanged\n\n  Passing an existing element will return it unchanged:\n\n  ```js\n  let element = document.querySelector(...)\n  up.fragment.get(element) // returns the given element\n  ```\n\n  ### Similar features\n\n  - The [`.up-destroying`](/up-destroying) class is assigned to elements during their removal animation.\n  - The [`up.element.get()`](/up.element.get) function simply returns the first element matching a selector\n  without filtering by layer or destruction state.\n\n  @function up.fragment.get\n  @param {Element|jQuery|Document} [root=document]\n    The root element for the search. Only the root's children will be matched.\n\n    May be omitted to search through all elements in the current `document`.\n  @param {string|Element} selector\n    The selector to match.\n  @param {string} [options.layer='current']\n    The layer in which to select elements.\n\n    See `up.layer.get()` for a list of supported layer values.\n\n    If a root element was passed as first argument, this option is ignored and the\n    root element's layer is searched.\n  @param {string} [options.match='region']\n    Controls which fragment to return when the [`{ target }`](#options.target) selector yields multiple results.\n\n    When set to `'region'` Unpoly will prefer to match fragments in the\n    [region](/targeting-fragments#resolving-ambiguous-selectors) of the [origin element](#options.origin).\n\n    If set to `'first'` Unpoly will always return the first matching fragment.\n\n    Defaults to `up.fragment.config.match`, which defaults to `'region'`.\n\n  @param {Element|jQuery} [options.origin]\n    The origin element that triggered this fragment lookup, e.g. a button that was clicked.\n\n    Unpoly will prefer to match fragments in the [region](/targeting-fragments#resolving-ambiguous-selectors)\n    of the origin element.\n\n    The `selector` argument may refer to the origin as `:origin`.\n  @return {Element|undefined}\n    The first matching element, or `undefined` if no such element matched.\n  @stable\n  */\n  function getSmart(...args) {\n    const options = u.extractOptions(args)\n    const selector = args.pop()\n    const root = args[0]\n\n    if (u.isElementish(selector)) {\n      // up.fragment.get(root: Element, element: Element, [options]) should just return element.\n      // The given root and options are ignored. We also don't check if it's destroying.\n      // We do use e.get() to unwrap a jQuery collection.\n      return e.get(selector)\n    }\n\n    if (root) {\n      // We don't match around { origin } if we're given a root for the search.\n      return getDumb(root, selector, options)\n    }\n\n    // If we don't have a root element we will use a context-sensitive lookup strategy\n    // that tries to match elements in the region of { origin } before going through\n    // the entire layer.\n    return new up.FragmentFinder({\n      selector,\n      origin: options.origin,\n      layer: options.layer,\n      match: options.match,\n    }).find()\n  }\n\n  function getDumb(...args) {\n    return getAll(...args)[0]\n  }\n\n  /*-\n  Returns all elements matching the given CSS selector, but\n  ignores elements that are being [destroyed](/up.destroy) or that are being\n  removed by a [transition](/up.morph).\n\n  By default this function only selects elements in the [current layer](/up.layer.current).\n  Pass a `{ layer }`option to match elements in other layers. See `up.layer.get()` for a list\n  of supported layer values.\n\n  Returns an empty list if no element matches these conditions.\n\n  ### Example\n\n  To select all elements with the selector `.foo` on the [current layer](/up.layer.current):\n\n  ```js\n  let foos = up.fragment.all('.foo')\n  ```\n\n  You may also pass a `{ layer }` option to match elements within another layer:\n\n  ```js\n  let foos = up.fragment.all('.foo', { layer: 'any' })\n  ```\n\n  To select in the descendants of an element, pass a root element as the first argument:\n\n  ```js\n  var container = up.fragment.get('.container')\n  var foosInContainer = up.fragment.all(container, '.foo')\n  ```\n\n  ### Similar features\n\n  - The [`.up-destroying`](/up-destroying) class is assigned to elements during their removal animation.\n  - The [`up.element.all()`](/up.element.all) function simply returns the all elements matching a selector\n    without further filtering.\n\n  @function up.fragment.all\n\n  @param {Element|jQuery|Document} [root=document]\n    The root element for the search. Only the root's children will be matched.\n\n    May be omitted to search through all elements in the given [layer](#options.layer).\n\n  @param {string} selector\n    The selector to match.\n\n  @param {string} [options.layer='current']\n    The layer in which to select elements.\n\n    See `up.layer.get()` for a list of supported layer values.\n\n    If a root element was passed as first argument, this option is ignored and the\n    root element's layer is searched.\n\n  @param {string|Element|jQuery} [options.origin]\n    The origin element that triggered this fragment lookup, e.g. a button that was clicked.\n\n    Unpoly will prefer to match fragments in the [region](/targeting-fragments#resolving-ambiguous-selectors)\n    of the origin element.\n\n    The `selector` argument may refer to the origin as `:origin`.\n\n  @return {Element|undefined}\n    The first matching element, or `undefined` if no such element matched.\n  @stable\n  */\n  function getAll(...args) {\n    const options = u.extractOptions(args)\n    let selectorString = args.pop()\n    const root = args[0]\n\n    // (0) up.fragment.all(element) or up.fragment.all(element, element) should return an array of that element.\n    if (u.isElement(selectorString)) {\n      return [selectorString]\n    }\n\n    // (1) up.fragment.all(list) or up.fragment.all(element, list) should return the list unchanged\n    if (u.isList(selectorString)) {\n      return selectorString\n    }\n\n    // (2) up.fragment.all(rootElement, selector) should find selector within\n    //     the descendants of rootElement.\n    // (3) up.fragment.all(selector) should find selector within the current layer.\n    // (4) up.fragment.all(selector, { layer }) should find selector within the given layer(s).\n    let selector = new up.Selector(selectorString, root, options)\n    return selector.descendants(root)\n  }\n\n  /*-\n  Your [target selectors](/targeting-fragments) may use this pseudo-class\n  to replace an element with an descendant matching the given selector.\n\n  ### Example\n\n  `up.render('div:has(span)', { url: '...' })`  replaces the first `<div>` elements with at least one `<span>` among its descendants:\n\n  ```html\n  <div>\n    <span>Will be replaced</span>\n  </div>\n  <div>\n    Will NOT be replaced\n  </div>\n  ```\n\n  ### Compatibility\n\n  As a [level 4 CSS selector](https://drafts.csswg.org/selectors-4/#relational),\n  `:has()` is [currrently implemented](https://caniuse.com/#feat=css-has) in many modern browsers.\n\n  Unpoly polyfills `:has()` so you can use it in [target selectors](/targeting-fragments) in all [supported browsers](/up.framework.isSupported).\n\n  @selector :has()\n  @stable\n  */\n\n  /*-\n  Marks a target selector as optional.\n\n  If a `:maybe` selector is not found in the current page or the server response,\n  Unpoly will skip rendering the fragment instead of throwing an error.\n\n  When [updating multiple fragments](/targeting-fragments#updating-multiple-fragments)\n  you may combine required and optional selectors in a single target string.\n\n  An optional selector will be omitted from an `X-Up-Target` header unless it\n  matches in the current page.\n\n  ### Example\n\n  This link will update the fragments `.content` (required) and `.details` (optional):\n\n  ```html\n  <a href=\"/card/5\" up-target=\".content, .details:maybe\">...</a>\n  ```\n\n  Only the fragment `.content` is required to match. If `.details` is missing\n  in the current page or the server response, Unpoly will only update `.content`\n  without an error.\n\n  @selector :maybe\n  @stable\n  */\n\n  /*-\n  Returns a list of the given parent's descendants matching the given selector.\n  The list will also include the parent element if it matches the selector itself.\n\n  @function up.fragment.subtree\n  @param {Element} parent\n    The parent element for the search.\n  @param {string} selector\n    The CSS selector to match.\n  @param {up.Layer|string|Element} [options.layer = 'current]\n    The layer in whicht to match.\n  @return {NodeList<Element>|Array<Element>}\n    A list of all matching elements.\n  @experimental\n  */\n  function getSubtree(element, selector, options = {}) {\n    return new up.Selector(selector, element, options).subtree(element)\n  }\n\n  /*-\n  Returns whether the given `root` matches or contains the given selector or element.\n\n  Will always return `false` if the two elements are on different [layers](/up.layer).\n\n  @param {Element|Document} root\n  @param {string|Element} query\n    The selector or element to look for.\n  @return {boolean}\n  @function up.fragment.contains\n  @experimental\n  */\n  function contains(root, selectorOrElement) {\n    if (u.isElement(selectorOrElement)) {\n      return e.contains(root, selectorOrElement) && up.layer.get(root).contains(selectorOrElement)\n    } else {\n      return getSubtree(root, selectorOrElement).length > 0\n    }\n  }\n\n  /*-\n  Returns the first element that matches the selector by testing the element itself\n  and traversing up through ancestors in element's layers.\n\n  `up.fragment.closest()` will only match elements in the same [layer](/up.layer) as\n  the given element. To match ancestors regardless of layers, use `up.element.closest()`.\n\n  @function up.fragment.closest\n  @param {Element} element\n    The element on which to start the search.\n  @param {string} selector\n    The CSS selector to match.\n  @return {Element|null|undefined} element\n    The matching element.\n\n    Returns `null` or `undefined` if no element matches in the same layer.\n  @stable\n  */\n  function closest(element, selector, options) {\n    return new up.Selector(selector, element, options).closest(element)\n  }\n\n  /*-\n  Destroys the given element or selector.\n\n  All registered [destructors](/up.compiler#destructor) are called.\n  The element is then removed from the DOM.\n\n  Unfinished requests targeting the destroyed fragment or its descendants are [aborted](/aborting-requests).\n\n  Emits events [`up:fragment:destroyed`](/up:fragment:destroyed).\n\n  ### Animating the removal\n\n  You may animate the element's removal by passing an option like `{ animate: 'fade-out' }`.\n  Unpoly ships with a number of [predefined animations](/up.animate#named-animations) and\n  you may so define [custom animations](/up.animation).\n\n  If the element's removal is animated, the element will remain in the DOM until after the animation\n  has completed. While the animation is running the element will be given the `.up-destroying` class.\n  The element will also be given the `[aria-hidden]` attribute to remove it from\n  the accessibility tree.\n\n  Elements that are about to be destroyed (but still animating) are ignored by all\n  functions that lookup fragments, like `up.fragment.all()`, `up.fragment.get()` or `up.fragment.closest()`.\n\n  ### Detecting destructor errors\n\n  If a [destructor](/up.compiler#destructor) throws an error, `up.destroy()` will still remove the element and *not* throw an error.\n\n  Instead compiler errors will print to the [error console](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n  and emit an [`error` event on `window`](https://developer.mozilla.org/en-US/docs/Web/API/Window/error_event).\n\n  See [errors in user code](/render-hooks#errors-in-user-code) for details.\n\n  @function up.destroy\n  @param {string|Element|jQuery} target\n  @param {string|Function(element, options): Promise} [options.animation='none']\n    The animation to use before the element is removed from the DOM.\n  @param {number} [options.duration]\n    The duration of the animation. See [`up.animate()`](/up.animate).\n  @param {string} [options.easing]\n    The timing function that controls the animation's acceleration. See [`up.animate()`](/up.animate).\n  @param {Function} [options.onFinished]\n    A callback that is run when any animations are finished and the element was removed from the DOM.\n  @return undefined\n  @stable\n  */\n  function destroy(...args) {\n    const options = parseTargetAndOptions(args)\n\n    if (options.element = getSmart(options.target, options)) {\n      new up.Change.DestroyFragment(options).execute()\n    }\n\n    return up.migrate.formerlyAsync?.('up.destroy()')\n  }\n\n  function parseTargetAndOptions(args) {\n    const options = u.parseArgIntoOptions(args, 'target')\n    if (u.isElement(options.target)) {\n      options.origin ||= options.target\n    }\n    return options\n  }\n\n  /*-\n  Elements are assigned the `.up-destroying` class before they are [destroyed](/up.destroy)\n  or while they are being removed by a [transition](/up.morph).\n\n  If the removal is [animated](/up.destroy#animating-the-removal),\n  the class is assigned before the animation starts.\n\n  ### Destroying elements are ignored\n\n  Elements that are being destroyed (but still animating) are ignored by all\n  functions for fragment lookup:\n\n  - `up.fragment.all()`\n  - `up.fragment.get()`\n  - `up.fragment.closest()`\n\n  Note that the low-level DOM helpers in `up.element` will *not* ignore elements that are being destroyed.\n\n  ### Accessibility\n\n  While an element's destruction is animating, the element is also assigned an\n  [`[aria-hidden]`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden) attribute.\n  This hides the element from the browser's accessibility API.\n\n  @selector .up-destroying\n  @stable\n  */\n\n  function markFragmentAsDestroying(element) {\n    element.classList.add('up-destroying')\n    element.setAttribute('aria-hidden', 'true')\n  }\n\n  /*-\n  This event is [emitted](/up.emit) after a page fragment was [destroyed](/up.destroy) and removed from the DOM.\n\n  If the destruction is animated, this event is emitted after the animation has ended.\n\n  The event is emitted on the parent element of the fragment that was removed.\n\n  @event up:fragment:destroyed\n  @param {Element} event.fragment\n    The detached element that has been removed from the DOM.\n  @param {Element} event.parent\n    The former parent element of the fragment that has now been detached from the DOM.\n  @param {Element} event.target\n    The former parent element of the fragment that has now been detached from the DOM.\n  @stable\n  */\n\n  /*-\n  Replaces the given element with a fresh copy fetched from the server.\n\n  By default, reloading is not considered a [user navigation](/navigation) and e.g. will not update\n  the browser location. You may change this with `{ navigate: true }`.\n\n  ### Example\n\n  ```js\n  let { fragment } = await up.reload('.inbox')\n  console.log(\"New .inbox element: \", fragment)\n  ```\n\n  ### Controlling the URL that is reloaded\n\n  Unpoly remembers [the URL from which a fragment was loaded](/up.fragment.source),\n  so you don't usually need to pass a URL when reloading.\n\n  To reload from another URL, pass a `{ url }` option or set an `[up-source]` attribute\n  on the element being reloaded or its ancestors.\n\n  ### Skipping updates when nothing changed\n\n  Your server-side app is not required to re-render a request if there are no changes to the cached content.\n\n  By supporting [conditional HTTP requests](/conditional-requests) you can quickly produce an empty response for unchanged content.\n\n  @function up.reload\n\n  @param {string|Element|Array<Element>|jQuery} [target]\n    The element that should be reloaded.\n\n    If omitted, an element matching a selector in `up.fragment.config.mainTargets` will be reloaded.\n\n    When an `Element` object is passed, a target selector will be [derived](/target-derivation).\n\n  @param {Object} [options]\n    See options for `up.render()`.\n\n  @param {string} [options.url]\n    The URL from which to reload the fragment.\n    This defaults to the URL from which the fragment was originally loaded.\n\n  @param {Object} [options.data]\n    Overrides properties from the new fragment's `[up-data]`\n    with the given [data object](/data).\n\n  @param {boolean} [options.keepData]\n    [Preserve](/data#preserving-data-through-reloads) the reloaded fragment's [data object](/data).\n\n    Properties from the new fragment's `[up-data]`  are overridden with the old fragment's `[up-data]`.\n\n  @param {string} [options.navigate=false]\n    Whether the reloading constitutes a [user navigation](/navigation).\n\n  @return {up.RenderJob}\n    A promise that fulfills with an `up.RenderResult` once the fragment\n    has been reloaded and rendered.\n\n  @stable\n  */\n  function reload(...args) {\n    const options = parseTargetAndOptions(args)\n    options.target ||= ':main'\n    const element = getSmart(options.target, options)\n    options.url ||= sourceOf(element)\n    options.headers = u.merge(options.headers, conditionalHeaders(element))\n    if (options.keepData || e.booleanAttr(element, 'up-keep-data')) {\n      options.data = up.data(element)\n    }\n    up.migrate.postprocessReloadOptions?.(options)\n    return render(options)\n  }\n\n  function conditionalHeaders(element) {\n    let headers = {}\n    let time = timeOf(element)\n    if (time) {\n      headers['If-Modified-Since'] = time.toUTCString()\n    }\n    let etag = etagOf(element)\n    if (etag) {\n      headers['If-None-Match'] = etag\n    }\n    return headers\n  }\n\n  /*-\n  Fetches this given URL with JavaScript and [replaces](/up.replace) the\n  [current layer](/up.layer.current)'s [main element](/up.fragment.config#config.mainTargets)\n  with a matching fragment from the server response.\n\n  ### Example\n\n  This would replace the current page with the response for `/users`:\n\n  ```js\n  up.visit('/users')\n  ```\n\n  @function up.visit\n\n  @param {string} url\n    The URL to visit.\n\n  @param {Object} [options]\n    See options for `up.render()`.\n\n  @return {up.RenderJob}\n    A promise that fulfills with an `up.RenderResult`\n    once the destination was loaded and rendered.\n\n  @stable\n  */\n  function visit(url, options) {\n    return navigate({...options, url})\n  }\n\n  const KEY_PATTERN = /^(onFail|on|fail)?(.+)$/\n\n  function successKey(key) {\n    let match = KEY_PATTERN.exec(key)\n    if (match) {\n      let [_, prefix, suffix] = match\n\n      switch (prefix) {\n        case 'onFail':\n          return 'on' + u.upperCaseFirst(suffix)\n        case 'fail':\n          return u.lowerCaseFirst(suffix)\n      }\n\n      // Return undefined for prefixes \"on\" and undefined\n    }\n  }\n\n  function failKey(key) {\n    let match = KEY_PATTERN.exec(key)\n    if (match) {\n      let [_, prefix, suffix] = match\n\n      switch (prefix) {\n        case 'on':\n          return 'onFail' + u.upperCaseFirst(suffix)\n        case undefined:\n          return 'fail' + u.upperCaseFirst(suffix)\n      }\n\n      // Return undefined for prefixes \"onFail\" and \"fail\"\n    }\n  }\n\n  /*-\n  [Derives a CSS selector](/target-derivation) that matches the given element as good as possible.\n\n  If no target can be derived and [verified](/target-derivation#derived-target-verification), an error `up.CannotTarget` is thrown.\n\n  ### Example\n\n  ```js\n  element = up.element.createFromHTML('<span class=\"klass\">...</span>')\n  selector = up.fragment.toTarget(element) // returns '.klass'\n  ```\n\n  @function up.fragment.toTarget\n  @param {Element|string} element\n    The element for which to create a selector.\n\n    When a string is given, it is returned unchanged.\n  @param {Element} [options.origin]\n    The origin used to [resolve an ambiguous selector](/targeting-fragments#resolving-ambiguous-selectors)\n    during [target verification](/target-derivation#derived-target-verification).\n  @stable\n  */\n  function toTarget(element, options) {\n    return u.presence(element, u.isString) || tryToTarget(element, options) || cannotTarget(element)\n  }\n\n  /*-\n  Returns whether Unpoly can [derive a target selector](/target-derivation) for the given element.\n\n  @function up.fragment.isTargetable\n  @param {Element} element\n  @return {boolean}\n  @experimental\n  */\n  function isTargetable(element) {\n    return !!tryToTarget(element)\n  }\n\n  function untargetableMessage(element) {\n    return `Cannot derive good target selector from a <${e.tagName(element)}> element without identifying attributes. Try setting an [id] or configure up.fragment.config.targetDerivers.`\n  }\n\n  function cannotTarget(element) {\n    throw new up.CannotTarget(untargetableMessage(element))\n  }\n\n  function tryToTarget(element, options) {\n    return u.findResult(config.targetDerivers, function(deriver) {\n      let target = deriveTarget(element, deriver)\n\n      if (target && isGoodTarget(target, element, options)) {\n        return target\n      }\n    })\n  }\n\n  function deriveTarget(element, deriver) {\n    if (u.isFunction(deriver)) {\n      return deriver(element)\n    } else if (element.matches(deriver)) {\n      try {\n        // Now that we know that a deriver is applicable to our element, we're using\n        // the element's tag name and attribute to form a more specific target.\n        // E.g. a deriver '[up-id]' should result in a target '[up-id=\"messages\"]'.\n        return deriveTargetFromPattern(element, deriver)\n      } catch (e) {\n        if (e instanceof up.CannotParse) {\n          // This error can be thrown for two reasons:\n          // (1) up.element.parseSelector() cannot parse the given string\n          // (2) up.element.parseSelector() parses a selector with a depth > 1.\n          return deriver\n        } else {\n          throw e\n        }\n      }\n    }\n  }\n\n  function deriveTargetFromPattern(element, deriver) {\n    // Now that we know that a deriver is applicable to our element, we're using\n    // the element's tag name and attribute to form a more specific target.\n    // E.g. a deriver '[up-id]' should result in a target '[up-id=\"messages\"]'.\n\n    let { includePath, excludeRaw } = up.element.parseSelector(deriver)\n\n    if (includePath.length !== 1) {\n      // It's not straightforward to improve a descendant selector like '.foo .bar' or '.foo > .bar'.\n      // It's also not common to see such selectors configured in config.targetDerivers.\n      // Hence we just return the matching deriver.\n      throw new up.CannotParse(deriver)\n    }\n\n    let { tagName, id, classNames, attributes } = includePath[0]\n    let result = ''\n\n    if (tagName === '*') {\n      // In a deriver '*' means to include the actual tag name in the target-\n      result += e.tagName(element)\n    } else if (tagName) {\n      // If a deriver contains an actual tag name like 'main' it becomes\n      // part of the target selector.\n      result += tagName\n    }\n\n    for (let className of classNames) {\n      result += e.classSelector(className)\n    }\n\n    if (id) {\n      result += e.idSelector(id)\n    }\n\n    for (let attributeName in attributes) {\n      // If a deriver contains an attribute value (e.g. '[rel=canonical]') we use that for the target.\n      // If the deriver has a value-less attribute (e.g. '[rel]') we use the actual attribute value from the element.\n      let attributeValue = attributes[attributeName] || element.getAttribute(attributeName)\n\n      if (attributeName === 'id') {\n        // We allow a deriver '[id]' to apply to all elements with an ID.\n        // However, we want to use an ID selector ('#foo') instead of an attribute selector ('[id=foo]').\n        result += e.idSelector(attributeValue)\n      } else if (attributeName === 'class') {\n        // We allow a deriver '[class]' to apply to all elements with a class.\n        // However, we want to (1) filter class against config.badTargetClasses and\n        // (2) use an class selector ('.foo') instead of an attribute selector ('[class=foo]').\n        for (let goodClass of goodClassesForTarget(element)) {\n          result += e.classSelector(goodClass)\n        }\n      } else {\n        result += e.attrSelector(attributeName, attributeValue)\n      }\n    }\n\n    if (excludeRaw) {\n      result += excludeRaw\n    }\n\n    return result\n  }\n\n  function isGoodTarget(target, element, options = {}) {\n    return !isAlive(element) || !config.verifyDerivedTarget || up.fragment.get(target, { layer: element, ...options }) === element\n  }\n\n  /*-\n  Sets an unique identifier for this element.\n\n  This identifier is used in [target derivation](/target-derivation)\n  to create a CSS selector that matches this element precisely.\n\n  If the element already has [other attributes that make a good identifier](/target-derivation#derivation-patterns),\n  like a good `[id]` or `[class]` attribute, it is not necessary to also set `[up-id]`.\n\n  ### Example\n\n  Take this element:\n\n  ```html\n  <a href=\"/\">Homepage</a>\n  ```\n\n  Unpoly cannot generate a good CSS selector for this element:\n\n  ```js\n  up.fragment.toTarget(element)\n  // throws error: up.CannotTarget\n  ```\n\n  We can improve this by assigning an `[up-id]`:\n\n  ```html\n  <a href=\"/\" up-id=\"link-to-home\">Open user 4</a>\n  ```\n\n  The attribute value is used to create a better selector:\n\n  ```js\n  up.fragment.toTarget(element)\n  // returns '[up-id=\"link-to-home\"]'\n  ```\n\n  @selector [up-id]\n  @param up-id\n    A string that uniquely identifies this element.\n  @stable\n  */\n\n  function matchesPattern(pattern, str) {\n    if (u.isRegExp(pattern)) {\n      return pattern.test(str)\n    } else {\n      return pattern === str\n    }\n  }\n\n  function goodClassesForTarget(element) {\n    let isGood = (klass) => !u.some(config.badTargetClasses, (badTargetClass) => matchesPattern(badTargetClass, klass))\n    return u.filter(element.classList, isGood)\n  }\n\n  const MAIN_PSEUDO = /:main\\b/\n  const LAYER_PSEUDO = /:layer\\b/\n  const ORIGIN_PSEUDO = /:origin\\b/\n\n  function containsMainPseudo(target) {\n    return MAIN_PSEUDO.test(target)\n  }\n\n  function expandTargets(targets, options = {}) {\n    const { layer } = options\n    if (layer !== 'new' && !(layer instanceof up.Layer)) {\n      up.fail('Must pass an up.Layer as { layer } option, but got %o', layer)\n    }\n\n    // Copy the list since targets might be a jQuery collection, and this does not support shift or push.\n    targets = u.copy(u.wrapList(targets))\n\n    const expanded = []\n\n    while (targets.length) {\n      let target = targets.shift()\n      if (target === true) target = ':main'\n\n      if (containsMainPseudo(target)) {\n        let mode = resolveMode(options)\n        let replaced = up.layer.mainTargets(mode).map((mainTarget) => target.replace(MAIN_PSEUDO, mainTarget))\n        targets.unshift(...replaced)\n      } else if (LAYER_PSEUDO.test(target)) {\n        // Discard this target for new layers, which don't have a first-swappable-element.\n        // Also don't && the layer check into the `else if` condition above, or it will\n        // be returned as a verbatim string below.\n        if (layer === 'new' || layer.opening) continue\n        let firstSwappableTarget = toTarget(layer.getFirstSwappableElement(), options)\n        targets.unshift(target.replace(LAYER_PSEUDO, firstSwappableTarget))\n      } else if (u.isElementish(target)) {\n        expanded.push(toTarget(target, options))\n      } else if (u.isString(target)) {\n        expanded.push(resolveOrigin(target, options))\n      }\n    }\n\n    return u.uniq(expanded)\n  }\n\n  function resolveMode({ layer, mode }) {\n    if (layer === 'new') {\n      return mode || up.fail('Must pass a { mode } option together with { layer: \"new\" }')\n    } else {\n      return layer.mode\n    }\n  }\n\n  function modernResolveOrigin(target, { origin } = {}) {\n    return target.replace(ORIGIN_PSEUDO, function(match) {\n      if (origin) {\n        return toTarget(origin)\n      } else {\n        up.fail('Missing { origin } element to resolve \"%s\" reference (found in %s)', match, target)\n      }\n    })\n  }\n\n  function resolveOrigin(...args) {\n    return (up.migrate.resolveOrigin || modernResolveOrigin)(...args)\n  }\n\n  function splitTarget(target) {\n    return u.parseTokens(target, { separator: 'comma' })\n  }\n\n  function parseTargetSteps(target, options = {}) {\n    let defaultPlacement = options.defaultPlacement || 'swap'\n    let defaultMaybe = options.defaultMaybe ?? false\n\n    let steps = []\n    let simpleSelectors = splitTarget(target)\n\n    for (let selector of simpleSelectors) {\n      if (selector === ':none') continue\n\n      let placement = defaultPlacement\n      let maybe = defaultMaybe\n\n      selector = selector.replace(/\\b::?(before|after)\\b/, (_match, customPlacement) => {\n        placement = customPlacement\n        return ''\n      })\n\n      selector = selector.replace(/\\b:maybe\\b/, () => {\n        maybe = true\n        return ''\n      })\n\n      // Each step inherits all options of this change.\n      const step = {\n        ...options,\n        selector,\n        placement,\n        maybe,\n        originalRenderOptions: options,\n      }\n\n      steps.push(step)\n    }\n\n    return steps\n  }\n\n  function hasAutoHistory(newFragments, layer) {\n    // We cannot use up.fragment.contains(fragment, config.autoHistoryTargets)\n    // because fragment is not yet attached when we are called from up.Change.OpenLayer.\n\n    let vanillaSelector = expandTargets(config.autoHistoryTargets, { layer }).join()\n\n    for (let newFragment of newFragments) {\n      if (e.subtree(newFragment, vanillaSelector).length) {\n        return true\n      }\n    }\n\n    up.puts('up.render()', \"Will not auto-update history because fragment doesn't contain a selector from up.fragment.config.autoHistoryTargets\")\n    return false\n  }\n\n  /*-\n  A pseudo-selector that matches the layer's [main content area](/up-main).\n\n  ### Targeting the main element\n\n  You can target the main element using the `:main` selector:\n\n  ```html\n  <a href=\"/cards/5\" up-target=\":main\">Load post</a>\n\n  <main>\n    Post will appear heare\n  </main>\n  ```\n\n  Unpoly will also update `:main` if no other target is given:\n\n  ```html\n  <a href=\"/cards/5\" up-follow>Load post</a>\n\n  <main>\n    Post will appear heare\n  </main>\n  ```\n\n  Also see [targeting the main element](/targeting-fragments#targeting-the-main-element).\n\n  ### Default main targets\n\n  The default main targets are:\n\n  - any element with an `[up-main]` attribute\n  - the HTML5 [`<main>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main) element\n  - the current layer's [topmost swappable element](/layer)\n\n  You may configure main target selectors in `up.fragment.config.mainTargets`.\n\n  @selector :main\n  @stable\n  */\n\n  /*-\n  Marks this element as the primary content element of your application layout.\n\n  Unpoly will update a main element when no more specific render target is given.\n\n  ### Example\n\n  Many links simply replace the primary content element in your application layout.\n\n  Unpoly lets you mark this elements as a default target using the `[up-main]` attribute:\n\n  ```html\n  <body>\n    <div class=\"layout\">\n      <div class=\"layout--side\">\n        ...\n      </div>\n      <div class=\"layout--content\" up-main>\n       ...\n      </div>\n    </div>\n  </body>\n  ```\n\n  Once a main target is configured, you no longer need `[up-target]` in a link.\\\n  Use `[up-follow]` and the `[up-main]` element will be replaced:\n\n  ```html\n  <a href=\"/foo\" up-follow>...</a>\n  ```\n\n  If you want to update something more specific, you can still use `[up-target]`:\n\n  ```html\n  <a href=\"/foo\" up-target=\".profile\">...</a>\n  ```\n\n  ### Overlays can use different main targets\n\n  Overlays often use a different default selector, e.g. to exclude a navigation bar.\n\n  To define a different main target for an overlay, set the [layer mode](/layer-terminology) as the\n  value of the `[up-main]` attribute:\n\n  ```html\n  <body>\n    <div class=\"layout\" up-main=\"root\">\n      <div class=\"layout--side\">\n        ...\n      </div>\n      <div class=\"layout--content\" up-main=\"modal\">\n        ...\n      </div>\n    </div>\n  </body>\n  ```\n\n  ### Using existing elements as main targets\n\n  Instead of the `[up-main]` attribute you may also use the standard [`<main>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main) element.\n\n  You may also configure an existing selector in `up.fragment.config.mainTargets`:\n\n  ```js\n  up.fragment.config.mainTargets.push('.layout--content')\n  ```\n\n  You may configure layer-specific targets in `up.layer.config`:\n\n  ```js\n  up.layer.config.popup.mainTargets.push('.menu')              // for popup overlays\n  up.layer.config.drawer.mainTargets.push('.menu')             // for drawer overlays\n  up.layer.config.overlay.mainTargets.push('.layout--content') // for all overlay modes\n  ```\n\n  @selector [up-main]\n  @param [up-main]\n  A space-separated list of [layer modes](/layer-terminology) for which to use this main target.\n\n  Omit the attribute value to define a main target for *all* layer modes.\n\n  To use a different main target for all overlays (but not the root layer), set `[up-main=overlay]`.\n  @stable\n  */\n\n  /*-\n  To make a server request without changing a fragment, use the `:none` [target](/targeting-fragments).\n\n  > [NOTE]\n  > Even with a target other than `:none`, the server can still decide to [skip the render pass](/skipping-rendering#rendering-nothing).\n\n  ### Example\n\n  ```html\n  <a href=\"/ping\" up-target=\":none\">Ping server</a>\n  ```\n\n  @selector :none\n  @stable\n  */\n\n  /*-\n  Your [target selectors](/targeting-fragments) may use this pseudo-selector\n  to reference the origin element that triggered the change.\n\n  The `:origin` placeholder will be replaced with a target [derived](/target-derivation)\n  from the origin element.\n\n  ### Default origins\n\n  The origin element is automatically set for many actions, for example:\n\n  @include default-origins\n\n  ### Example\n\n  Below we see two links that will each update the `<div>` next to them.\n  This requires a rather verbose `[up-target]` attribute:\n\n  ```html\n  <a href=\"/tasks/1\" up-target=\"a[href='/tasks/1'] + div\">Show task 1</a> <!-- mark-phrase \"a[href='/tasks/1'] + div\" -->\n  <div>Task 1 will appear here</div\n\n  <a href=\"/tasks/2\" up-target=\"a[href='/tasks/2'] + div\">Show task 2</a> <!-- mark-phrase \"a[href='/tasks/2'] + div\" -->\n  <div>Task 2 will appear here</div\n  ```\n\n  We can simplify the `[up-target]` by referencing the followed link by `:origin`:\n\n  ```html\n  <a href=\"/tasks/1\" up-target=\":origin + div\">Show task 1</a> <!-- mark-phrase \":origin + div\" -->\n  <div>Task 1 will appear here</div\n\n  <a href=\"/tasks/2\" up-target=\":origin + div\">Show task 2</a> <!-- mark-phrase \":origin + div\" -->\n  <div>Task 2 will appear here</div\n  ```\n\n  ### Setting the origin programmatically\n\n  When updating fragments programmatically through functions like `up.render()`\n  you may pass an origin element as an `{ origin }` option:\n\n  ```js\n  element.addEventListener('click', function(event) {\n    up.render('.preview', { origin: element })\n  })\n  ```\n\n  You do not need to pass an `{ origin }` for functions that already have a\n  natural origin:\n\n  ```js\n  up.follow(link) // link will be set as { origin }\n  ```\n\n  > [TIP]\n  > Ensuring an origin is set may improve the precision of fragment lookup, even if\n  > a [target selector](/targeting-fragments) doesn't contain an `:origin` reference.\n  > In the example above, Unpoly would prefer to match `.preview` in the\n  > [region](/targeting-fragments#resolving-ambiguous-selectors) of the origin.\n  > If no origin is known, Unpoly will always match the first `.preview` in the\n  > current [layer](/up.layer).\n\n  @selector :origin\n  @stable\n  */\n\n  /*-\n  Your [target selectors](/targeting-fragments) may use this pseudo-selector\n  to replace the layer's topmost swappable element.\n\n  The topmost swappable element is the first child of the layer's container element.\n  For the [root layer](/up.layer.root) it is the `<body>` element. For an overlay\n  it is the target with which the overlay was opened with.\n\n  In canonical usage the topmost swappable element is often a [main element](/up-main).\n\n  ### Example\n\n  The following will replace the `<body>` element in the root layer,\n  and the topmost swappable element in an overlay:\n\n  ```js\n  up.render(':layer', { url: '/page2' })\n  ```\n\n  @selector :layer\n  @experimental\n  */\n\n  /*-\n  Returns whether the given element matches the given CSS selector or other element.\n\n  Other than [`Element#matches()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches)\n  this function supports non-standard selectors like `:main` or `:layer`.\n\n  Instead of a selector you may also pass a second element. In that case\n  the function returns whether both elements match the same [derived target](/target-derivation).\n\n  ### Examples\n\n  ```js\n  let element = document.querySelector('div[up-main]')\n  up.fragment.matches(element, 'div') // => true\n  up.fragment.matches(element, 'span') // => false\n  up.fragment.matches(element, ':main') // => true\n  up.fragment.matches(element, element) // => true\n  ```\n\n  @function up.fragment.matches\n  @param {Element} fragment\n  @param {string|Element} selector\n    The selector or element to match.\n\n    When an element is passed, returns whether `element` matches\n    the [target derived](/target-derivation) from `selector`.\n  @param {string|up.Layer} [options.layer]\n    The layer for which to match.\n\n    Pseudo-selectors like `:main` may expand to different selectors\n    in different layers.\n  @param {string|up.Layer} [options.mode]\n    Required if `{ layer: 'new' }` is passed.\n  @return {boolean}\n  @experimental\n  */\n  function matches(element, selector, options = {}) {\n    element = e.get(element)\n    if (u.isElement(selector)) {\n      let target = tryToTarget(selector)\n      return target && element.matches(target)\n    } else {\n      return new up.Selector(selector, element, options).matches(element)\n    }\n  }\n\n  function shouldRevalidate(request, response, options = {}) {\n    return request.fromCache && u.evalAutoOption(options.revalidate, config.autoRevalidate, response)\n  }\n\n  function targetForSteps(steps) {\n    let bestSteps = steps.filter((step) => !step.maybe || step.oldElement?.isConnected)\n    let selectors = u.map(bestSteps, 'selector')\n    return selectors.join(', ') || ':none'\n  }\n\n  function isContainedByRivalStep(steps, candidateStep) {\n    return u.some(steps, function(rivalStep) {\n      return (rivalStep !== candidateStep) &&\n        ((rivalStep.placement === 'swap') || (rivalStep.placement === 'content')) &&\n        rivalStep.oldElement.contains(candidateStep.oldElement)\n    })\n  }\n\n  function compressNestedSteps(steps) {\n    if (steps.length < 2) return steps\n    let compressed = u.uniqBy(steps, 'oldElement')\n    compressed = u.reject(compressed, step => isContainedByRivalStep(compressed, step))\n    return compressed\n  }\n\n  /*-\n  [Aborts requests](/aborting-requests) targeting a fragment or layer.\n\n  Always emits the event `up:fragment:aborted`, regardless of whether there were requests to abort.\n  If a request was aborted, the event `up:request:aborted` will also be emitted.\n\n  There is also a low-level `up.network.abort()` function, which aborts requests\n  matching arbitrary conditions.\n\n  ### Aborting requests targeting a fragment\n\n  To abort pending requests [targeting](/targeting-fragments) an element or its descendants,\n  pass a reference or CSS selector for that element:\n\n  ```js\n  up.fragment.abort(element)\n  up.fragment.abort('.foo')\n  ```\n\n  You may also pass an `{ origin }` or `{ layer }` option to help look up the selector.\n\n  ### Aborting requests targeting a layer\n\n  To abort all requests targeting elements on a given layer,\n  pass a [`{ layer }` option](/layer-option):\n\n  ```js\n  up.fragment.abort({ layer: 'root' })\n  ```\n\n  ### Aborting all requests\n\n  This would abort requests targeting any elements on any layer:\n\n  ```js\n  up.fragment.abort({ layer: 'any' })\n  ```\n\n  @function up.fragment.abort\n  @param {string|Element|List<Element>} [element]\n    The element for which requests should be aborted.\n\n    May be omitted with `{ layer }` option.\n  @param {string|up.Layer} [options.layer]\n    The [layer](/layer-option) for which requests should be aborted.\n\n    May be omitted with `element` argument.\n  @param {Element} [options.origin]\n    The element causing requests to be aborted.\n\n    This is used to look up an `element` selector or `{ layer }` name.\n  @param {string} [options.reason]\n    The reason for aborting requests.\n\n    The promise by an aborted `up.request()` will reject with this reason.\n\n    If omitted a default message will describe the abort conditions.\n  @param {up.Request} [options.except]\n    A request that should not be aborted, even if it matches\n    the conditions above.\n\n    @experimental\n  @experimental\n  */\n  function abort(...args) {\n    let options = parseTargetAndOptions(args)\n\n    // The function that checks whether a given function will be aborted.\n    let testFn\n\n    // The reason will be logged with the up:request:abort event when we actually abort an event.\n    // It should be a string, not an array that goes through sprintf().\n    let { reason, newLayer } = options\n\n    // At the end we're going to emit up:fragment:aborted on these elements.\n    // Other async code observing these elements can then chose to abort itself.\n    let elements\n\n    // An element can be passed as first argument (public API) or as { target } option.\n    // There's also an internal API that { target } can be an array of elements.\n    // This is used by up.RenderJob.\n    if (options.target) {\n      // If we're given an element or selector, we abort all requests\n      // targeting that subtree.\n      elements = getAll(options.target, options)\n      testFn = (request) => request.isPartOfSubtree(elements)\n      reason ||= 'Aborting requests within fragment'\n    } else {\n      // If we're not given an element or selector, we abort all layers\n      // matching the { layer } option. If no { layer } option is given,\n      // all requests in the current layer are aborted.\n      //\n      // This behavior is slightly inconsistent with that of other up.fragment\n      // functions, which operate on the main element if no other target is given.\n      // However, when we navigate on a layer, we want to abort *all* requests on\n      // that layer, even requests with a target outside of main, e.g. a nav bar.\n      let layers = up.layer.getAll(options)\n      elements = u.map(layers, 'element')\n      testFn = (request) => u.contains(layers, request.layer)\n      reason ||= 'Aborting requests within ' + layers.join(', ')\n    }\n\n    let testFnWithAbortable = (request) => request.abortable && testFn(request)\n    up.network.abort(testFnWithAbortable, { ...options, reason })\n\n    // We *always* emit an `up:fragment:aborted` event, even when there is no\n    // request being aborted. This event serves for *any* async code that may want\n    // to abort itself, e.g. timers waiting for a delay.\n    for (let element of elements) {\n      // Some effort has invested to log about aborting only when necessary:\n      //\n      // (1) We don't log on up:fragment:aborted. This event is emitted with *every*\n      //     fragment update, whether or not we're actually aborting requests. Logging\n      //     with every update would make the log noisy and confusing.\n      // (2) When we *do* abort a request, up:request:aborted is emitted and logged.\n      //     This is done in up.Request#setAbortedState().\n      // (3) When up.fragment.abort() is called via up.render({ abort }) we also log\n      //     a message \"Change with { abort } option will abort other requests' before\n      //     we abort the first request. This is done via an { logOnce } option that\n      //     this function passes on to up.network.abort().\n      up.emit(element, 'up:fragment:aborted', { reason, newLayer, log: false })\n    }\n  }\n\n  /*-\n  This event is emitted when requests for an element were [aborted](/aborting-requests).\n\n  This event is emitted on the element for which requests were aborted.\n  If requests for entire layer were aborted, this event is emitted the\n  [layer's outmost element](/up.Layer.prototype.element).\n\n  To simplify working with this event, the function `up.fragment.onAborted()` is also provided.\n\n  > [note]\n  > This event will *not* be emitted by the low-level `up.network.abort()` function.\n\n  ### Example\n\n  This would run code when an element or its descendants were aborted:\n\n  ```js\n  up.on(element, 'up:fragment:aborted', function(event) {\n    // element or its descendants were aborted\n  })\n  ```\n\n  A more common use case is to run code when an element *or one of its ancestors*\n  were aborted:\n\n    ```js\n  // Listen to all up:fragment:aborted events in case an ancestor\n  let off = up.on('up:fragment:aborted', function(event) {\n     if (event.target.contains(element)) {\n        // element or its ancestors were aborted\n     }\n  })\n  // Because we're registering a global event listener, we should\n  // clean up when `element` is destroyed.\n  up.destructor(element, off)\n  ```\n\n  > [tip]\n  > To simplify observing an element and its ancestors for aborted requests,\n  > the function `up.fragment.onAborted()` is provided.\n\n  @event up:fragment:aborted\n  @param {Element} event.target\n    The element for which requests were aborted.\n  @param {string} event.reason\n    A string describing the reason for aborting this fragment.\n\n    @experimental\n  @param {boolean} event.newLayer\n    Whether the fragment was aborted by a [new overlay opening](/opening-overlays).\n\n    @experimental\n  @experimental\n  */\n\n  /*-\n  Runs a callback when the given element *or its ancestors* were [aborted](/aborting-requests).\n\n  This utility function simplifies consumption of the `up:fragment:aborted` event.\n\n  ### Example\n\n  Let's say we want to [reload](/up.reload) an element after 10 seconds.\n  If requests for that element were [aborted](/aborting-requests) before the\n  10 seconds are over, we no no longer want to reload:\n\n  ```js\n  let timeout = setTimeout(() => up.reload(element), 10000)\n  up.fragment.onAborted(element, () => clearTimeout(timeout))\n  ```\n\n  @function up.fragment.onAborted\n  @param {Element} element\n  @param {Function(event)} callback\n    The callback to run.\n\n    It will be called with an `up:fragment:aborted` argument.\n  @return {Function}\n    A function that unsubscribes the callback.\n  @experimental\n  */\n  function onAborted(fragment, callback) {\n    let guard = (event) => event.target.contains(fragment)\n    let unsubscribe = up.on('up:fragment:aborted', { guard }, callback)\n    // Since we're binding to an element that is an ancestor of the fragment,\n    // we need to unregister the event listener when the form is removed.\n    up.destructor(fragment, unsubscribe)\n    return unsubscribe\n  }\n\n  up.on('up:framework:boot', function() {\n    const { documentElement } = document\n    documentElement.setAttribute('up-source', u.normalizeURL(location.href, { hash: false }))\n    up.hello(documentElement)\n\n    if (!up.browser.canPushState()) {\n      return up.warn('Cannot push history changes. Next fragment update will load in a new page.')\n    }\n  })\n\n  return {\n    config,\n    reload,\n    destroy,\n    render,\n    navigate,\n    get: getSmart,\n    getDumb,\n    all: getAll,\n    subtree: getSubtree,\n    contains,\n    closest,\n    source: sourceOf,\n    visit,\n    markAsDestroying: markFragmentAsDestroying,\n    emitInserted: emitFragmentInserted,\n    emitDestroyed: emitFragmentDestroyed,\n    emitKeep: emitFragmentKeep,\n    successKey,\n    failKey,\n    expandTargets,\n    resolveOrigin,\n    toTarget,\n    tryToTarget,\n    isTargetable,\n    matches,\n    hasAutoHistory,\n    time: timeOf,\n    etag: etagOf,\n    shouldRevalidate,\n    abort,\n    onAborted,\n    splitTarget,\n    parseTargetSteps,\n    isAlive,\n    isNotDestroying,\n    targetForSteps,\n    compressNestedSteps,\n    containsMainPseudo,\n    // timer: scheduleTimer\n  }\n})()\n\nup.reload = up.fragment.reload\nup.destroy = up.fragment.destroy\nup.render = up.fragment.render\nup.navigate = up.fragment.navigate\nup.visit = up.fragment.visit\n\n/*-\nReturns the current [context](/context).\n\nThis is aliased as `up.layer.context`.\n\n@property up.context\n@param {Object} context\n  The context object.\n\n  If no context has been set an empty object is returned.\n@experimental\n*/\nu.delegate(up, ['context'], () => up.layer.current)\n", "up-bounds {\n  position: absolute;\n}\n\n.up-focus-hidden:focus-visible {\n  outline: none !important;\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiL2hvbWUvaGVubmluZy9Qcm9qZWN0cy91bnBvbHkvc3JjL3VucG9seSIsInNvdXJjZXMiOlsidmlld3BvcnQuc2FzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFOzs7QUFFRjtFQUNFIiwic291cmNlc0NvbnRlbnQiOlsidXAtYm91bmRzXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZVxuXG4udXAtZm9jdXMtaGlkZGVuOmZvY3VzLXZpc2libGVcbiAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50XG4iXX0= */", "require('./viewport.sass')\n\n/*-\nScrolling and focus\n===================\n\nThe `up.viewport` module controls [scrolling](/scrolling)\nand [focus](/focus) within scrollable containers (\"viewports\").\n\nThe default viewport for any web application is the\n[document's scrolling element](https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement).\nAn application may define additional viewports by giving the CSS property `{ overflow-y: scroll }` to any block element.\n\n@see scrolling\n@see scroll-tuning\n@see focus\n@see focus-visibility\n\n@see [up-viewport]\n@see [up-fixed=top]\n@see up.reveal\n\n@module up.viewport\n*/\nup.viewport = (function() {\n\n  const u = up.util\n  const e = up.element\n  const f = up.fragment\n\n  /*-\n  Configures defaults for scrolling.\n\n  @property up.viewport.config\n  @param {Array} [config.viewportSelectors]\n    An array of CSS selectors that match viewports.\n\n    By default this contains the `[up-viewport]` attribute.\n\n    Matching elements must have a [derivable target selector](/target-derivation).\n\n  @param {Array} [config.fixedTopSelectors]\n    An array of CSS selectors that find elements fixed to the\n    top edge of the screen (using `position: fixed`).\n\n    See [`[up-fixed=\"top\"]`](/up-fixed-top) for details.\n  @param {Array} [config.fixedBottomSelectors]\n    An array of CSS selectors that match elements fixed to the\n    bottom edge of the screen (using `position: fixed`).\n\n    See [`[up-fixed=\"bottom\"]`](/up-fixed-bottom) for details.\n  @param {Array} [config.anchoredRightSelectors]\n    An array of CSS selectors that find elements anchored to the\n    right edge of the screen (using `right:0` with `position: fixed` or `position: absolute`).\n\n    See [`[up-anchored=\"right\"]`](/up-anchored-right) for details.\n  @param {number} [config.revealSnap]\n    When [revealing](/up.reveal) elements, Unpoly will scroll an viewport\n    to the top when the revealed element is closer to the viewport's top edge\n    than `config.revealSnap`.\n\n    Set to `0` to disable snapping.\n  @param {number} [config.revealPadding]\n    The desired padding between a [revealed](/up.reveal) element and the\n    closest [viewport](/up.viewport) edge (in pixels).\n  @param {number} [config.revealMax]\n    A number indicating how many top pixel rows of a high element to [reveal](/up.reveal).\n\n    Defaults to 50% of the available window height.\n\n    You may set this to `false` to always reveal as much of the element as the viewport allows.\n\n    You may also pass a function that receives an argument `{ viewportRect, elementRect }` and returns\n    a maximum height in pixel. Each given rectangle has properties `{ top, right, buttom, left, width, height }`.\n\n    @experimental\n  @param {number} [config.revealTop=false]\n    Whether to always scroll a [revealing](/up.reveal) element to the top.\n\n    By default Unpoly will scroll as little as possible to make the element visible.\n  @param {Function(Object): boolean} [config.autoFocusVisible]\n    Whether elements focused by Unpoly should have a [visible focus ring](/focus-visibility).\n\n    By default the focus ring will be visible if either the user [interacted with the keyboard](/up.event.inputDevice)\n    or the focused element is a [form field](/up.form.config#config.fieldSelectors).\n\n    The value is a function that accepts an object with `{ element, inputDevice }` properties and returns\n    a boolean. The `{ element }` property is the focused element. The `{ inputDevice }` property is a string\n    denoting the [interaction's input device](/up.event.inputDevice).\n\n    The default configuration is implemented like this:\n\n    ```js\n    up.viewport.config.autoFocusVisible = ({ element, inputDevice }) =>\n      inputDevice === 'key' || up.form.isField(element)\n    ```\n\n    @experimental\n  @stable\n  */\n  const config = new up.Config(() => ({\n    viewportSelectors: ['[up-viewport]', '[up-fixed]'],\n    fixedTopSelectors: ['[up-fixed~=top]'],\n    fixedBottomSelectors: ['[up-fixed~=bottom]'],\n    anchoredRightSelectors: ['[up-anchored~=right]', '[up-fixed~=top]', '[up-fixed~=bottom]', '[up-fixed~=right]'],\n    revealSnap: 200,\n    revealPadding: 0,\n    revealTop: false,\n    revealMax() { return 0.5 * window.innerHeight },\n    autoFocusVisible({ element, inputDevice }) { return inputDevice === 'key' || up.form.isField(element) }\n  }))\n\n  const bodyShifter = new up.BodyShifter()\n\n  up.compiler(config.selectorFn('anchoredRightSelectors'), function(element) {\n    return bodyShifter.onAnchoredElementInserted(element)\n  })\n\n  /*-\n  Scrolls the given element's viewport so the first rows of the\n  element are visible for the user.\n\n  ### Fixed elements obstructing the viewport\n\n  Many applications have a navigation bar fixed to the top or bottom,\n  obstructing the view on an element.\n\n  You can make `up.reveal()` aware of these fixed elements\n  so it can scroll the viewport far enough so the revealed element is fully visible.\n  To make `up.reveal()` aware of fixed elements you can either:\n\n  - give the element an attribute [`up-fixed=\"top\"`](/up-fixed-top) or [`up-fixed=\"bottom\"`](/up-fixed-bottom)\n  - [configure default options](/up.viewport.config) for `{ fixedTopSelectors }` or `{ fixedBottomSelectors }`\n\n  @function up.reveal\n\n  @param {string|Element|jQuery} element\n    The element to reveal.\n\n  @param {string} [options.revealSnap]\n    When the the revealed element would be closer to the viewport's top edge\n    than this value, Unpoly will scroll the viewport to the top.\n\n    Set to `0` to disable snapping.\n\n    Defaults to `up.viewport.config.revealSnap`.\n\n  @param {string|Element|jQuery} [options.viewport]\n    The scrolling element to scroll.\n\n    Defaults to the [given element's viewport](/up.viewport.get).\n\n  @param {boolean} [options.top]\n    Whether to scroll the viewport so that the first element row aligns\n    with the top edge of the viewport.\n\n    Defaults to `up.viewport.config.revealTop`.\n\n  @param {string}[options.behavior='instant']\n    When set to `'instant'`, this will immediately scroll to the new position.\n\n    When set to `'smooth'`, this will scroll smoothly to the new position.\n\n    When set to `'auto'`, the behavior is determined by the CSS property\n    [`scroll-behavior`](https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior) of the viewport element.\n\n  @param {number} [options.padding]\n    The desired padding between the revealed element and the\n    closest [viewport](/up.viewport) edge (in pixels).\n\n    Defaults to `up.viewport.config.revealPadding`.\n\n  @param {number|boolean} [options.snap]\n    Whether to snap to the top of the viewport if the new scroll position\n    after revealing the element is close to the top edge.\n\n    Defaults to `up.viewport.config.revealSnap`.\n\n  @return {undefined}\n\n  @stable\n  */\n  function reveal(element, options) {\n    // copy options, since we will mutate it below (options.layer = ...).\n    options = u.options(options)\n    element = f.get(element, options)\n\n    // Now that we have looked up the element with an option like { layer: 'any' },\n    // the only layer relevant from here on is the element's layer.\n    if (!(options.layer = up.layer.get(element))) {\n      up.fail('Cannot reveal a detached element')\n    }\n\n    if (options.peel) { options.layer.peel() }\n\n    const motion = new up.RevealMotion(element, options)\n    motion.start()\n\n    return up.migrate.formerlyAsync?.('up.reveal()') || true\n  }\n\n  /*-\n  Focuses the given element.\n\n  Focusing an element will also [reveal](/up.reveal) it, unless `{ preventScroll: true }` is passed.\n\n  @function up.focus\n\n  @param {string|Element|jQuery} element\n    The element to focus.\n\n  @param {boolean} [options.preventScroll=false]\n    Whether to prevent changes to the acroll position.\n\n  @param {string} [options.inputDevice]\n    The [input device](/up.event.inputDevice) used for the current interaction.\n\n    Accepts values `'key'`, `'pointer'` and `'unknown'`.\n\n    Defaults to the [current input device](up.event.inputDevice).\n\n    @internal\n\n  @param {boolean|string} [options.focusVisible='auto']\n    Whether the focused element should have a [visible focus ring](/focus-visibility).\n\n    If set to `true` the element will be assigned the `.up-focus-visible` class.\n\n    If set to `false` the element will be assigned the `.up-focus-hidden` class.\n\n    If set to `'auto'` (the default), focus will be visible if `up.viewport.config.autoFocusVisible()`\n    returns `true` for the given element and [current input device](/up.event.inputDevice).\n\n    The [`:focus-visible`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) pseudo-class will also be set or removed accordingly\n    on [browsers that support it](https://caniuse.com/mdn-api_htmlelement_focus_options_focusvisible_parameter).\n\n    @experimental\n\n  @param {boolean} [options.force=false]\n    Whether to force focus even if `element` would otherwise not be a focusable element.\n\n    @experimental\n\n  @experimental\n  */\n  function doFocus(element, { preventScroll, force, inputDevice, focusVisible } = {}) {\n    if (force) {\n      // (1) Element#tabIndex is -1 for all non-interactive elements,\n      //     whether or not the element has an [tabindex=-1] attribute.\n      // (2) Element#tabIndex is 0 for interactive elements, like links,\n      //     inputs or buttons. [up-clickable] elements also get a [tabindex=0].\n      //     to participate in the regular tab order.\n      if (!element.hasAttribute('tabindex') && element.tabIndex === -1) {\n        element.setAttribute('tabindex', '-1')\n      }\n    }\n\n    inputDevice ??= up.event.inputDevice\n    focusVisible ??= 'auto'\n    focusVisible = u.evalAutoOption(focusVisible, config.autoFocusVisible, { element, inputDevice })\n\n    element.focus({\n      preventScroll: true, // Focus without scrolling, since we're going to use our custom scrolling logic below.\n      focusVisible,        // Control native :focus-visible for browsers that support this option\n    })\n\n    // Don't rely on the `focusin` listener below to remove our focus classes, to cover\n    // an edge case where the element focused multiple times with different focus devices.\n    removeFocusClasses(element)\n    element.classList.add(focusVisible ? 'up-focus-visible' : 'up-focus-hidden')\n\n    if (!preventScroll) {\n      // Use up.reveal() which scrolls far enough to ignore fixed nav bars\n      // obstructing the focused element.\n      return reveal(element)\n    }\n  }\n\n  function removeFocusClasses(element) {\n    element?.classList.remove('up-focus-hidden', 'up-focus-visible')\n  }\n\n  // Wait until another element is focused. Otherwise we would lose .up-focus-hidden\n  // when the user switches to another window, then returns to the app window (where\n  // a content element might still be :focus-visible).\n  up.on('focusin', function({ relatedTarget }) {\n    removeFocusClasses(relatedTarget)\n  })\n\n\n  /*-\n  This class is assigned to elements that were [focused by Unpoly](/focus) but should not\n  have a [visible focus ring](/focus-visibility).\n\n  You can use this class to [remove an unwanted focus outline](#example).\n\n  ### Relation to `:focus-visible`\n\n  Unpoly will try to unset `:focus-visible` whenever it sets `.up-focus-visible`, but can only do so\n  in [some browsers](https://caniuse.com/mdn-api_htmlelement_focus_options_focusvisible_parameter).\n  Because of this the `.up-focus-hidden` class may be set on elements that the browser considers to be\n  [`:focus-visible`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible).\n\n  ### Example\n\n  @include focus-ring-hide-example\n\n  @selector .up-focus-hidden\n  @experimental\n  */\n\n  /*-\n  This class is assigned to elements that were [focused by Unpoly](/focus) and should\n  have a [visible focus ring](/focus-visibility).\n\n  You can use this class to [give a new component a focus ring](#example) for keyboard users,\n  while not rendering a focus ring for mouse or touch users.\n\n  ### Relation to `:focus-visible`\n\n  Unpoly will try to force `:focus-visible` whenever it sets `.up-focus-visible`, but can only do so\n  in [some browsers](https://caniuse.com/mdn-api_htmlelement_focus_options_focusvisible_parameter).\n  Because of this the `.up-focus-visible` class may be set on elements that the browser considers to *not* be\n  [`:focus-visible`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible).\n\n  ### Example\n\n  @include focus-ring-show-example\n\n  @selector .up-focus-visible\n  @experimental\n  */\n\n  function tryFocus(element, options) {\n    doFocus(element, options)\n    return element === document.activeElement\n  }\n\n  /*-\n  [Reveals](/up.reveal) an element matching the given `#hash` anchor.\n\n  Other than the default behavior found in browsers, `up.revealHash()` works with\n  [multiple viewports](/up-viewport) and honors [fixed elements](/up-fixed-top) obstructing the user's\n  view of the viewport.\n\n  When the page loads initially, this function is automatically called with the hash from\n  the current URL.\n\n  If no element matches the given `#hash` anchor, a resolved promise is returned.\n\n  ### Example\n\n  ```js\n  up.revealHash('#chapter2')\n  ```\n\n  @function up.viewport.revealHash\n  @param {string} hash\n  @internal\n  */\n  function revealHash(hash = location.hash, options) {\n    let match = firstHashTarget(hash, options)\n    if (match) {\n      return up.reveal(match, { top: true })\n    }\n  }\n\n  function allSelector() {\n    // On Edge the document viewport can be changed from CSS\n    return [rootSelector(), ...config.viewportSelectors].join()\n  }\n\n  /*-\n  Returns the scrolling container for the given element.\n\n  Returns the [document's scrolling element](/up.viewport.root)\n  if no closer viewport exists.\n\n  @function up.viewport.get\n  @param {string|Element|jQuery} target\n  @return {Element}\n  @experimental\n  */\n  function closest(target, options = {}) {\n    const element = f.get(target, options)\n    // Use up.element.closest() which searches across layer boundaries.\n    // It is OK to find a viewport in a parent layer. Layers without its\n    // own viewport (like popups) are scrolled by the parent layer's viewport.\n    return element.closest(allSelector())\n  }\n\n  /*-\n  Returns a list of all the viewports contained within the\n  given selector or element.\n\n  If the given element is itself a viewport, the element is included\n  in the returned list.\n\n  @function up.viewport.subtree\n  @param {string|Element|jQuery} target\n  @param {Object} options\n  @return List<Element>\n  @internal\n  */\n  function getSubtree(element, options = {}) {\n    element = f.get(element, options)\n    return e.subtree(element, allSelector())\n  }\n\n  /*-\n  Returns a list of all viewports that are either contained within\n  the given element or that are ancestors of the given element.\n\n  This is relevant when updating a fragment with `{ scroll: 'restore' | 'reset' }`.\n  In tht case we restore / reset the scroll tops of all viewports around the fragment.\n\n  @function up.viewport.around\n  @param {string|Element|jQuery} element\n  @param {Object} options\n  @return List<Element>\n  @internal\n  */\n  function getAround(element, options = {}) {\n    element = f.get(element, options)\n    return e.around(element, allSelector())\n  }\n\n  /*-\n  Returns a list of all the viewports on the current layer.\n\n  @function up.viewport.all\n  @internal\n  */\n  function getAll(options = {}) {\n    return f.all(allSelector(), options)\n  }\n\n  function rootSelector() {\n    return getRoot().tagName\n  }\n\n  /*-\n  Return the [scrolling element](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)\n  for the browser's main content area.\n\n  @function up.viewport.root\n  @return {Element}\n  @experimental\n  */\n  function getRoot() {\n    return document.scrollingElement\n  }\n\n  function rootWidth() {\n    // This should happen on the <html> element, regardless of document.scrollingElement\n    return e.root.clientWidth\n  }\n\n  function rootHeight() {\n    // This should happen on the <html> element, regardless of document.scrollingElement\n    return e.root.clientHeight\n  }\n\n  function isRoot(element) {\n    return element === getRoot()\n  }\n\n  /*-\n  Returns whether the root viewport is currently showing a vertical scrollbar.\n\n  Note that this returns `false` if the root viewport scrolls vertically but the browser\n  shows no visible scroll bar at rest, e.g. on mobile devices that only overlay a scroll\n  indicator while scrolling.\n\n  @function up.viewport.rootHasReducedWidthFromScrollbar\n  @internal\n  */\n  function rootHasReducedWidthFromScrollbar() {\n    // We could also check if scrollHeight > offsetHeight for the document viewport.\n    // However, we would also need to check overflow-y for that element.\n    // Also we have no control whether developers set the property on <body> or <html>.\n    // https://tylercipriani.com/blog/2014/07/12/crossbrowser-javascript-scrollbar-detection/\n    return window.innerWidth > document.documentElement.offsetWidth\n  }\n\n  /*-\n  Returns the element that controls the `overflow-y` behavior for the\n  [document viewport](/up.viewport.root()).\n\n  @function up.viewport.rootOverflowElement\n  @internal\n  */\n  function rootOverflowElement() {\n    const { body } = document\n    const html = document.documentElement\n\n    const element = u.find([html, body], wasChosenAsOverflowingElement)\n    return element || getRoot()\n  }\n\n  /*-\n  Returns whether the given element was chosen as the overflowing\n  element by the developer.\n\n  We have no control whether developers set the property on <body> or\n  <html>. The developer also won't know what is going to be the\n  [scrolling element](/up.viewport.root) on the user's browser.\n\n  @function wasChosenAsOverflowingElement\n  @internal\n  */\n  function wasChosenAsOverflowingElement(element) {\n    const overflowY = e.style(element, 'overflow-y')\n    return overflowY === 'auto' || overflowY === 'scroll'\n  }\n\n  /*-\n  Returns the width of a scrollbar.\n\n  This only runs once per page load.\n\n  @function up.viewport.scrollbarWidth\n  @internal\n  */\n  const scrollbarWidth = u.memoize(function() {\n    // This is how Bootstrap does it also:\n    // https://github.com/twbs/bootstrap/blob/c591227602996c542b9fd0cb65cff3cc9519bdd5/dist/js/bootstrap.js#L1187\n    const outerStyle = {\n      position:  'absolute',\n      top:       '0',\n      left:      '0',\n      width:     '100px',\n      height:    '100px', // Firefox needs at least 100px to show a scrollbar\n      overflowY: 'scroll'\n    }\n    const outer = up.element.affix(document.body, '[up-viewport]', { style: outerStyle })\n    const width = outer.offsetWidth - outer.clientWidth\n    outer.remove()\n    return width\n  })\n\n  function scrollTopKey(viewport) {\n    return up.fragment.tryToTarget(viewport)\n  }\n\n  /*-\n  @function up.viewport.fixedElements\n  @internal\n  */\n  function fixedElements(root = document) {\n    const queryParts = ['[up-fixed]'].concat(config.fixedTopSelectors).concat(config.fixedBottomSelectors)\n    return root.querySelectorAll(queryParts.join())\n  }\n\n  /*-\n  Saves scroll positions for later restoration.\n\n  The scroll positions will be associated with the current URL.\n  They can later be restored by calling `up.viewport.restoreScroll()`\n  at the same URL, or by following a link with an [`[up-scroll=\"restore\"]`](/scrolling#restoring-scroll-positions)\n  attribute.\n\n  Unpoly automatically saves scroll positions before [navigating](/navigation).\n\n  @function up.viewport.saveScroll\n  @param {Element|Array<Element>} [viewport]\n    The viewports for which to save scroll positions.\n\n    Defaults to all viewports within the given layer.\n  @param {string} [options.location]\n    The URL for which to save scroll positions.\n\n    If omitted, the given [layer's location](/up.Layer.prototype.location) is used.\n  @param {string} [options.layer = 'current']\n    The layer for which to save scroll positions.\n\n    If omitted, positions for the current layer will be saved.\n  @experimental\n  */\n  function saveScroll(...args) {\n    const [viewports, options] = parseOptions(args)\n    const location = options.location || options.layer.location\n    if (location) {\n      const tops = getScrollTopsForSave(viewports)\n      options.layer.lastScrollTops.set(location, tops)\n    }\n  }\n\n  /*-\n  Returns a hash with scroll positions.\n\n  Each key in the hash is a viewport selector. The corresponding\n  value is the viewport's top scroll position:\n\n      getScrollTopsForSave()\n      => { '.main': 0, '.sidebar': 73 }\n\n  @function getScrollTopsForSave\n  @return Object<string, number>\n  @internal\n  */\n  function getScrollTopsForSave(viewports) {\n    let tops = {}\n    for (let viewport of viewports) {\n      let key = scrollTopKey(viewport)\n      if (key) {\n        tops[key] = viewport.scrollTop\n      } else {\n        up.warn('up.viewport.saveScroll()', 'Cannot save scroll positions for untargetable viewport %o', viewport)\n      }\n    }\n    return tops\n  }\n\n  /*-\n  Restores [previously saved](/up.viewport.saveScroll) scroll positions.\n\n  If no earlier scroll position is known, scroll positions are not changed\n  and `false` is returned.\n\n  Unpoly automatically restores scroll positions when the user [presses the back button](/restoring-history).\n\n  @function up.viewport.restoreScroll\n  @param {Element|Array<Element>} [viewport]\n    The viewports for which to restore scroll positions.\n\n    Defaults to all viewports within the given layer.\n  @param {up.Layer|string} [options.layer='current']\n    The layer on which to restore scroll positions.\n  @param {string} [options.location]\n    The URL for which to restore scroll positions.\n\n    If omitted, the given [layer's location](/up.Layer.prototype.location) is used.\n  @return {boolean}\n    Returns whether scroll positions could be restored.\n  @experimental\n  */\n  function restoreScroll(...args) {\n    const [viewports, options] = parseOptions(args)\n    const { location } = options.layer\n    const locationScrollTops = options.layer.lastScrollTops.get(location)\n    if (locationScrollTops) {\n      setScrollTops(viewports, locationScrollTops)\n      up.puts('up.viewport.restoreScroll()', 'Restored scroll positions to %o', locationScrollTops)\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /*-\n  Saves focus-related state for later restoration.\n\n  Saved state includes:\n\n  @include focus-state\n\n  State can only be preserved if the focused element is [targetable](/up.fragment.isTargetable).\n\n  Saved state will be associated with the given layer's location.\n  It can later be restored by calling `up.viewport.restoreScroll()`\n  at the same location, or by following a link with an [`[up-focus=\"restore\"]`](/focus#restoring-focus)\n  attribute to that same location.\n\n  Unpoly automatically saves focus-related state before [navigating](/navigation).\n\n  @function up.viewport.saveFocus\n  @param {Element|Array<Element>} [viewport]\n    The viewports for which to save focus state.\n\n    Defaults to all viewports within the given layer.\n  @param {string} [options.location]\n    The URL for which to save focus state.\n\n    If omitted, the given [layer's location](/up.Layer.prototype.location) is used.\n  @param {string} [options.layer = 'current']\n    The layer for which to save scroll positions.\n\n    If omitted, state for the current layer will be saved.\n  @experimental\n  */\n  function saveFocus(options = {}) {\n    const layer = up.layer.get(options)\n    const location = options.location || layer.location\n    if (location) {\n      const focusCapsule = up.FocusCapsule.preserve(layer)\n      // `focusCapsule` may be undefined if `layer` did not have focus.\n      // In that case we nullify a previously known capsule for `location`.\n      layer.lastFocusCapsules.set(location, focusCapsule)\n    }\n  }\n\n  /*-\n  Restores [previously saved](/up.viewport.saveFocus) focus-related state.\n\n  Unpoly automatically restores focus-related state when the user [presses the back button](/restoring-history).\n\n  @function up.viewport.restoreFocus\n  @param {Element|Array<Element>} [viewport]\n    The viewports for which to restore focus-related state..\n\n    Defaults to all viewports within the given layer.\n  @param {up.Layer|string} [options.layer='current']\n    The layer on which to restore focus-related state.\n  @param {string} [options.location]\n    The URL for which to restore focus-related state.\n\n    If omitted, the given [layer's location](/up.Layer.prototype.location) is used.\n  @return {boolean}\n    Returns whether focus state could be restored.\n  @experimental\n  */\n  function restoreFocus(options = {}) {\n    const layer = up.layer.get(options)\n    const location = options.location || layer.location\n    const locationCapsule = options.layer.lastFocusCapsules.get(location)\n    // The capsule returns `true` if we could rediscover and focus the previous element.\n    if (locationCapsule && locationCapsule.restore(layer)) {\n      up.puts('up.viewport.restoreFocus()', 'Restored focus to \"%s\"', locationCapsule.target)\n      return true\n    } else {\n      return false\n    }\n  }\n\n  function newStateCache() {\n    return new up.FIFOCache({ capacity: 30, normalizeKey: up.history.normalizeURL })\n  }\n\n  function parseOptions(args) {\n    const options = u.copy(u.extractOptions(args))\n    options.layer = up.layer.get(options)\n    let viewports\n    if (args[0]) {\n      viewports = [closest(args[0], options)]\n    } else if (options.around) {\n      // This is relevant when updating a fragment with { scroll: 'restore' | 'reset' }.\n      // In tht case we restore / reset the scroll tops of all viewports around the fragment.\n      viewports = getAround(options.around, options)\n    } else {\n      viewports = getAll(options)\n    }\n    return [viewports, options]\n  }\n\n  function resetScroll(...args) {\n    const [viewports, _options] = parseOptions(args)\n    setScrollTops(viewports, {})\n  }\n\n  function setScrollTops(viewports, tops) {\n    for (let viewport of viewports) {\n      const key = scrollTopKey(viewport)\n      viewport.scrollTop = tops[key] || 0\n    }\n  }\n\n  function absolutize(element, options = {}) {\n    const viewport = closest(element)\n\n    const viewportRect = viewport.getBoundingClientRect()\n    const originalRect = element.getBoundingClientRect()\n\n    const boundsRect = new up.Rect({\n      left: originalRect.left - viewportRect.left,\n      top: originalRect.top - viewportRect.top,\n      width: originalRect.width,\n      height: originalRect.height\n    })\n\n    // Allow the caller to run code before we start shifting elements around.\n    options.afterMeasure?.()\n\n    e.setStyle(element, {\n      // If the element had a layout context before, make sure the\n      // ghost will have layout context as well (and vice versa).\n      position: element.style.position === 'static' ? 'static' : 'relative',\n      top:    'auto', // CSS default\n      right:  'auto', // CSS default\n      bottom: 'auto', // CSS default\n      left:   'auto', // CSS default\n      width:  '100%', // stretch to the <up-bounds> width we set below\n      height: '100%'\n    }) // stretch to the <up-bounds> height we set below\n\n    // Wrap the ghost in another container so its margin can expand\n    // freely. If we would position the element directly (old implementation),\n    // it would gain a layout context which cannot be crossed by margins.\n    const bounds = e.createFromSelector('up-bounds')\n    // Insert the bounds object before our element, then move element into it.\n    e.insertBefore(element, bounds)\n    bounds.appendChild(element)\n\n    const moveBounds = function(diffX, diffY) {\n      boundsRect.left += diffX\n      boundsRect.top += diffY\n      return e.setStyle(bounds, boundsRect)\n    }\n\n    // Position the bounds initially\n    moveBounds(0, 0)\n\n    // In theory, element should not have moved visually. However, element\n    // (or a child of element) might collapse its margin against a previous\n    // sibling element, and now that it is absolute it does not have the\n    // same sibling. So we manually correct element's top position so it aligns\n    // with the previous top position.\n    const newElementRect = element.getBoundingClientRect()\n    moveBounds(originalRect.left - newElementRect.left, originalRect.top - newElementRect.top)\n\n    u.each(fixedElements(element), e.fixedToAbsolute)\n\n    return {\n      bounds,\n      moveBounds\n    }\n  }\n\n  /*-\n  Marks this element as a scrolling container (\"viewport\").\n\n  Apply this attribute if your app uses a custom panel layout with fixed positioning\n  instead of scrolling the `<body>` element. As an alternative you can also push a selector\n  matching your custom viewport to the `up.viewport.config.viewportSelectors` array.\n\n  When [scrolling](/scrolling) Unpoly will always scroll the viewport closest\n  to the updated element. By default this is the `<body>` element.\n\n  Elements with the `[up-viewport]` attribute must also have a [derivable target selector](/target-derivation).\n\n  ### Example\n\n  Here is an example for a layout for an e-mail client, showing a list of e-mails\n  on the left side and the e-mail text on the right side:\n\n  ```css\n  .side {\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    width: 100px;\n    overflow-y: scroll;\n  }\n\n  .main {\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 100px;\n    right: 0;\n    overflow-y: scroll;\n  }\n  ```\n\n  This would be the HTML (notice the `up-viewport` attribute):\n\n  ```html\n  <div class=\".side\" up-viewport>\n    <a href=\"/emails/5001\" up-target=\".main\">Re: Your invoice</a>\n    <a href=\"/emails/2023\" up-target=\".main\">Quote for services</a>\n    <a href=\"/emails/9002\" up-target=\".main\">Fwd: Room reservation</a>\n  </div>\n\n  <div class=\"main\" up-viewport>\n    <h1>Re: Your Invoice</h1>\n    <p>\n      Lorem ipsum dolor sit amet, consetetur sadipscing elitr.\n      Stet clita kasd gubergren, no sea takimata sanctus est.\n    </p>\n  </div>\n  ```\n\n  @selector [up-viewport]\n  @stable\n  */\n\n  /*-\n  Marks this element as being fixed to the top edge of the screen\n  using `position: fixed`.\n\n  When [following a fragment link](/a-up-follow), the viewport is scrolled\n  so the targeted element becomes visible. By using this attribute you can make\n  Unpoly aware of fixed elements that are obstructing the viewport contents.\n  Unpoly will then scroll the viewport far enough that the revealed element is fully visible.\n\n  Instead of using this attribute,\n  you can also configure a selector in `up.viewport.config.fixedTopSelectors`.\n\n  ### Example\n\n      <div class=\"top-nav\" up-fixed=\"top\">...</div>\n\n  @selector [up-fixed=top]\n  @stable\n  */\n\n  /*-\n  Marks this element as being fixed to the bottom edge of the screen\n  using `position: fixed`.\n\n  When [following a fragment link](/a-up-follow), the viewport is scrolled\n  so the targeted element becomes visible. By using this attribute you can make\n  Unpoly aware of fixed elements that are obstructing the viewport contents.\n  Unpoly will then scroll the viewport far enough that the revealed element is fully visible.\n\n  Instead of using this attribute,\n  you can also configure a selector in `up.viewport.config.fixedBottomSelectors`.\n\n  ### Example\n\n      <div class=\"bottom-nav\" up-fixed=\"bottom\">...</div>\n\n  @selector [up-fixed=bottom]\n  @stable\n  */\n\n\n  /*-\n  Marks this element as being anchored to the right edge of the screen,\n  typically fixed navigation bars.\n\n  Since [overlays](/up.layer) hide the document scroll bar,\n  elements anchored to the right appear to jump when the dialog opens or\n  closes. Applying this attribute to anchored elements will make Unpoly\n  aware of the issue and adjust the `right` property accordingly.\n\n  You should give this attribute to layout elements\n  with a CSS of `right: 0` with `position: fixed` or `position:absolute`.\n\n  Instead of giving this attribute to any affected element,\n  you can also configure a selector in `up.viewport.config.anchoredRightSelectors`.\n\n  ### Example\n\n  Here is the CSS for a navigation bar that is anchored to the top edge of the screen:\n\n  ```css\n  .top-nav {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n  }\n  ```\n\n  By adding an `up-anchored=\"right\"` attribute to the element, we can prevent the\n  `right` edge from jumping when an [overlay](/up.layer) opens or closes:\n\n  ```html\n  <div class=\"top-nav\" up-anchored=\"right\">...</div>\n  ```\n\n  @selector [up-anchored=right]\n  @stable\n  */\n\n  /*-\n  @function up.viewport.firstHashTarget\n  @internal\n  */\n  function firstHashTarget(hash, options = {}) {\n    if (hash = pureHash(hash)) {\n      const selector = [\n        // Match an <* id=\"hash\">\n        e.attrSelector('id', hash),\n        // Match an <a name=\"hash\">\n        'a' + e.attrSelector('name', hash)\n      ].join()\n      return f.get(selector, options)\n    }\n  }\n\n  /*-\n  Returns `'foo'` if the hash is `'#foo'`.\n\n  @function pureHash\n  @internal\n  */\n  function pureHash(value) {\n    return value?.replace(/^#/, '')\n  }\n\n  function focusedElementWithin(scopeElement) {\n    const focusedElement = document.activeElement\n    if (up.fragment.contains(scopeElement, focusedElement)) {\n      return focusedElement\n    }\n  }\n\n  const CURSOR_PROPS = ['selectionStart', 'selectionEnd', 'scrollLeft', 'scrollTop']\n\n  function copyCursorProps(from, to = {}) {\n    for (let key of CURSOR_PROPS) {\n      try {\n        to[key] = from[key]\n      } catch (error) {\n        // Safari throws a TypeError when accessing { selectionStart }\n        // from a focused <input type=\"submit\">. We ignore it.\n      }\n    }\n    return to\n  }\n\n  let userScrolled = false\n  up.on('scroll', { once: true, beforeBoot: true }, () => userScrolled = true)\n\n  up.on('up:framework:boot', function() {\n    // When the initial URL contains an #anchor link, the browser will automatically\n    // reveal a matching fragment. We want to override that behavior with our own,\n    // so we can honor configured obstructions. Since we cannot disable the automatic\n    // browser behavior we need to ensure our code runs after it.\n    //\n    // In Chrome, when reloading, the browser behavior happens before DOMContentLoaded.\n    // However, when we follow a link with an #anchor URL, the browser\n    // behavior happens *after* DOMContentLoaded. Hence we wait one more task.\n    u.task(function () {\n      // If the user has scrolled while the page was loading, we will\n      // not reset their scroll position by revealing the #anchor fragment.\n      if (!userScrolled) {\n        return revealHash()\n      }\n    })\n  })\n\n  up.on(window, 'hashchange', () => revealHash())\n\n  return {\n    reveal,\n    revealHash,\n    firstHashTarget,\n    config,\n    get: closest,\n    subtree: getSubtree,\n    around: getAround,\n    get root() { return getRoot() },\n    rootWidth,\n    rootHeight,\n    rootHasReducedWidthFromScrollbar,\n    rootOverflowElement,\n    isRoot,\n    scrollbarWidth,\n    saveScroll,\n    restoreScroll,\n    resetScroll,\n    saveFocus,\n    restoreFocus,\n    absolutize,\n    focus: doFocus,\n    tryFocus,\n    newStateCache,\n    focusedElementWithin,\n    copyCursorProps,\n    bodyShifter,\n  }\n})()\n\nup.focus = up.viewport.focus\nup.reveal = up.viewport.reveal\n", "/*-\nAnimation\n=========\n\nWhen you [update a page fragment](/up.link) you can animate the change.\n\n### Transitions\n\nWhen we morph between an old and a new element, we call it a *transition*.\n\nFor instance, you may add an [`[up-transition]`](/a-up-transition) attribute to your\nlinks or forms to smoothly fade out the old element while fading in the new element:\n\n```html\n<a href=\"/users\"\n  up-target=\".list\"\n  up-transition=\"cross-fade\">\n  Show users\n</a>\n```\n\n### Animations\n\nIn contrast, when we animate a new element without simultaneously removing an\nold element, we call it an *animation*.\n\nAn example for an animation is opening a new overlay. We can animate the appearance\nof the dialog by adding an [`[up-animation]`](/a-up-layer-new#up-animation) attribute to the opening link:\n\n```html\n<a href=\"/users\"\n  up-target=\".list\"\n  up-layer=\"new\"\n  up-animation=\"move-from-top\">\n  Show users\n</a>\n```\n\n### Which animations are available?\n\nUnpoly ships with a number of [predefined transitions](/up.morph#named-transitions)\nand [predefined animations](/up.animate#named-animations).\n\nYou can define custom animations using `up.transition()` and\n`up.animation()`.\n\n\n@see predefined-animations\n@see predefined-transitions\n@see motion-tuning\n\n@see a[up-transition]\n@see up.animation\n@see up.transition\n\n@module up.motion\n*/\nup.motion = (function() {\n\n  const u = up.util\n  const e = up.element\n\n  let namedAnimations = {}\n  let namedTransitions = {}\n\n  const motionController = new up.MotionController('motion')\n\n  /*-\n  Sets default options for animations and transitions.\n\n  @property up.motion.config\n  @param {number} [config.duration=175]\n    The default duration for all animations and transitions (in milliseconds).\n  @param {string} [config.easing='ease']\n    The default timing function that controls the acceleration of animations and transitions.\n\n    See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function)\n    for a list of pre-defined timing functions.\n  @param {boolean} [config.enabled]\n    Whether animation is enabled.\n\n    By default animations are enabled, unless the user has configured their\n    system to [minimize non-essential motion](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion).\n\n    Set this to `false` to disable animation globally.\n    This can be useful in full-stack integration tests.\n  @stable\n  */\n  const config = new up.Config(() => ({\n    duration: 175,\n    easing: 'ease',\n    enabled: !matchMedia('(prefers-reduced-motion: reduce)').matches\n  }))\n\n  function pickDefault(registry) {\n    return u.pickBy(registry, 'isDefault')\n  }\n\n  function reset() {\n    motionController.reset()\n    namedAnimations = pickDefault(namedAnimations)\n    namedTransitions = pickDefault(namedTransitions)\n  }\n\n  /*-\n  Returns whether Unpoly will perform animations.\n\n  Set [`up.motion.config.enabled = false`](/up.motion.config#config.enabled) in order to disable animations globally.\n\n  @function up.motion.isEnabled\n  @return {boolean}\n  @stable\n  */\n  function isEnabled() {\n    return config.enabled\n  }\n\n  /*-\n  Applies the given animation to the given element.\n\n  ### Example\n\n  ```js\n  up.animate('.warning', 'fade-in')\n  ```\n\n  You can pass additional options:\n\n  ```js\n  up.animate('.warning', 'fade-in', {\n    duration: 250,\n    easing: 'linear'\n  })\n  ```\n\n  ### Named animations\n\n  Unpoly ships with a number of [predefined animations](/predefined-animations)\n\n  You can define additional named animations using [`up.animation()`](/up.animation).\n\n  ### Animating CSS properties directly\n\n  By passing an object instead of an animation name, you can animate\n  the CSS properties of the given element:\n\n  ```js\n  var warning = document.querySelector('.warning')\n  warning.style.opacity = 0\n  up.animate(warning, { opacity: 1 })\n  ```\n\n  CSS properties must be given in `kebab-case`, not `camelCase`.\n\n  ### Multiple animations on the same element\n\n  Unpoly doesn't allow more than one concurrent animation on the same element.\n\n  If you attempt to animate an element that is already being animated,\n  the previous animation will instantly jump to its last frame before\n  the new animation begins.\n\n  @function up.animate\n  @param {Element|jQuery|string} element\n    The element to animate.\n  @param {string|Function(element, options): Promise|Object} animation\n    Can either be:\n\n    - The name of a [registered](/up.animation) animation\n    - A function performing the animation (same contract as a function passed to `up.animation()`)\n    - An object of CSS attributes describing the last frame of the animation (using kebeb-case property names)\n  @param {number} [options.duration=300]\n    The duration of the animation, in milliseconds.\n  @param {string} [options.easing='ease']\n    The timing function that controls the animation's acceleration.\n\n    See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function)\n    for a list of pre-defined timing functions.\n  @return {Promise}\n    A promise for the animation's end.\n  @stable\n  */\n  function animate(element, animation, options) {\n    // If passed a selector, up.fragment.get() will prefer a match on the current layer.\n    element = up.fragment.get(element)\n    options = u.options(options)\n\n    let animationFn = findAnimationFn(animation)\n    // willAnimate() also sets a default { duration } and { easing }.\n    const willRun = willAnimate(element, animation, options)\n    animationFn = up.error.guardFn(animationFn)\n\n    if (willRun) {\n      // up.puts 'up.animate()', Animating %o with animation %o', element, animation\n      const runNow = () => animationFn(element, options)\n      return motionController.startFunction(element, runNow, options)\n    } else {\n      return skipAnimate(element, animation)\n    }\n  }\n\n  function willAnimate(element, animationOrTransition, options) {\n    applyConfig(options)\n    return isEnabled() && !isNone(animationOrTransition) && (options.duration > 0) && !e.isSingleton(element)\n  }\n\n  function skipAnimate(element, animation) {\n    if (u.isOptions(animation)) {\n      // If we are given the final animation frame as an object of CSS properties,\n      // the best we can do is to set the final frame without animation.\n      e.setStyle(element, animation)\n    }\n    // Signal that the animation is already done.\n    return Promise.resolve()\n  }\n\n  /*-\n  Animates the given element's CSS properties using CSS transitions.\n\n  Does not track the animation, nor does it finishes existing animations\n  (use `up.motion.animate()` for that). It does, however, listen to the motionController's\n  finish event.\n\n  @function animateNow\n  @param {Element|jQuery|string} element\n    The element to animate.\n  @param {Object} lastFrame\n    The CSS properties that should be transitioned to.\n  @param {number} [options.duration=300]\n    The duration of the animation, in milliseconds.\n  @param {string} [options.easing='ease']\n    The timing function that controls the animation's acceleration.\n    See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function)\n    for a list of pre-defined timing functions.\n  @return {Promise}\n    A promise that fulfills when the animation ends.\n  @internal\n  */\n  function animateNow(element, lastFrame, options) {\n    options = { ...options, finishEvent: motionController.finishEvent }\n    const cssTransition = new up.CSSTransition(element, lastFrame, options)\n    return cssTransition.start()\n  }\n\n  function applyConfig(options) {\n    options.easing ||= config.easing\n    options.duration ||= config.duration\n  }\n\n  function findNamedAnimation(name) {\n    return namedAnimations[name] || up.fail(\"Unknown animation %o\", name)\n  }\n\n  /*-\n  Completes [animations](/up.animate) and [transitions](/up.morph).\n\n  If called without arguments, all animations on the screen are completed.\n  If given an element (or selector), animations on that element and its children\n  are completed.\n\n  Animations are completed by jumping to the last animation frame instantly.\n  Promises returned by animation and transition functions instantly settle.\n\n  Emits the `up:motion:finish` event that is handled by `up.animate()`.\n\n  Does nothing if there are no animation to complete.\n\n  @function up.motion.finish\n  @param {Element|jQuery|string} [element]\n    The element around which to finish all animations.\n  @return {Promise}\n    A promise that fulfills when animations and transitions have finished.\n  @stable\n  */\n  function finish(element) {\n    return motionController.finish(element)\n  }\n\n  /*-\n  This event is emitted on an animating element by `up.motion.finish()` to\n  request the animation to instantly finish and skip to the last frame.\n\n  Custom [animation](/up.animation) and [transition](/up.transition) functions are expected\n  to instantly settle their promises when this event is observed on the\n  animating element.\n\n  > [IMPORTANT]\n  > The `up:motion:finish` event does **not** signal the end of an animation.\n  > For this see [awaiting postprocessing](/render-hooks#awaiting-postprocessing).\n\n  @event up:motion:finish\n  @param {Element} event.target\n    The animating element.\n  @stable\n  */\n\n  /*-\n  Performs an animated transition between the `source` and `target` elements.\n\n  Transitions are implement by performing two animations in parallel,\n  causing `source` to disappear and the `target` to appear.\n\n  - `target` is [inserted before](https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore) `source`\n  - `source` is removed from the [document flow](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning) with `position: absolute`.\n     It will be positioned over its original place in the flow that is now occupied by `target`.\n  - Both `source` and `target` are animated in parallel\n  - `source` is removed from the DOM\n\n  ### Named transitions\n\n  Unpoly ships with a number of [predefined transitions](/predefined-transitions).\n\n  You can define additional named transitions using [`up.transition()`](/up.transition).\n\n\n  ### Implementation details\n\n  During a transition both the old and new element occupy\n  the same position on the screen.\n\n  Since the CSS layout flow will usually not allow two elements to\n  overlay the same space, Unpoly:\n\n  - The old and new elements are cloned\n  - The old element is removed from the layout flow using `display: hidden`\n  - The new element is hidden, but still leaves space in the layout flow by setting `visibility: hidden`\n  - The clones are [absolutely positioned](https://developer.mozilla.org/en-US/docs/Web/CSS/position#Absolute_positioning)\n    over the original elements.\n  - The transition is applied to the cloned elements.\n    At no point will the hidden, original elements be animated.\n  - When the transition has finished, the clones are removed from the DOM and the new element is shown.\n    The old element remains hidden in the DOM.\n\n  @function up.morph\n  @param {Element|jQuery|string} source\n  @param {Element|jQuery|string} target\n    The target element that will remain in the DOM once the transition finished.\n\n    It should be detached before calling `up.morph()`.\n  @param {Function(oldElement, newElement, options)|string} transition\n    Can either be:\n\n    - The name of a [registered](/up.transition) transition\n    - A function performing the transition (same contract as a function passed to `up.transition()`)\n  @param {number} [options.duration=300]\n    The duration of the animation, in milliseconds.\n  @param {string} [options.easing='ease']\n    The timing function that controls the transition's acceleration.\n\n    See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function)\n    for a list of pre-defined timing functions.\n  @param {boolean} [options.reveal=false]\n    Whether to reveal the new element by scrolling its parent viewport.\n  @return {Promise}\n    A promise that fulfills when the transition ends.\n  @stable\n  */\n  function morph(oldElement, newElement, transitionObject, options) {\n    options = u.options(options)\n    applyConfig(options)\n\n    // If passed a selector, up.fragment.get() will prefer a match on the current layer.\n    // This also unwraps jQuery collections.\n    oldElement = up.fragment.get(oldElement)\n    newElement = up.fragment.get(newElement)\n\n    let transitionFn = findTransitionFn(transitionObject)\n    // willAnimate() also sets a default { duration } and { easing }.\n    const willMorph = willAnimate(oldElement, transitionFn, options)\n    transitionFn = up.error.guardFn(transitionFn)\n\n    // Remove callbacks from our options hash in case transitionFn calls morph() recursively.\n    // If we passed on these callbacks, we might call destructors, events, etc. multiple times.\n    const beforeStart = u.pluckKey(options, 'beforeStart') || u.noop\n    const afterInsert = u.pluckKey(options, 'afterInsert') || u.noop\n    const beforeDetach = u.pluckKey(options, 'beforeDetach') || u.noop\n    const afterDetach = u.pluckKey(options, 'afterDetach') || u.noop\n    // Callback to scroll newElement into position before we start the enter animation.\n    const scrollNew = u.pluckKey(options, 'scrollNew') || u.noop\n\n    beforeStart()\n\n    if (willMorph) {\n      // If morph() is called from inside a transition function we\n      // (1) don't want to track it again and\n      // (2) don't want to create additional absolutized bounds\n      if (motionController.isActive(oldElement) && (options.trackMotion === false)) {\n        return transitionFn(oldElement, newElement, options)\n      }\n\n      up.puts('up.morph()', 'Morphing %o to %o with transition %O over %d ms', oldElement, newElement, transitionObject, options.duration)\n\n      const viewport = up.viewport.get(oldElement)\n      const scrollTopBeforeReveal = viewport.scrollTop\n\n      const oldRemote = up.viewport.absolutize(oldElement, {\n        // Because the insertion will shift elements visually, we must delay insertion\n        // until absolutize() has measured the bounding box of the old element.\n        //\n        // After up.viewport.absolutize() the DOM tree will look like this:\n        //\n        //     <new-element></new-element>\n        //     <up-bounds>\n        //        <old-element><old-element>\n        //     </up-bounds>\n        afterMeasure() {\n          e.insertBefore(oldElement, newElement)\n          afterInsert()\n        }\n      })\n\n      const trackable = async function() {\n        // Scroll newElement into position before we start the enter animation.\n        scrollNew()\n\n        // Since we have scrolled the viewport (containing both oldElement and newElement),\n        // we must shift the old copy so it looks like it it is still sitting\n        // in the same position.\n        const scrollTopAfterReveal = viewport.scrollTop\n        oldRemote.moveBounds(0, scrollTopAfterReveal - scrollTopBeforeReveal)\n\n        await transitionFn(oldElement, newElement, options)\n\n        beforeDetach()\n        oldRemote.bounds.remove()\n        afterDetach()\n      }\n\n      return motionController.startFunction([oldElement, newElement], trackable, options)\n\n    } else {\n      beforeDetach()\n      // Swapping the elements directly with replaceWith() will cause\n      // jQuery to remove all data attributes, which we use to store destructors\n      swapElementsDirectly(oldElement, newElement)\n      afterInsert()\n      afterDetach()\n      scrollNew()\n\n      // Satisfy our signature as an async function.\n      return Promise.resolve()\n    }\n  }\n\n  function findTransitionFn(object) {\n    if (isNone(object)) {\n      return undefined\n    } else if (u.isFunction(object)) {\n      return object\n    } else if (u.isArray(object)) {\n      return composeTransitionFn(...object)\n    } else if (u.isString(object)) {\n      let namedTransition\n      if (object.indexOf('/') >= 0) { // Compose a transition from two animation names\n        return composeTransitionFn(...object.split('/'))\n      } else if (namedTransition = namedTransitions[object]) {\n        return findTransitionFn(namedTransition)\n      }\n    } else {\n      up.fail(\"Unknown transition %o\", object)\n    }\n  }\n\n  function composeTransitionFn(oldAnimation, newAnimation) {\n    // A composition of two null-animations is a null-transform\n    // and should be skipped.\n    if (!isNone(oldAnimation) && !isNone(newAnimation)) {\n      const oldAnimationFn = findAnimationFn(oldAnimation) || u.asyncNoop\n      const newAnimationFn = findAnimationFn(newAnimation) || u.asyncNoop\n      return (oldElement, newElement, options) => Promise.all([\n        oldAnimationFn(oldElement, options),\n        newAnimationFn(newElement, options)\n      ])\n    }\n  }\n\n  function findAnimationFn(object) {\n    if (isNone(object)) {\n      return undefined\n    } else if (u.isFunction(object)) {\n      return object\n    } else if (u.isString(object)) {\n      return findNamedAnimation(object)\n    } else if (u.isOptions(object)) {\n      return (element, options) => animateNow(element, object, options)\n    } else {\n      up.fail('Unknown animation %o', object)\n    }\n  }\n\n  // Have a separate function so we can mock it in specs.\n  const swapElementsDirectly = up.mockable(function(oldElement, newElement) {\n    oldElement.replaceWith(newElement)\n  })\n\n  function motionOptions(element, options, parserOptions) {\n    options = u.options(options)\n    let parser = new up.OptionsParser(element, options, parserOptions)\n\n    parser.booleanOrString('animation')\n    parser.booleanOrString('transition')\n    parser.string('easing')\n    parser.number('duration')\n\n    return options\n  }\n\n  /*-\n  Defines a named transition that [morphs](/up.morph) from one element to another.\n\n  ### Example\n\n  Here is the definition of the pre-defined `cross-fade` animation:\n\n  ```js\n  up.transition('cross-fade', function(oldElement, newElement, options) {\n    return Promise.all([\n      up.animate(oldElement, 'fade-out', options),\n      up.animate(newElement, 'fade-in', options)\n    ])\n  })\n  ```\n\n  ### Callback contract\n\n  For animations that can be expressed through [CSS transitions](https://www.w3schools.com/css/css3_transitions.asp),\n  we recomend that your definitions end by calling [`up.animate()`](/up.animate) with an object argument,\n  passing along your `options` and returning the result.\n\n  If you choose to *not* use `up.animate()` and roll your own\n  logic instead, your code must honor the following contract:\n\n  1. It must honor the options `{ duration, easing }` if given.\n  2. It must *not* remove any of the given elements from the DOM.\n  3. It returns a promise that is fulfilled when the transition has ended.\n  4. If during the animation an event `up:motion:finish` is emitted on\n     either element, the transition instantly jumps to the last frame\n     and resolves the returned promise.\n\n  Calling [`up.animate()`](/up.animate) with an object argument\n  will take care of all these points.\n\n  @function up.transition\n  @param {string} name\n  @param {Function(oldElement, newElement, options): Promise} transition\n  @stable\n  */\n  function registerTransition(name, transition) {\n    const fn = findTransitionFn(transition)\n    fn.isDefault = up.framework.evaling\n    namedTransitions[name] = fn\n  }\n\n  /*-\n  Defines a named animation.\n\n  ### Example\n\n  Here is the definition of the pre-defined `fade-in` animation:\n\n  ```js\n  up.animation('fade-in', function(element, options) {\n    element.style.opacity = 0\n    return up.animate(element, { opacity: 1 }, options)\n  })\n  ```\n\n  ### Callback contract\n\n  For animations that can be expressed through [CSS transitions](https://www.w3schools.com/css/css3_transitions.asp),\n  we recomend that your definitions end by calling calling [`up.animate()`](/up.animate) with an object argument,\n  passing along your `options` and returning the result.\n\n  If you choose to *not* use `up.animate()` and roll your own\n  animation code instead, your code must honor the following contract:\n\n  1. It must honor the options `{ duration, easing }`, if given.\n  2. It must *not* remove any of the given elements from the DOM.\n  3. It returns a promise that is fulfilled when the transition has ended\n  4. If during the animation an event `up:motion:finish` is emitted on\n     the given element, the transition instantly jumps to the last frame\n     and resolves the returned promise.\n\n  Calling [`up.animate()`](/up.animate) with an object argument\n  will take care of all these points.\n\n  @function up.animation\n  @param {string} name\n  @param {Function(element, options): Promise} animation\n  @stable\n  */\n  function registerAnimation(name, animation) {\n    const fn = findAnimationFn(animation)\n    fn.isDefault = up.framework.evaling\n    namedAnimations[name] = fn\n  }\n\n  up.on('up:framework:boot', function() {\n    // Explain to the user why animations aren't working.\n    // E.g. the user might have disabled animations in her OS.\n    if (!isEnabled()) {\n      up.puts('up.motion', 'Animations are disabled')\n    }\n  })\n\n  /*-\n  Returns whether the given animation option will cause the animation\n  to be skipped.\n\n  @function up.motion.isNone\n  @internal\n  */\n  function isNone(animationOrTransition) {\n    // false, undefined, '', null and the string \"none\" are all ways to skip animations\n    return !animationOrTransition || animationOrTransition === 'none'\n  }\n\n  function registerOpacityAnimation(name, from, to) {\n    registerAnimation(name, function(element, options) {\n      element.style.opacity = 0\n      e.setStyle(element, { opacity: from })\n      return animateNow(element, { opacity: to }, options)\n    })\n  }\n\n  registerOpacityAnimation('fade-in', 0, 1)\n  registerOpacityAnimation('fade-out', 1, 0)\n\n  function translateCSS(dx, dy) {\n    return { transform: `translate(${dx}px, ${dy}px)` }\n  }\n\n  function noTranslateCSS() {\n    return { transform: null }\n  }\n\n  function untranslatedBox(element) {\n    e.setStyle(element, noTranslateCSS())\n    return element.getBoundingClientRect()\n  }\n\n  function registerMoveAnimations(direction, boxToTransform) {\n    const animationToName = `move-to-${direction}`\n    const animationFromName = `move-from-${direction}`\n\n    registerAnimation(animationToName, function(element, options) {\n      const box = untranslatedBox(element)\n      const transform = boxToTransform(box)\n      return animateNow(element, transform, options)\n    })\n\n    registerAnimation(animationFromName, function(element, options) {\n      const box = untranslatedBox(element)\n      const transform = boxToTransform(box)\n      e.setStyle(element, transform)\n      return animateNow(element, noTranslateCSS(), options)\n    })\n  }\n\n  registerMoveAnimations('top', function(box) {\n    const travelDistance = box.top + box.height\n    return translateCSS(0, -travelDistance)\n  })\n\n  registerMoveAnimations('bottom', function(box) {\n    const travelDistance = up.viewport.rootHeight() - box.top\n    return translateCSS(0, travelDistance)\n  })\n\n  registerMoveAnimations('left', function(box) {\n    const travelDistance = box.left + box.width\n    return translateCSS(-travelDistance, 0)\n  })\n\n  registerMoveAnimations('right', function(box) {\n    const travelDistance = up.viewport.rootWidth() - box.left\n    return translateCSS(travelDistance, 0)\n  })\n\n  registerTransition('cross-fade', ['fade-out', 'fade-in'])\n  registerTransition('move-left', ['move-to-left', 'move-from-right'])\n  registerTransition('move-right', ['move-to-right', 'move-from-left'])\n  registerTransition('move-up', ['move-to-top', 'move-from-bottom'])\n  registerTransition('move-down', ['move-to-bottom', 'move-from-top'])\n\n  /*-\n  [Follows](/a-up-follow) this link and swaps in the new fragment\n  with an animated transition.\n\n  > [NOTE]\n  > Transitions are not possible when replacing the `<body>` element.\n\n  ### Example\n\n  ```html\n  <a href=\"/page2\"\n    up-target=\".story\"\n    up-transition=\"move-left\">\n    Next page\n  </a>\n  ```\n\n  @selector a[up-transition]\n  @params-note\n    All attributes for `a[up-follow]` may also be used.\n  @param [up-transition]\n    The [name of a transition](/predefined-transitions).\n  @param [up-fail-transition]\n    The transition to use when the server responds with an error code.\n\n    @see failed-responses\n  @stable\n  */\n\n  /*-\n  [Submits](/form-up-submit) this form and swaps in the new fragment\n  with an animated transition.\n\n  ### Example\n\n  ```html\n  <form action=\"/tasks\"\n    up-target=\".content\"\n    up-transition=\"cross-fade\">\n    ...\n  </form>\n  ```\n\n  @selector form[up-transition]\n  @params-note\n    All attributes for `form[up-submit]` may also be used.\n  @param [up-transition]\n    The [name of a transition](/predefined-transitions).\n  @param [up-fail-transition]\n    The transition to use when the server responds with an error code.\n\n    @see failed-responses\n  @stable\n  */\n\n  up.on('up:framework:reset', reset)\n\n  return {\n    morph,\n    animate,\n    finish,\n    finishCount() { return motionController.finishCount },\n    transition: registerTransition,\n    animation: registerAnimation,\n    config,\n    isEnabled,\n    isNone,\n    willAnimate,\n    swapElementsDirectly,\n    motionOptions,\n  }\n})()\n\nup.transition = up.motion.transition\nup.animation = up.motion.animation\nup.morph = up.motion.morph\nup.animate = up.motion.animate\n", ".up-request-loader {\n  display: none;\n}\n\nup-progress-bar {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 999999999;\n  height: 3px;\n  background-color: #007bff;\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiL2hvbWUvaGVubmluZy9Qcm9qZWN0cy91bnBvbHkvc3JjL3VucG9seSIsInNvdXJjZXMiOlsibmV0d29yay5zYXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBRUU7OztBQUVGO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLnVwLXJlcXVlc3QtbG9hZGVyXG4gIC8vIFRoaXMgY2xhc3MgaXMgYXNzaWduZWQgdG8gdGhlIGZvcm0gd2UncmUgdXNpbmcgdG8gc3VibWl0IGEgZnVsbCBwYWdlIGxvYWQuXG4gIGRpc3BsYXk6IG5vbmVcblxudXAtcHJvZ3Jlc3MtYmFyXG4gIHBvc2l0aW9uOiBmaXhlZFxuICB0b3A6IDBcbiAgbGVmdDogMFxuICB6LWluZGV4OiA5OTk5OTk5OTlcbiAgaGVpZ2h0OiAzcHhcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZlxuIl19 */", "require('./network.sass')\n\nconst u = up.util\n\n/*-\nNetwork requests\n================\n\nThis package implements an optimized HTTP client\nthat is used for all requests made through Unpoly.\n\nThe HTTP client offers many quality-of-life improvements, for example:\n\n- Requests may be [cached](/caching) to re-use responses and enable [preloading](/a-up-preload).\n  Cached content is [revalidated](/caching#revalidation) after rendering, so the user never\n  sees stale content.\n- You may [handle network issues](/network-issues), such as disconnects, flaky connections or low bandwidth.\n- A [progress bar](/loading-indicators) is shown when requests take too long to finish.\n  You may also implement a [custom loading indicator](/loading-indicators#custom-loading-indicators).\n- When two requests [target](/targeting-fragments) the same element,\n  Unpoly will [abort the earlier request](/aborting-requests).\n- Requests send [additional HTTP headers](/up.protocol) that the server may use to [optimize its response](/optimizing-responses).\n  For example, when [updating a fragment](/targeting-fragments), the target selector is automatically sent\n  as an `X-Up-Target` header. The server may choose to only render the targeted fragment.\n- Useful events like `up:request:loaded` or `up:network:late` are emitted throughout the request/response lifecycle.\n- When too many requests are sent concurrently, excessive requests are [queued](/up.network.config#config.concurrency).\n  This prevents exhausting the user's bandwidth and limits race conditions in end-to-end tests.\n\nUnpoly's HTTP client is used automatically when rendering, e.g. when [following a link](/a-up-follow)\nor [submitting a form](/form-up-submit). To use the client from your own JavaScripts, use `up.request()`.\n\n@see caching\n@see aborting-requests\n@see network-issues\n@see loading-indicators\n\n@see up.request\n@see up.Response\n@see up:network:late\n\n@module up.network\n*/\nup.network = (function() {\n\n  /*-\n  Sets default options for this package.\n\n  @property up.network.config\n\n  @param {number|Function(): number} [config.concurrency]\n    The maximum number of concurrently loading requests.\n\n    Additional requests are queued. [Preload](/a-up-preload) requests are\n    always queued behind non-preload requests.\n\n    By default Unpoly allows 6 concurrent requests.\n    You might find it useful to set a concurrency of `1` in end-to-end tests\n    to prevent race conditions.\n\n    Your browser may impose additional concurrency limits  regardless of what you configure here.\n\n  @param {boolean} [config.wrapMethod]\n    Whether to wrap non-standard HTTP methods in a POST request.\n\n    If this is set, methods other than GET and POST will be converted to a `POST` request\n    and carry their original method as a `_method` parameter. This is to [prevent unexpected redirect behavior](https://makandracards.com/makandra/38347).\n\n    If you disable method wrapping, make sure that your server always redirects with\n    with a 303 status code (rather than 302).\n\n  @param {number} [config.cacheSize=70]\n    The maximum number of responses to cache.\n\n    If the size is exceeded, the oldest responses will be dropped from the cache.\n\n  @param {number|Function(up.Request): number} [config.badResponseTime=400]\n    How long to wait before emitting the [`up:network:late` event](/up:network:late).\n\n    Requests exceeding this response time will also cause a [progress bar](/loading-indicators#progress-bar)\n    to appear at the top edge of the screen.\n\n    The value is given in milliseconds.\n\n    @experimental\n  @param {number|undefined} [config.timeout=90_000]\n    A default [timeout](/up.request#options.timeout) for [requests](/up.request) in milliseconds.\n\n    Set `undefined` to not use a timeout.\n\n  @param {boolean|Function(up.Response): boolean} [config.fail]\n    Whether Unpoly will consider a response to constitute a [failed response](/failed-responses).\n\n    By default Unpoly will consider any status code other than HTTP 2xx or [304](/skipping-rendering#rendering-nothing) to represent a failed response.\n    You may use this option to customize this behavior. For instance, you can fail a response if it contains a given header or body text.\n\n    The following configuration will fail all responses with an `X-Unauthorized` header:\n\n    ```js\n    let badStatus = up.network.config.fail\n    up.network.config.fail = (response) => badStatus(response) || response.header('X-Unauthorized')\n    ```\n\n    Also see [Customizing failure detection](/failed-responses#customizing-failure-detection).\n\n  @param {number} [config.cacheExpireAge=15_000]\n    The number of milliseconds after which a cache entry is considered [expired](/caching#expiration) and will trigger [revalidation](/caching#revalidation) when used.\n\n    The configured age should at least cover the average time between [preloading](/a-up-preload) and following a link.\n\n    Defaults to 15 seconds.\n\n  @param {number} [config.cacheEvictAge=90*60*1000]\n    The number of milliseconds after which a cache entry is [evicted](/caching#eviction).\n\n    In practice you will often prefer [*expiration*](/caching#expiration) over *eviction*.\n\n    Defaults to 90 minutes.\n\n  @param {Function(up.Request): boolean} [config.autoCache]\n    Whether to [cache](/caching) the given request with `{ cache: 'auto' }`.\n\n    By default Unpoly will auto-cache requests with [safe](https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP) HTTP methods.\n\n    You may change this default to prevent auto-caching of some of your routes. For example, this will prevent auto-caching\n    of requests to URLs ending with `/edit`:\n\n    ```js\n    let defaultAutoCache = up.network.config.autoCache\n    up.network.config.autoCache = function(request) {\n      defaultAutoCache(request) && !request.url.endsWith('/edit')\n    }\n    ```\n\n  @param {Function(up.Request, up.Response | up.Offline): boolean|string} [config.expireCache]\n    Whether to [expire](/caching#expiration) the [cache](/caching) after the given request and response.\n\n    By default Unpoly will expire the entire cache after a request with an [unsafe](https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP) HTTP method.\n\n    The configured function can either return a boolean or an [URL pattern](/url-patterns) matching responses that should be expired.\n\n  @param {Function(up.Request, up.Response | up.Offline): boolean|string} [config.evictCache=false]\n    Whether to [evict](/caching#eviction) the [cache](/caching) after the given request and response.\n\n    The configured function can either return a boolean or an [URL pattern](/url-patterns) matching responses that should be evicted.\n\n    By default Unpoly will *not* evict any cache entries when a request is made.\n\n    For example, to evict the entire cache after a request with an [unsafe](https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP) HTTP method:\n\n    ```js\n    up.network.config.evictCache = (request) => !request.isSafe()\n    ```\n\n  @param {boolean|Function(): boolean} [config.progressBar]\n    Whether to show a [progress bar](/loading-indicators#progress-bar)\n    for [late requests](#config.badResponseTime).\n\n  @stable\n  */\n  const config = new up.Config(() => ({\n    concurrency: 6,\n    wrapMethod: true,\n    cacheSize: 70,\n    cacheExpireAge: 15 * 1000,\n    cacheEvictAge: 90 * 60 * 1000,\n    badResponseTime: 400,\n    fail(response) { return (response.status < 200 || response.status > 299) && response.status !== 304 },\n    autoCache(request) { return request.isSafe() },\n    expireCache(request, _response) { return !request.isSafe() },\n    evictCache: false,\n    progressBar: true,\n    timeout: 90_000,\n  }))\n\n  const queue = new up.Request.Queue()\n\n  const cache = new up.Request.Cache()\n\n  let progressBar = null\n\n  /*-\n  Returns a [cached](/caching) request matching the given request options.\n\n  Returns `undefined` if the given request is not currently cached.\n\n  > [IMPORTANT]\n  > `up.request()` and `up.render()` will only write to the cache when a [`{ cache }`](/up.request#options.cache) option is set.\n\n  ### Example\n\n  ```\n  let request = up.cache.get({ url: '/foo' })\n\n  if (request) {\n    let response = await request\n    console.log(\"Response is %o\", response)\n  } else {\n    console.log(\"The path /foo has not been requested before!\")\n  }\n  ```\n\n  @function up.cache.get\n  @param {Object} requestOptions\n    The request options to match against the cache.\n\n    See `options` for `up.request()` for documentation.\n  @return {up.Request|undefined}\n    The cached request.\n  @experimental\n  */\n\n  /*-\n  [Evicts](/caching#eviction) responses in the [cache](/caching).\n\n  To only remove some cache entries, pass a [URL pattern](/url-patterns):\n\n  ```js\n  up.cache.evict('/users/*')\n  ```\n\n  The server may also evict cache entries by sending an [`X-Up-Evict-Cache`](/X-Up-Evict-Cache) header.\n\n  @function up.cache.evict\n  @param {string} [pattern]\n    A [URL pattern](/url-patterns) matching cache entries that should be removed.\n\n    If omitted, the entire cache is evicted.\n  @stable\n  */\n\n  /*-\n  [Expires](/caching#expiration) entries in the [cache](/caching).\n\n  To only expire some cache entries, pass a [URL pattern](/url-patterns):\n\n  ```js\n  up.cache.expire('/users/*')\n  ```\n\n  The server may also expire cache entries by sending an [`X-Up-Expire-Cache`](/X-Up-Expire-Cache) header.\n\n  By default Unpoly automatically expires the entire cache whenever it processes\n  a request with an non-GET HTTP method. To customize this rule, use `up.network.config.expireCache`.\n\n  @function up.cache.expire\n  @param {string} [pattern]\n    A [URL pattern](/url-patterns) matching cache entries that should be expire.\n\n    If omitted, the entire cache is expired.\n  @stable\n  */\n\n  /*-\n  Makes the [cache](/caching) assume that `newRequest` has the same response as the\n  already cached `oldRequest`.\n\n  Unpoly uses this internally when the user redirects from `/old` to `/new`.\n  In that case, both `/old` and `/new` will cache the same response from `/new`.\n\n  @function up.cache.alias\n  @param {Object|up.Request} oldRequest\n    The earlier request or [request options](/up.request).\n  @param {Object|up.Request|undefined} newRequest\n    The new request or [request options](/up.request).\n\n    If `oldRequest` wasn't found in the cache, `undefined` is returned.\n  @experimental\n  */\n\n  /*-\n  Manually stores a request in the [cache](/caching).\n\n  Future calls to `up.request()` will try to re-use this request before\n  making a new request.\n\n  @function up.cache.set\n  @param {string} request.url\n  @param {string} [request.method='GET']\n  @param {string} [request.target='body']\n  @param {up.Request} request\n    The request to cache. The cache is also a promise for the response.\n  @internal\n  */\n\n  function reset() {\n    abortRequests()\n    queue.reset()\n    cache.reset()\n    progressBar?.destroy()\n    progressBar = null\n  }\n\n  /*-\n  Makes an AJAX request to the given URL.\n\n  Returns an `up.Request` object which contains information about the request.\n  This request object is also a promise for an `up.Response` that contains\n  the response text, headers, etc.\n\n  ### Example\n\n  ```js\n  let request = up.request('/search', { params: { query: 'sunshine' } })\n  console.log('We made a request to', request.url)\n\n  let response = await request\n  console.log('The response text is', response.text)\n  ```\n\n  ### Error handling\n\n  The returned promise will fulfill with an `up.Response` when the server\n  responds with an HTTP status of 2xx (like `200`).\n\n  When the server responds with an HTTP error code (like `422` or `500`), the promise\n  will *reject* with `up.Response`.\n\n  When the request fails from a fatal error (like a timeout or loss of connectivity),\n  the promise will reject with an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object.\n\n  Here is an example for a complete control flow that handles both HTTP error codes\n  and fatal errors:\n\n  ```js\n  try {\n    let response = await up.request('/search', { params: { query: 'sunshine' } })\n    console.log('Successful response with text:', response.text)\n  } catch (e) {\n    if (e instanceof up.Response) {\n      console.log('Server responded with HTTP status %s and text %s', e.status, e.text)\n    } else {\n      console.log('Fatal error during request:', e.message)\n    }\n  }\n  ```\n\n  ### Caching\n\n  You may [cache](/caching) responses by passing a `{ cache }` option. Responses for a cached\n  request will resolve instantly.\n\n  See [Caching](/caching) for more details and examples.\n\n  @function up.request\n\n  @param {string} [url]\n    The requested URL.\n\n    Instead of passing the URL as a string argument, you can also pass it as an `{ url }` option.\n\n  @param {string} [options.url]\n    The requested URL.\n\n  @param {string} [options.method='GET']\n    The HTTP method for the request.\n\n  @param {Object|up.Params|FormData|string|Array} [options.params={}]\n    [Parameters](/up.Params) that should be sent as the request's\n    [query string](https://en.wikipedia.org/wiki/Query_string) or payload.\n\n    When making a `GET` request to a URL with a query string, the given `{ params }` will be added\n    to the query parameters.\n\n  @param {boolean} [options.cache=false]\n    Whether to read from and write to the [cache](/caching).\n\n    With `{ cache: true }` Unpoly will try to re-use a cached response before connecting\n    to the network. If no cached response exists, Unpoly will make a request and cache\n    the server response.\n\n    With `{ cache: 'auto' }` Unpoly will use the cache only if `up.network.config.autoCache`\n    returns `true` for this request.\n\n    With `{ cache: false }` (the default) Unpoly will always make a network request.\n\n  @param {boolean|string} [options.expireCache]\n    Whether to [expire](/caching#expiration) the [cache](/caching) after this request.\n\n    Defaults to the result of `up.network.config.expireCache`, which\n    defaults to expiring the entire cache after a non-GET request.\n\n    You may also pass a [URL pattern](/url-patterns) to only expire matching responses.\n\n  @param {boolean|string} [options.evictCache]\n    Whether to [evict](/caching#eviction) the [cache](/caching) after this request.\n\n    Defaults to the result of `up.network.config.evictCache`, which defaults to `false`.\n\n    You may also pass a [URL pattern](/url-patterns) to only evict matching responses.\n\n  @param {Object} [options.headers={}]\n    An object of additional HTTP headers.\n\n    Unpoly will by default send a number of custom request headers.\n    See `up.protocol` for details.\n\n  @param {boolean} [options.wrapMethod]\n    Whether to wrap non-standard HTTP methods in a POST request.\n\n    If this is set, methods other than GET and POST will be converted to a `POST` request\n    and carry their original method as a `_method` parameter. This is to [prevent unexpected redirect behavior](https://makandracards.com/makandra/38347).\n\n    Defaults to [`up.network.config`](/up.network.config#config.wrapMethod).\n\n  @param {string} [options.timeout]\n    A timeout in milliseconds.\n\n    If the request is queued due to [many concurrent requests](/up.network.config#config.concurrency),\n    the timeout will not include the time spent waiting in the queue.\n\n  @param {string} [options.target='body']\n    The CSS selector that will be sent as an `X-Up-Target` header.\n\n  @param {string} [options.failTarget='body']\n    The CSS selector that will be sent as an `X-Up-Fail-Target` header.\n\n  @param {string} [options.layer='current']\n    The [layer](/up.layer) this request is associated with.\n\n    If this request is intended to update an existing fragment, this is that fragment's layer.\n\n    If this request is intended to [open an overlay](/opening-overlays),\n    the associated layer is the future overlay's parent layer.\n\n  @param {string} [options.failLayer='current']\n    The [layer](/up.layer) this request is associated with if the server [sends a HTTP status code](/failed-responses).\n\n  @param {Element} [options.origin]\n    The DOM element that caused this request to be sent, e.g. a hyperlink or form element.\n\n  @param {Element} [options.contentType]\n    The format in which to encode the request params.\n\n    Allowed values are `application/x-www-form-urlencoded` and `multipart/form-data`.\n    Only `multipart/form-data` can transport binary data.\n\n    If this option is omitted Unpoly will prefer `application/x-www-form-urlencoded`,\n    unless request params contains binary data.\n\n  @param {string} [options.payload]\n    A custom payload for this request.\n\n    By default Unpoly will build a payload from the given `{ params }` option.\n    Therefore this option is not required when making a standard link or form request to a server\n    that renders HTML.\n\n    A use case for this option is talking to a JSON API that expects requests with a `application/json` payload.\n\n    If a `{ payload }` option is given you must also pass a `{ contentType }`.\n\n  @param {boolean} [options.background=false]\n    Whether this request will load in the background.\n\n    Background requests deprioritized over foreground requests.\n    Background requests also won't emit `up:network:late` events and won't trigger\n    the [progress bar](/loading-indicators#progress-bar).\n\n  @param {number} [options.badResponseTime]\n    The number of milliseconds after which this request can cause\n    an `up:network:late` event.\n\n    Defaults to `up.network.config.badResponseTime`.\n\n    @experimental\n\n  @return {up.Request}\n    An object with information about the request.\n\n    The request object is also a promise for its `up.Response`.\n\n  @stable\n  */\n  function makeRequest(...args) {\n    const options = parseRequestOptions(args)\n    const request = new up.Request(options)\n    processRequest(request)\n    return request\n  }\n\n  function parseRequestOptions(args) {\n    const options = u.extractOptions(args)\n    if (!options.url) { options.url = args[0] }\n    up.migrate.handleRequestOptions?.(options)\n    return options\n  }\n\n  function processRequest(request) {\n    useCachedRequest(request) || queueRequest(request)\n  }\n\n  function useCachedRequest(newRequest) {\n    // If we have an existing promise matching this new request,\n    // we use it unless `request.cache` is explicitly set to `false`.\n    let cachedRequest\n    if (newRequest.willCache() && (cachedRequest = cache.get(newRequest))) {\n      up.puts('up.request()', 'Re-using previous request to %s', newRequest.description)\n\n      // Check if we need to upgrade a cached background request to a foreground request.\n      // This might affect whether we're going to emit an up:network:late event further\n      // down. Consider this case:\n      //\n      // - User preloads a request (1). We have a cache miss and connect to the network.\n      //   This will never trigger `up:network:late`, because we only track foreground requests.\n      // - User loads the same request (2) in the foreground (no preloading).\n      //   We have a cache hit and receive the earlier request that is still preloading.\n      //   Now we *should* trigger `up:network:late`.\n      // - The request (1) finishes. This triggers `up:network:recover`.\n      if (!newRequest.background) {\n        queue.promoteToForeground(cachedRequest)\n      }\n\n      // We cannot simply return `cachedRequest`, since that might have a different #hash property.\n      // While two requests with a different #hash have the same cache key, they are\n      // not the same object.\n      //\n      // What we do instead is have `request` follow the state of `cachedRequest`'s exchange.\n      //\n      // There is also the edge case where a cached request is still in-flight and, when the\n      // response is finally received, has a Vary header that makes it incompatible with\n      // `newRequest`. In this case we re-process `newRequest` as if it was just made.\n      cache.track(cachedRequest, newRequest, { onIncompatible: processRequest })\n\n      return true\n    }\n  }\n\n  // If no existing promise is available, we queue a network request.\n  function queueRequest(request) {\n    handleCaching(request)\n\n    queue.asap(request)\n\n    return true\n  }\n\n  function handleCaching(request) {\n    // Cache the request before it is queued and loaded.\n    // This way additional requests to the same endpoint will hit and track this request.\n    if (request.willCache()) {\n      cache.put(request)\n      request.onLoading = () => cache.put(request)\n    }\n\n    // Once we receive a response we honor options/headers for eviction/expiration,\n    // even if the request was not cachable.\n    u.always(request, function(responseOrError) {\n      // Three places can request the cache to be expired or kept fresh:\n      //\n      // (1) The server via X-Up-Expire-Cache header, found in response.expireCache\n      // (2) The interaction via { expireCache } option, found in request.expireCache\n      // (3) The default in up.network.config.expireCache({ request, response })\n      let expireCache = responseOrError.expireCache ?? request.expireCache ?? u.evalOption(config.expireCache, request, responseOrError)\n      if (expireCache) {\n        cache.expire(expireCache, { except: request })\n      }\n\n      // Three places can request the cache to be evicted:\n      //\n      // (1) The server via X-Up-Evict-Cache header, found in response.evictCache\n      // (2) The interaction via { evictCache } option, found in request.evictCache\n      // (3) The default in up.network.config.evictCache({ request, response })\n      let evictCache = responseOrError.evictCache ?? request.evictCache ?? u.evalOption(config.evictCache, request, responseOrError)\n      if (evictCache) {\n        cache.evict(evictCache, { except: request })\n      }\n\n      // (1) Re-cache a cacheable request in case we evicted the entire cache above\n      // (2) An un-cacheable request should still update an existing cache entry\n      //     (written by a earlier, cacheable request with the same cache key)\n      //     since the later response will be fresher.\n      if (cache.get(request)) {\n        cache.put(request)\n      }\n\n      if (!responseOrError.isCacheable?.()) {\n        cache.evict(request)\n      }\n    })\n  }\n\n  /*-\n  Returns whether Unpoly is currently loading a [request](/up.request).\n\n  The network is also considered busy while requests are [loading in the background](/up.request#options.background).\n\n  @function up.network.isBusy\n  @return {boolean}\n  @stable\n  */\n  function isBusy() {\n    return queue.isBusy()\n  }\n\n  /*-\n  Makes a full-page request, replacing the entire browser environment with a new page from the server response.\n\n  Aborts all pending requests.\n\n  Also see `up.Request#loadPage()`.\n\n  @function up.network.loadPage\n  @param {string} options.url\n    The URL to load.\n  @param {string} [options.method='get']\n    The method for the request.\n\n    Methods other than GET or POST will be [wrapped](/up.protocol.config#config.methodParam) in a POST request.\n  @param {Object|up.Params|FormData|string|Array} [options.params]\n    [Parameters](/up.Params) that should be sent as the request's\n    [query string](https://en.wikipedia.org/wiki/Query_string) or payload.\n\n    When making a `GET` request to a URL with a query string, the given `{ params }` will be added\n    to the query parameters.\n  @experimental\n  */\n  function loadPage(requestsAttrs) {\n    new up.Request(requestsAttrs).loadPage()\n  }\n\n  /*-\n  Aborts pending [requests](/up.request) matching a condition.\n\n  > [important]\n  > This is a low-level API matching requests by their properties. If possible, use `up.fragment.abort()`,\n  > which matches requests by screen region. Only when requests are aborted by screen region, components\n  > can [react to being aborted](/up:fragment:aborted).\n\n  ### Effects of aborting\n\n  When an `up.request()` is aborted, its returned promise rejects with an `up.AbortError`:\n\n  ```js\n  try {\n    let response = await up.request('/path')\n    console.log(response.text)\n  } catch (error) {\n    if (error instanceof up.AbortError) {\n      console.log('Request was aborted: ' + error.reason)\n    }\n  }\n  ```\n\n  Also the event `up:request:aborted` will be emitted.\n\n  ### Aborting all requests\n\n  Without arguments, this will abort all pending requests:\n\n  ```js\n  up.network.abort()\n  ```\n\n  ### Aborting a single request\n\n  To abort a given `up.Request` object, pass it as the first argument:\n\n  ```js\n  let request = up.request('/path')\n  up.network.abort(request)\n  ```\n\n  ### Aborting requests matching a pattern\n\n  To abort all requests matching an [URL pattern](/url-patterns), pass it as the first argument:\n\n  ```js\n  up.network.abort('/path/*')\n  ```\n\n  ### Aborting requests matching an arbitrary condition\n\n  To abort all requests matching an arbitrary condition, pass a function that takes a request\n  and returns a boolean value. Unpoly will abort all request for which the given\n  function returns `true`. E.g. to abort all requests with a HTTP method as `GET`:\n\n  ```js\n  up.network.abort((request) => request.method == 'GET')\n  ```\n\n  ### Aborting requests targeting a fragment or layer\n\n  Use `up.fragment.abort()`.\n\n  @function up.network.abort\n  @param {string|Function(up.Request): boolean|up.Request|boolean} [condition=true]\n    A condition that controls which requests to abort.\n\n    If set to a string, it is interpreted as a [URL pattern](/url-patterns). All requests\n    matching that pattern will be aborted.\n\n    If set to an `up.Request` object, that one request is aborted.\n\n    If set to a function, it will be called for each pending requests.\n    All requests for which the function returns `true` will be aborted.\n\n    If set to `true`, all pending requests are aborted.\n  @param {string} [options.reason]\n    A reason for why the request was aborted.\n\n    If omitted, a generic reason like `\"Aborted request to GET /path\"` will be used.\n\n    The reason will be set as the `up.AbortError`'s message.\n  @param {up.Request} [options.except]\n    An `up.Request` that should not be aborted even if it matches the given `condition`.\n\n    @experimental\n  @stable\n  */\n  function abortRequests(...args) {\n    up.migrate.preprocessAbortArgs?.(args)\n    queue.abort(...args)\n  }\n\n  /*-\n  This event is [emitted](/up.emit) when an [AJAX request](/up.request)\n  was [aborted](/aborting-requests).\n\n  The event is emitted on the layer that caused the request.\n\n  Also see `up:fragment:aborted`.\n\n  @event up:request:aborted\n\n  @param {up.Request} event.request\n    The aborted request.\n\n  @param {up.Layer} [event.layer]\n    The [layer](/up.layer) this request is associated with.\n\n    If this request was intended to update an existing fragment, this is that fragment's layer.\n\n    If this request was intended to [open an overlay](/opening-overlays),\n    the associated layer is the future overlay's parent layer.\n\n  @param {Element} [event.origin]\n    The link or form element that caused the request.\n\n  @param event.preventDefault()\n\n  @experimental\n  */\n\n  /*-\n  This event is [emitted](/up.emit) when [AJAX requests](/up.request)\n  are taking long to finish loading.\n\n  By default Unpoly will wait 400 ms for an AJAX request to finish\n  before emitting `up:network:late`. You may configure this delay like this:\n\n  ```js\n  up.network.config.badResponseTime = 1000 // milliseconds\n  ```\n\n  Once all responses have been received, an [`up:network:recover`](/up:network:recover)\n  will be emitted.\n\n  > [IMPORTANT]\n  > If additional requests are made while Unpoly is already busy  waiting,\n  > **no** additional `up:network:late` events will be emitted.\n\n  Also see [Loading indicators](/loading-indicators).\n\n  @event up:network:late\n  @stable\n  */\n\n  /*-\n  This event is [emitted](/up.emit) when [AJAX requests](/up.request)\n  have [taken long to finish](/up:network:late), but have finished now.\n\n  See [`up:network:late`](/up:network:late) for more documentation on\n  how to use this event for implementing a spinner that shows during\n  long-running requests.\n\n  @event up:network:recover\n  @stable\n  */\n\n  /*-\n  This event is [emitted](/up.emit) before an [AJAX request](/up.request)\n  is sent over the network.\n\n  The event is emitted on the layer that caused the request.\n\n  @event up:request:load\n  @param {up.Request} event.request\n    The request to be sent.\n  @param {up.Layer} [event.layer]\n    The [layer](/up.layer) this request is associated with.\n\n    If this request is intended to update an existing fragment, this is that fragment's layer.\n\n    If this request is intended to [open an overlay](/opening-overlays),\n    the associated layer is the future overlay's parent layer.\n  @param {Element} [event.origin]\n    The link or form element that caused the request.\n  @param event.preventDefault()\n    [Aborts](/up.Request.prototype.abort) the request before it is sent.\n  @stable\n  */\n\n  function registerAliasForRedirect(request, response) {\n    if (request.cache && response.url && request.url !== response.url) {\n      const newRequest = u.variant(request, {\n        method: response.method,\n        url: response.url\n      })\n      cache.alias(request, newRequest)\n    }\n  }\n\n  /*-\n  This event is [emitted](/up.emit) when the response to an [AJAX request](/up.request)\n  has been received.\n\n  Note that this event will also be emitted when the server signals an\n  error with an HTTP status like `500`. Only if the request\n  encounters a fatal error (like a loss of network connectivity),\n  `up:request:offline` is emitted instead.\n\n  The event is emitted on the layer that caused the request.\n\n  @event up:request:loaded\n\n  @param {up.Request} event.request\n    The request.\n\n  @param {up.Response} event.response\n    The response that was received from the server.\n\n  @param {up.Layer} [event.layer]\n    The [layer](/up.layer) this request is associated with.\n\n    If this request is intended to update an existing fragment, this is that fragment's layer.\n\n    If this request is intended to [open an overlay](/opening-overlays),\n    the associated layer is the future overlay's parent layer.\n\n  @param {Element} [event.origin]\n    The link or form element that caused the request.\n\n  @stable\n  */\n\n  /*-\n  This event is [emitted](/up.emit) when an [AJAX request](/up.request)\n  encounters fatal error like a [timeout](/up.network.config#config.timeout) or loss of network connectivity.\n\n  > [NOTE]\n  > This event will *not* be emitted when the server produces an\n  > error message with an HTTP status like `500`. When the server can produce\n  > any response, [`up:request:loaded`](/up:request:loaded) is emitted instead.\n\n  The event is emitted on the layer that caused the request.\n\n  To effectively [handle disconnects while rendering](/network-issues#disconnects), use the `up:fragment:offline` event instead.\n\n  @event up:request:offline\n\n  @param {up.Request} event.request\n    The failed request.\n\n  @param {up.Layer} [event.layer]\n    The [layer](/up.layer) this request is associated with.\n\n    If this request was intended to update an existing fragment, this is that fragment's layer.\n\n    If this request was intended to [open an overlay](/opening-overlays),\n    the associated layer is the future overlay's parent layer.\n\n  @param {Element} [event.origin]\n    The link or form element that caused the request.\n\n  @stable\n  */\n\n  function isSafeMethod(method) {\n    return u.contains(['GET', 'OPTIONS', 'HEAD'], u.normalizeMethod(method))\n  }\n\n  function onLate() {\n    if (u.evalOption(config.progressBar)) {\n      progressBar = new up.ProgressBar()\n    }\n  }\n\n  function onRecover() {\n    progressBar?.conclude()\n  }\n\n  up.on('up:network:late', onLate)\n  up.on('up:network:recover', onRecover)\n  up.on('up:framework:reset', reset)\n\n  return {\n    request: makeRequest,\n    cache,\n    isBusy,\n    isSafeMethod,\n    config,\n    abort: abortRequests,\n    registerAliasForRedirect,\n    queue, // for testing\n    loadPage,\n  }\n})()\n\nup.request = up.network.request\n\nup.cache = up.network.cache\n", "up-focus-trap {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 0;\n  height: 0;\n}\n\nup-cover-viewport, up-drawer-viewport, up-modal-viewport, up-drawer-backdrop, up-modal-backdrop, up-cover, up-drawer, up-modal {\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n}\n\nup-drawer-box, up-modal-box {\n  box-shadow: 0 0 10px 1px rgba(0, 0, 0, 0.3);\n}\n\nup-popup {\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.3);\n}\n\nup-popup:focus, up-cover-box:focus, up-drawer-box:focus, up-modal-box:focus, up-cover:focus, up-drawer:focus, up-modal:focus, up-popup:focus-visible, up-cover-box:focus-visible, up-drawer-box:focus-visible, up-modal-box:focus-visible, up-cover:focus-visible, up-drawer:focus-visible, up-modal:focus-visible {\n  outline: none;\n}\n\nup-cover, up-drawer, up-modal {\n  z-index: 2000;\n  position: fixed;\n}\n\nup-drawer-backdrop, up-modal-backdrop {\n  position: absolute;\n  background: rgba(0, 0, 0, 0.4);\n}\n\nup-cover-viewport, up-drawer-viewport, up-modal-viewport {\n  position: absolute;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  overscroll-behavior: contain;\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n}\n\nup-popup, up-cover-box, up-drawer-box, up-modal-box {\n  position: relative;\n  box-sizing: border-box;\n  max-width: 100%;\n  background-color: #fff;\n  padding: 20px;\n  overflow-x: hidden;\n}\n\nup-popup-content, up-cover-content, up-drawer-content, up-modal-content {\n  display: block;\n}\n\nup-popup {\n  z-index: 1000;\n}\n\nup-popup-dismiss, up-cover-dismiss, up-drawer-dismiss, up-modal-dismiss {\n  color: #888;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 1.7rem;\n  line-height: 0.5;\n}\n\nup-modal[nesting=\"0\"] up-modal-viewport {\n  padding: 25px 15px;\n}\nup-modal[nesting=\"1\"] up-modal-viewport {\n  padding: 50px 30px;\n}\nup-modal[nesting=\"2\"] up-modal-viewport {\n  padding: 75px 45px;\n}\nup-modal[nesting=\"3\"] up-modal-viewport {\n  padding: 100px 60px;\n}\nup-modal[nesting=\"4\"] up-modal-viewport {\n  padding: 125px 75px;\n}\n\nup-modal[size=small] up-modal-box {\n  width: 350px;\n}\nup-modal[size=medium] up-modal-box {\n  width: 650px;\n}\nup-modal[size=large] up-modal-box {\n  width: 1000px;\n}\nup-modal[size=grow] up-modal-box {\n  width: auto;\n}\nup-modal[size=full] up-modal-box {\n  width: 100%;\n}\n\nup-drawer-viewport {\n  justify-content: flex-start;\n}\nup-drawer[position=right] up-drawer-viewport {\n  justify-content: flex-end;\n}\n\nup-drawer-box {\n  min-height: 100vh;\n}\nup-drawer[size=small] up-drawer-box {\n  width: 150px;\n}\nup-drawer[size=medium] up-drawer-box {\n  width: 340px;\n}\nup-drawer[size=large] up-drawer-box {\n  width: 600px;\n}\nup-drawer[size=grow] up-drawer-box {\n  width: auto;\n}\nup-drawer[size=full] up-drawer-box {\n  width: 100%;\n}\n\nup-cover-box {\n  width: 100%;\n  min-height: 100vh;\n  padding: 0;\n}\n\nup-popup {\n  padding: 15px;\n  text-align: left;\n}\nup-popup[size=small] {\n  width: 180px;\n}\nup-popup[size=medium] {\n  width: 300px;\n}\nup-popup[size=large] {\n  width: 550px;\n}\nup-popup[size=grow] up-popup {\n  width: auto;\n}\nup-popup[size=full] up-popup {\n  width: 100%;\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */", "require('./layer.sass')\n\nconst u = up.util\nconst e = up.element\n\n/*-\nLayers\n======\n\nUnpoly allows you to [open page fragments in an overlay](/opening-overlays). Overlays may be stacked infinitely.\n\nA variety of [overlay modes](/layer-terminology) are supported,\nsuch as modal dialogs, popup overlays or drawers. You may [customize their appearance and behavior](/customizing-overlays).\n\nLayers are isolated, meaning a screen in one layer will not accidentally see elements\nor events from another layer. For instance, [fragment links](/up.link) will only update elements from the [current layer](/up.layer.current)\nunless you [explicitly target another layer](/layer-option).\n\nOverlays allow you to break up a complex screen into [subinteractions](/subinteractions).\nSubinteractions take place in overlays and may span one or many pages while the original screen remains open in the background.\nOnce the subinteraction is *done*, the overlay is closed and a result value is communicated back to the parent layer.\n\n@see layer-terminology\n@see layer-option\n@see opening-overlays\n@see closing-overlays\n@see subinteractions\n@see customizing-overlays\n@see context\n\n@see a[up-layer=new]\n@see up.layer.current\n@see up.layer.on\n@see up.layer.ask\n\n@module up.layer\n*/\nup.layer = (function() {\n\n  const LAYER_CLASSES = [\n    up.Layer.Root,\n    up.Layer.Modal,\n    up.Layer.Popup,\n    up.Layer.Drawer,\n    up.Layer.Cover\n  ]\n\n  /*-\n  Configures default attributes for new overlays.\n\n  All options for `up.layer.open()` may be configured.\n  The configuration will also be used for `a[up-layer=new]` links.\n\n  Defaults are configured separately for each [layer mode](/layer-terminology):\n\n  | Object                    | Effect                       |\n  |---------------------------|------------------------------|\n  | `up.layer.config.root`    | Defaults for the root layer  |\n  | `up.layer.config.modal`   | Defaults for modal overlays  |\n  | `up.layer.config.drawer`  | Defaults for drawer overlays |\n  | `up.layer.config.popup`   | Defaults for popup overlays  |\n  | `up.layer.config.cover`   | Defaults for cover overlays  |\n\n  For convenience you may configure options that affect all layer modes\n  or all overlay modes:\n\n  | Object                    | Effect                       |\n  |---------------------------|------------------------------|\n  | `up.layer.config.any`     | Defaults for all layers      |\n  | `up.layer.config.overlay` | Defaults for all overlays    |\n\n  Options configured in such a way are inherited.\n  E.g. when you open a new drawer overlay, defaults from `up.layer.config.drawer`,\n  `up.layer.config.overlay` and `up.layer.config.any` will be used (in decreasing priority).\n\n  ### Example\n\n  To make all modal overlays move in from beyond the top edge of the screen:\n\n  ```js\n  up.layer.config.modal.openAnimation = 'move-from-top'\n  ```\n\n  To configure an additional [main target](/up-main)\n  for overlay of any mode:\n\n  ```js\n  up.layer.config.overlay.mainTargets.unshift('.content')\n  ```\n\n  ### Configuration inheritance\n\n  @property up.layer.config\n\n  @param {string} [config.mode='modal']\n    The default [mode](/layer-terminology) used when opening a new overlay.\n\n  @param {Object} config.any\n    Defaults for all layer modes.\n\n  @param {Array<string>} config.any.mainTargets\n    An array of CSS selectors matching default [render targets](/targeting-fragments).\n\n    This is an alias for `up.fragment.config.mainTargets`.\n\n  @param {Object} config.root\n    Defaults for the [root layer](/layer-terminology).\n\n    Inherits from `up.layer.config.any`.\n\n  @param {Object} config.root.mainTargets\n    An array of CSS selectors matching default [render targets](/targeting-fragments)\n    for the [root layer](/layer-terminology), but not for overlays.\n\n  @param {Object} config.overlay\n    Defaults for all [overlays](/layer-terminology).\n\n    In addition to the options documented here,\n    all options for `up.layer.open()` may also be configured.\n\n    Inherits from `up.layer.config.any`.\n\n  @param {string|Function} config.overlay.openAnimation\n    The opening animation.\n\n  @param {number} config.overlay.openDuration\n    The duration of the opening animation.\n\n  @param {string} config.overlay.openEasing\n    The easing function for the opening animation.\n\n  @param {string|Function} config.overlay.closeAnimation\n    The closing animation.\n\n  @param {number} config.overlay.closeDuration\n    The duration of the closing animation.\n\n  @param {string} config.overlay.closeEasing\n    The easing function for the opening animation.\n\n  @param {string} config.overlay.dismissLabel\n    The symbol for the dismiss icon in the top-right corner.\n\n  @param {string} config.overlay.dismissAriaLabel\n    The accessibility label for the dismiss icon in the top-right corner.\n\n  @param {string|boolean} [config.overlay.history='auto']\n    Whether the layer's location or title will be visible in the browser's\n    address bar and window title.\n\n    If set to `'auto'`, the overlay will render history if its initial fragment\n    is an [auto history target](/up.fragment.config#config.autoHistoryTargets).\n\n    If set to `true`, the overlay will always render history.\n    If set to `false`, the overlay will never render history.\n\n  @param {string} [config.overlay.class]\n    An HTML class for the overlay's container element.\n\n    See [overlay classes](/customizing-overlays#overlay-classes).\n\n  @param {Object} config.modal\n    Defaults for [modal overlays](/layer-terminology).\n\n    Inherits from `up.layer.config.overlay` and `up.layer.config.any`.\n\n  @param {Object} config.cover\n    Defaults for [cover overlays](/layer-terminology).\n\n    Inherits from `up.layer.config.overlay` and `up.layer.config.any`.\n\n  @param {Object} config.drawer\n    Defaults for [drawer overlays](/layer-terminology).\n\n    Inherits from `up.layer.config.overlay` and `up.layer.config.any`.\n\n  @param {Object} config.popup\n    Defaults for [popup overlays](/layer-terminology).\n\n    Inherits from `up.layer.config.overlay` and `up.layer.config.any`.\n\n  @param {Array<string>} config.foreignOverlaySelectors\n    An array of CSS selectors matching overlays not constructed by Unpoly.\n\n    Other JavaScript libraries often attach their overlay elements\n    to the end of the `<body>`, which makes Unpoly consider these overlays\n    to be part of the root layer. This can cause Unpoly to steal focus from foreign\n    overlays, or cause Unpoly overlays to incorrectly close when the foreign overlay is clicked.\n    Adding a selector to this array will cause Unpoly to\n    be less opinionated about user interactions within matching elements.\n\n    By default this contains a selector matching the\n    [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) element.\n\n  @stable\n  */\n  const config = new up.Config(function() {\n    const newConfig = {\n      mode: 'modal',\n      any: {\n        mainTargets: [\n          \"[up-main='']\",\n          'main',\n          ':layer' // this is <body> for the root layer\n        ]\n      },\n      root: {\n        mainTargets: ['[up-main~=root]'],\n        history: true\n      },\n      overlay: {\n        mainTargets: ['[up-main~=overlay]'],\n        openAnimation: 'fade-in',\n        closeAnimation: 'fade-out',\n        dismissLabel: '\u00D7',\n        dismissAriaLabel: 'Dismiss dialog',\n        dismissable: true,\n        history: 'auto'\n      },\n      cover: {\n        mainTargets: ['[up-main~=cover]']\n      },\n      drawer: {\n        mainTargets: ['[up-main~=drawer]'],\n        backdrop: true,\n        position: 'left',\n        size: 'medium',\n        openAnimation(layer) {\n          switch (layer.position) {\n            case 'left': return 'move-from-left'\n            case 'right': return 'move-from-right'\n          }\n        },\n        closeAnimation(layer) {\n          switch (layer.position) {\n            case 'left': return 'move-to-left'\n            case 'right': return 'move-to-right'\n          }\n        }\n      },\n      modal: {\n        mainTargets: ['[up-main~=modal]'],\n        backdrop: true,\n        size: 'medium'\n      },\n      popup: {\n        mainTargets: ['[up-main~=popup]'],\n        position: 'bottom',\n        size: 'medium',\n        align: 'left',\n        dismissable: 'outside key'\n      },\n      foreignOverlaySelectors: ['dialog']\n    }\n\n    for (let Class of LAYER_CLASSES) {\n      newConfig[Class.mode].Class = Class\n    }\n\n    return newConfig\n  })\n\n  /*-\n  A list of layers that are currently open.\n\n  The first element in the list is the [root layer](/up.layer.root).\n  The last element is the [frontmost layer](/up.layer.front).\n\n  @property up.layer.stack\n  @param {List<up.Layer>} stack\n  @stable\n  */\n  let stack = null\n\n  let handlers = []\n\n  function mainTargets(mode) {\n    return u.flatMap(modeConfigs(mode), 'mainTargets')\n  }\n\n  /*\n  Returns an array of config objects that apply to the given mode name.\n\n  The config objects are in descending order of specificity.\n  */\n  function modeConfigs(mode) {\n    if (mode === 'root') {\n      return [config.root, config.any]\n    } else {\n      return [config[mode], config.overlay, config.any]\n    }\n  }\n\n  function normalizeOptions(options) {\n    up.migrate.handleLayerOptions?.(options)\n\n    if (u.isGiven(options.layer)) { // might be the number 0, which is falsy\n      let match = String(options.layer).match(/^(new|shatter|swap)( (\\w+))?/)\n      if (match) {\n        options.layer = 'new'\n\n        const openMethod = match[1]\n        const shorthandMode = match[3]\n\n        // The mode may come from one of these sources:\n        // (1) As { mode } option\n        // (2) As a { layer } short hand like { layer: 'new popup' }\n        // (3) As the default in config.mode\n        options.mode ||= shorthandMode || config.mode\n\n        if (openMethod === 'swap') {\n          // If an overlay is already open, we replace that with a new overlay.\n          // If we're on the root layer, we open an overlay.\n          if (up.layer.isOverlay()) {\n            options.baseLayer = 'parent'\n          }\n        } else if (openMethod === 'shatter') {\n          // Dismiss all overlays and open a new overlay.\n          options.baseLayer = 'root'\n        }\n      }\n    } else {\n      // If no options.layer is given we still want to avoid updating \"any\" layer.\n      // Other options might have a hint for a more appropriate layer.\n\n      if (options.mode) {\n        // If user passes a { mode } option without a { layer } option\n        // we assume they want to open a new layer.\n        options.layer = 'new'\n      } else if (u.isElementish(options.target)) {\n        // If we are targeting an actual Element or jQuery collection (and not\n        // a selector string) we operate in that element's layer.\n        options.layer = stack.get(options.target, { normalizeLayerOptions: false })\n      } else if (options.origin) {\n        // Links update their own layer by default.\n        options.layer = 'origin'\n      } else {\n        // If nothing is given, we assume the current layer\n        options.layer = 'current'\n      }\n    }\n\n    if (!options.context) { options.context = {} }\n\n    // Remember the layer that was current when the request was made,\n    // so changes with `{ layer: 'new' }` will know what to stack on.\n    // Note if options.baseLayer is given, up.layer.get('current', options) will\n    // return the resolved version of that.\n    options.baseLayer = stack.get('current', { ...options, normalizeLayerOptions: false })\n  }\n\n  function build(options, beforeNew) {\n    const { mode } = options\n    const { Class } = config[mode]\n\n    // modeConfigs() returns the most specific options first,\n    // but in merge() below later args override keys from earlier args.\n    const configs = u.reverse(modeConfigs(mode))\n\n    let handleDeprecatedConfig = up.migrate.handleLayerConfig\n    if (handleDeprecatedConfig) {\n      configs.forEach(handleDeprecatedConfig)\n    }\n\n    // We allow to pass the open animation as up.layer.open({ animation })\n    // or a[up-animation] options.\n    options.openAnimation ??= u.pluckKey(options, 'animation')\n\n    options = u.mergeDefined(...configs, { mode, stack }, options)\n\n    if (beforeNew) {\n      options = beforeNew(options)\n    }\n\n    return new Class(options)\n  }\n\n  function openCallbackAttr(link, attr) {\n    return e.callbackAttr(link, attr, { exposedKeys: ['layer'] })\n  }\n\n  function closeCallbackAttr(link, attr) {\n    return e.callbackAttr(link, attr, { exposedKeys: ['layer', 'value', 'response'] })\n  }\n\n  function reset() {\n    stack.reset()\n    handlers = u.filter(handlers, 'isDefault')\n  }\n\n  /*-\n  [Opens a new overlay](/opening-overlays).\n\n  Opening a layer is considered [navigation](/navigation) by default.\n\n  ### Example\n\n  ```js\n  let layer = await up.layer.open({ url: '/contacts' })\n  console.log(layer.mode) // logs \"modal\"\n  ```\n\n  @function up.layer.open\n\n  @param {Object} [options]\n    All [render options](/up.render#parameters) may be used.\n\n    You may configure default layer attributes in `up.layer.config`.\n\n  @param {string} [options.layer=\"new\"]\n    Whether to stack the new overlay or replace existing overlays.\n\n    See [replacing existing overlays](/opening-overlays#replacing-existing-overlays).\n\n  @param {string} [options.mode]\n    The kind of overlay to open.\n\n    See [available layer modes](/layer-terminology#available-modes).\n\n  @param {string} [options.size]\n    The size of the overlay.\n\n    Supported values are `'small'`, `'medium'`, `'large'` and `'grow'`:\n    See [overlay sizes](/customizing-overlays#overlay-sizes) for details.\n\n  @param {string} [options.class]\n    An optional HTML class for the overlay's container element.\n\n    See [overlay classes](/customizing-overlays#overlay-classes).\n\n  @param {boolean|string|Array<string>} [options.dismissable=true]\n    How the overlay may be [dismissed](/closing-overlays) by the user.\n\n    Supported values are `'key'`, `'outside'` and `'button'`.\n    See [customizing dismiss controls](/closing-overlays#customizing-dismiss-controls)\n    for details.\n\n    You may enable multiple dismiss controls by passing an array or\n    a space-separated string.\n\n    Passing `true` or `false` will enable or disable all dismiss controls.\n\n  @param {boolean|string} [options.history]\n    Whether the [history state](/updating-history#history-state) of the overlay content is visible.\n\n    If set to `true` the overlay's location, title and meta tags will be shown in browser UI.\n\n    If set to `'auto'` history will be visible if the initial overlay\n    content matches a [main target](/up-main).\n\n    See [History in overlays](/updating-history#overlays).\n\n  @param {string|Function} [options.animation]\n    The opening animation.\n\n  @param {Element} [options.origin]\n    The link element that caused this overlay to open.\n\n    The origin [will be re-focused](/focus#focus-in-overlays) when the overlay closes.\n\n  @param {Function(Event)} [options.onOpened]\n    A function that is called when the overlay was inserted into the DOM.\n\n    The function argument is an `up:layer:opened` event.\n\n    The overlay may still play an opening animation when this function is called.\n    To be called when the opening animation is done, pass an\n    [`{ onFinished }`](/up.render#options.onFinished) option.\n\n  @param {Function(Event)} [options.onAccepted]\n    A function that is called when the overlay was [accepted](/closing-overlays).\n\n    The function argument is an `up:layer:accepted` event.\n\n  @param {Function(Event)} [options.onDismissed]\n    A function that is called when the overlay was [dismissed](/closing-overlays).\n\n    The function argument is an `up:layer:dismissed` event.\n\n  @param {string|Array<string>} [options.acceptEvent]\n    One or more event types that will cause this overlay to automatically be\n    [accepted](/closing-overlays) when a matching event occurs within the overlay.\n\n    The [overlay result value](/closing-overlays#overlay-result-values)\n    is the event object that caused the overlay to close.\n\n    See [Closing when an event is emitted](/closing-overlays#closing-when-an-event-is-emitted).\n\n  @param {string|Array<string>} [options.dismissEvent]\n    One or more event types that will cause this overlay to automatically be\n    [dismissed](/closing-overlays) when a matching event occurs within the overlay.\n\n    The [overlay result value](/closing-overlays#overlay-result-values)\n    is the event object that caused the overlay to close.\n\n    See [Closing when an event is emitted](/closing-overlays#closing-when-an-event-is-emitted).\n\n  @param {string|Array<string>} [options.acceptLocation]\n    One or more [URL patterns](/url-patterns) that will cause this overlay to automatically be\n    [accepted](/closing-overlays) when the overlay reaches a matching [location](/up.layer.location).\n\n    The [overlay result value](/closing-overlays#overlay-result-values)\n    is an object of [named segments matches](/url-patterns#capturing-named-segments) captured\n    by the URL pattern.\n\n    See [Closing when a location is reached](/closing-overlays#closing-when-a-location-is-reached).\n\n  @param {string|Array<string>} [options.dismissLocation]\n    One or more [URL patterns](/url-patterns) that will cause this overlay to automatically be\n    [dismissed](/closing-overlays) when the overlay reaches a matching [location](/up.layer.location).\n\n    The [overlay result value](/closing-overlays#overlay-result-values)\n    is an object of [named segments matches](/url-patterns#capturing-named-segments) captured\n    by the URL pattern.\n\n    See [Closing when a location is reached](/closing-overlays#closing-when-a-location-is-reached).\n\n  @param {Object} [options.context={}]\n    The initial [context](/up.layer.context) object for the new overlay.\n\n    @experimental\n\n  @param {string} [options.position]\n    The position of the popup relative to the `{ origin }` element that opened\n    the overlay.\n\n    Supported values are `'top'`,  `'right'`,  `'bottom'` and  `'left'`.\n\n    See [popup position](/customizing-overlays#popup-position).\n\n  @param {string} [options.align]\n    The alignment of the popup within its `{ position }`.\n\n    Supported values are `'top'`,  `'right'`, `'center'`, `'bottom'` and  `'left'`.\n\n    See [popup position](/customizing-overlays#popup-position).\n\n  @return {Promise<up.Layer>}\n    A promise for the `up.Layer` object that models the new overlay.\n\n    The promise will be resolved once the overlay was placed into the DOM.\n\n  @stable\n  */\n  async function open(options) {\n    options = u.options(options, {\n      layer: 'new',\n      defaultToEmptyContent: true,\n      navigate: true\n    })\n\n    // Even if we are given { content } we need to pipe this through up.render()\n    // since a lot of options processing is happening there.\n    let result = await up.render(options)\n    return result.layer\n  }\n\n  /*-\n  This event is emitted before an overlay is opened.\n\n  The overlay is not yet part of the [layer stack](/up.layer.stack) and has not yet been placed\n  in the DOM. Listeners may prevent this event to prevent the overlay from opening.\n\n  The event is emitted on the `document`.\n\n  ### Changing layer options\n\n  Listeners may inspect and manipulate options for the overlay that is about to open.\n\n  For example, to give overlays the CSS class `.warning` if the initial URL contains\n  the word `\"confirm\"`:\n\n  ```js\n  up.on('up:layer:open', function(event) {\n    if (event.layerOptions.url.includes('confirm')) {\n      event.layerOptions.class = 'warning'\n    }\n  })\n  ```\n\n  @event up:layer:open\n  @param {Object} event.layerOptions\n    Options for the overlay that is about to open.\n\n    Listeners may inspect and change the options.\n    All options for `up.layer.open()` may be used.\n  @param {Element} event.origin\n    The link element that is opening the overlay.\n  @param event.preventDefault()\n    Prevents this overlay from opening.\n\n    Programmatic callers will reject with an `up.AbortError`.\n  @stable\n  */\n\n  /*-\n  This event is emitted after a new overlay was placed into the DOM.\n\n  The event is emitted right before the opening animation starts. Because the overlay\n  has not been rendered by the browser, this makes it a good occasion to\n  [customize overlay elements](/customizing-overlays#customizing-overlay-elements):\n\n  ```js\n  up.on('up:layer:opened', function(event) {\n    if (isChristmas()) {\n      up.element.affix(event.layer.element, '.santa-hat', text: 'Merry Christmas!')\n    }\n  })\n  ```\n\n  @event up:layer:opened\n  @param {Element} event.origin\n    The link element that is opening the overlay.\n  @param {up.Layer} event.layer\n    The [layer object](/up.Layer) that is opening.\n  @stable\n  */\n\n  /*-\n  This event is emitted after a layer's [location property](/up.Layer.prototype.location)\n  has changed value.\n\n  This event is *also* emitted when a layer [without visible history](/up.Layer.prototype.history)\n  has reached a new location. If you are only interested in changes the are visible in\n  the browser's address bar, observe `up:location:changed` instead.\n\n  The event is also event for location changes on the [root layer](/layer-terminology).\n\n  This event is *not* emitted when an overlay is opened. For this observe `up:layer:opened` instead.\n\n  @param {string} event.location\n    The new location URL.\n  @param {up.Layer} event.layer\n    The [layer object](/up.Layer) that had its location changed.\n  @event up:layer:location:changed\n  @experimental\n  */\n\n  /*-\n  Opens an overlay and returns a promise for its [acceptance](/closing-overlays).\n\n  It's useful to think of overlays as [promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n  which may either be **fulfilled (accepted)** or **rejected (dismissed)**.\n\n  ### Example\n\n  Instead of using `up.layer.open()` and passing callbacks, you may use `up.layer.ask()`.\n  `up.layer.ask()` returns a promise for the acceptance value, which you can `await`:\n\n  ```js\n  let user = await up.layer.ask({ url: '/users/new' })\n  console.log(\"New user is \" + user)\n  ```\n\n  @see closing-overlays\n\n  @function up.layer.ask\n\n  @param {Object} options\n    See options for `up.layer.open()`.\n\n  @return {Promise}\n    A promise that will settle when the overlay closes.\n\n    When the overlay was accepted, the promise will fulfill with the overlay's acceptance value.\n\n    When the overlay was dismissed, the promise will reject with the overlay's dismissal value.\n\n  @stable\n  */\n  function ask(options) {\n    return new Promise(function (resolve, reject) {\n      options = {\n        ...options,\n        onAccepted: (event) => resolve(event.value),\n        onDismissed: (event) => reject(event.value)\n      }\n      open(options)\n    })\n  }\n\n  function anySelector() {\n    return u.map(LAYER_CLASSES, Class => Class.selector()).join()\n  }\n\n  function optionToString(option) {\n    if (u.isString(option)) {\n      return `layer \"${option}\"`\n    } else {\n      return option.toString()\n    }\n  }\n\n  function isWithinForeignOverlay(element) {\n    let selector = config.selector('foreignOverlaySelectors')\n    return !!(selector && element.closest(selector))\n  }\n\n  /*-\n  [Follows](/a-up-follow) this link and [opens the result in a new overlay](/opening-overlays).\n\n  ### Example\n\n  ```html\n  <a href=\"/menu\" up-layer=\"new\">Open menu</a>\n  ```\n\n  @selector a[up-layer=new]\n\n  @params-note\n    All attributes for `a[up-follow]` may also be used.\n\n    You may configure default layer attributes in `up.layer.config`.\n\n  @param [up-layer=\"new\"]\n    Whether to stack the new overlay onto the current layer or replace existing overlays.\n\n    See [replacing existing overlays](/opening-overlays#replacing-existing-overlays).\n\n  @param [up-mode]\n    The kind of overlay to open.\n\n    See [available layer modes](/layer-terminology#available-modes).\n\n  @param [up-size]\n    The size of the overlay.\n\n    See [overlay sizes](/customizing-overlays#overlay-sizes) for details.\n\n  @param [up-class]\n    An optional HTML class for the overlay's container element.\n\n    See [overlay classes](/customizing-overlays#overlay-classes).\n\n  @param [up-history]\n    Whether history of the overlay content is [visible](/updating-history#overlays).\n\n    If set to `true` the overlay location, title and meta tags will be shown\n    while the overlay is open. When the overlay is closed, the parent layer's history is restored.\n\n    If set to `'auto'` history will be visible if the initial overlay\n    content matches a [main target](/up-main).\n\n    See [Updating history in overlays](/updating-history#overlays).\n\n  @param [up-dismissable]\n    How the overlay may be [dismissed](/closing-overlays) by the user.\n\n    See [customizing dismiss controls](/closing-overlays#customizing-dismiss-controls)\n    for details.\n\n    You may enable multiple dismiss controls by passing a space-separated string.\n\n    Passing `true` or `false` will enable or disable all dismiss controls.\n\n  @param [up-animation]\n    The [name](/predefined-animations) of the opening animation.\n\n  @param [up-on-opened]\n    A JavaScript snippet that is called when the overlay was inserted into the DOM.\n\n    The snippet runs in the following scope:\n\n    | Expression | Value                                    |\n    |------------|------------------------------------------|\n    | `this`     | The link that opened the overlay         |\n    | `layer`    | An `up.Layer` object for the new overlay |\n    | `event`    | An `up:layer:opened` event               |\n\n  @param [up-on-accepted]\n    A JavaScript snippet that is called when the overlay was [accepted](/closing-overlays).\n\n    The snippet runs in the following scope:\n\n    | Expression | Value                                         |\n    |------------|-----------------------------------------------|\n    | `this`     | The link that originally opened the overlay   |\n    | `layer`    | An `up.Layer` object for the accepted overlay |\n    | `value`    | The overlay's [acceptance value](/closing-overlays#overlay-result-values) |\n    | `response` | The server response that caused the overlay to close |\n    | `event`    | An `up:layer:accepted` event                  |\n\n  @param [up-on-dismissed]\n    A JavaScript snippet that is called when the overlay was [dismissed](/closing-overlays).\n\n    The snippet runs in the following scope:\n\n    | Expression | Value                                          |\n    |------------|------------------------------------------------|\n    | `this`     | The link that originally opened the overlay    |\n    | `layer`    | An `up.Layer` object for the dismissed overlay |\n    | `value`    | The overlay's [dismissal value](/closing-overlays#overlay-result-values) |\n    | `response` | The server response that caused the overlay to close |\n    | `event`    | An `up:layer:dismissed` event                  |\n\n  @param [up-accept-event]\n    One or more space-separated event types that will cause this overlay to automatically be\n    [accepted](/closing-overlays) when a matching event occurs within the overlay.\n\n    The [overlay result value](/closing-overlays#overlay-result-values)\n    is the event object that caused the overlay to close.\n\n    See [Closing when an event is emitted](/closing-overlays#closing-when-an-event-is-emitted).\n\n  @param [up-dismiss-event]\n    One or more space-separated event types that will cause this overlay to automatically be\n    [dismissed](/closing-overlays) when a matching event occurs within the overlay.\n\n    The [overlay result value](/closing-overlays#overlay-result-values)\n    is the event object that caused the overlay to close.\n\n    See [Closing when an event is emitted](/closing-overlays#closing-when-an-event-is-emitted).\n\n  @param [up-accept-location]\n    One or more space-separated [URL patterns](/url-patterns) that will cause this overlay to automatically be\n    [accepted](/closing-overlays) when the overlay reaches a matching [location](/up.layer.location).\n\n    The [overlay result value](/closing-overlays#overlay-result-values)\n    is an object of [named segments matches](/url-patterns#capturing-named-segments) captured\n    by the URL pattern.\n\n    See [Closing when a location is reached](/closing-overlays#closing-when-a-location-is-reached).\n\n  @param [up-dismiss-location]\n    One or more space-separated [URL patterns](/url-patterns) that will cause this overlay to automatically be\n    [dismissed](/closing-overlays) when the overlay reaches a matching [location](/up.layer.location).\n\n    The [overlay result value](/closing-overlays#overlay-result-values)\n    is an object of [named segments matches](/url-patterns#capturing-named-segments) captured\n    by the URL pattern.\n\n    See [Closing when a location is reached](/closing-overlays#closing-when-a-location-is-reached).\n\n  @param [up-context]\n    The new overlay's [context](/up.layer.context) object, encoded as JSON.\n\n    @experimental\n\n  @param [up-position]\n    The position of the popup relative to the `{ origin }` element that opened\n    the overlay.\n\n    Supported values are `top`,  `right`,  `bottom` and  `left`.\n\n    See [popup position](/customizing-overlays#popup-position).\n\n  @param [up-align]\n    The alignment of the popup within its `{ position }`.\n\n    Supported values are `top`,  `right`, `center`, `bottom` and  `left`.\n\n    See [popup position](/customizing-overlays#popup-position).\n\n  @stable\n  */\n\n  /*-\n  [Dismisses](/closing-overlays) the [current layer](/up.layer.current) when the link is clicked.\n\n  The JSON value of the `[up-accept]` attribute becomes the overlay's\n  [dismissal value](/closing-overlays#overlay-result-values).\n\n  ### Example\n\n  ```html\n  <a href='/dashboard' up-dismiss>Close</a>\n  ```\n\n  ### Fallback for the root layer\n\n  The link's `[href]` will only be followed when this link is clicked in the [root layer](/up.layer).\n  In an overlay the `click` event's default action is prevented.\n\n  You can also omit the `[href]` attribute to make a link that only works in overlays.\n\n  @selector a[up-dismiss]\n  @param [up-dismiss]\n    The overlay's [dismissal value](/closing-overlays#overlay-result-values) as a JSON string.\n  @param [up-confirm]\n    A message the user needs to confirm before the layer is closed.\n  @param [up-animation]\n    The [name](/predefined-animations) of the overlay's close animation.\n\n    Defaults to overlay's [preconfigured close animation](/up.layer.config).\n  @param [up-duration]\n    The close animation's duration in milliseconds.\n  @param [up-easing]\n    The close animation's easing function.\n  @stable\n  */\n\n  /*-\n  [Accepts](/closing-overlays) the [current layer](/up.layer.current) when the link is clicked.\n\n  The JSON value of the `[up-accept]` attribute becomes the overlay's\n  [acceptance value](/closing-overlays#overlay-result-values).\n\n  ### Example\n\n  ```html\n  <a href='/users/5' up-accept='{ \"id\": 5 }'>Choose user #5</a>\n  ```\n\n  ### Fallback for the root layer\n\n  The link's `[href]` will only be followed when this link is clicked in the [root layer](/up.layer).\n  In an overlay the `click` event's default action is prevented.\n\n  You can also omit the `[href]` attribute to make a link that only works in overlays.\n\n  @selector a[up-accept]\n  @param [up-accept]\n    The overlay's [acceptance value](/closing-overlays#overlay-result-values) as a JSON string.\n  @param [up-confirm]\n    A message the user needs to confirm before the layer is closed.\n  @param [up-duration]\n    The close animation's duration in milliseconds.\n  @param [up-easing]\n    The close animation's easing function.\n  @stable\n  */\n\n  up.on('up:fragment:destroyed', function() {\n    stack.sync()\n  })\n\n  up.on('up:framework:evaled', function() {\n    // Due to circular dependencies we must delay initialization of the stack until all of\n    // Unpoly's submodules have been evaled. We cannot delay initialization until up:framework:boot,\n    // since by then user scripts have run and event listeners will no longer register as \"default\".\n    stack = new up.LayerStack()\n  })\n\n  up.on('up:framework:reset', reset)\n\n  const api = {\n    config,\n    mainTargets,\n    open,\n    build,\n    ask,\n    normalizeOptions,\n    openCallbackAttr,\n    closeCallbackAttr,\n    anySelector,\n    optionToString,\n    get stack() { return stack.layers },\n    isWithinForeignOverlay\n  }\n\n  /*-\n  Returns the current layer in the [layer stack](/up.layer.stack).\n\n  The *current* layer is usually the [frontmost layer](/up.layer.front).\n  There are however some cases where the current layer is a layer in the background:\n\n  - While an element in a background layer is being [compiled](/up.compiler).\n  - While an Unpoly event like `up:request:loaded` is being triggered from a background layer.\n  - While an event listener bound to a background layer using `up.Layer#on()` is being called.\n\n  To temporarily change the current layer from your own code, use `up.Layer#asCurrent()`.\n\n  ### Remembering the current layer\n\n  Most functions in the `up.layer` package affect the current layer. E.g. `up.layer.dismiss()`\n  is shorthand for `up.layer.current.dismiss()`.\n\n  As described above `up.layer.current` is set to the right layer in compilers and most events,\n  even if that layer is not the frontmost layer.\n\n  If you have async code, the current layer may change when your callback is called.\n  To address this you may retrieve the current layer for later reference:\n\n  ```js\n  function dismissCurrentLayerIn(seconds) {\n    let savedLayer = up.layer.current // returns an up.Layer object\n    let dismiss = () => savedLayer.dismiss()\n    setTimeout(dismiss, seconds * 1000)\n  }\n\n  dismissCurrentLayerIn(10) //\n  ```\n\n  @property up.layer.current\n  @param {up.Layer} current\n  @stable\n  */\n\n  /*-\n  Returns the number of layers in the [layer stack](/up.layer.stack).\n\n  The count includes the [root layer](/up.layer.root).\n  Hence a page with a single overlay would return a count of 2.\n\n  @property up.layer.count\n  @param {number} count\n    The number of layers in the stack.\n  @stable\n  */\n\n  /*-\n  Returns an `up.Layer` object for the given element or [layer option](/layer-option).\n\n\n  ### Looking up the layer of an element\n\n  Passing an element will return the layer containing that element:\n\n  ```js\n  let element = document.querySelector(...)\n  up.layer.get(element) // returns the element's layer\n  ```\n\n  If the given element is detached, or part of a closing overlay, `undefined` is returned.\n\n  ### Getting the nth layer\n\n  Pass a number to return the `up.Layer` object at that index:\n\n  ```js\n  up.layer.get(0) // returns the root layer\n  up.layer.get(1) // returns the first overlay\n  ```\n\n  ### Resolving a layer option\n\n  Pass any [layer option](/layer-option) to return the `up.Layer` object\n  of the first layer matching that option:\n\n  ```js\n  up.layer.get('front') // returns the front layer\n  ```\n\n  To look up one of multiple layer options, separate the values using `or`:\n\n  ```js\n  // returns the parent layer, or the root if we're already on root:\n  up.layer.get('parent or root')\n  ```\n\n  ### Existing `up.Layer` objects are returned\n\n  Passing an existing `up.Layer` object will return it unchanged:\n\n  ```js\n  let layer = up.layer.root\n  up.layer.get(layer) // returns the given layer\n  ```\n\n  ### Missing values return the current layer\n\n  Passing `null` or `undefined` will return the [current layer](/up.layer.current):\n\n  ```js\n  up.layer.get(undefined) // returns the current layer\n  ```\n\n  @function up.layer.get\n  @param {string|up.Layer|number} [value='current']\n    The [layer option](/layer-option) to look up.\n  @return {up.Layer|undefined}\n    The layer matching the given option.\n\n    If no layer matches, `undefined` is returned.\n  @stable\n  */\n\n  /*-\n  Returns an array of `up.Layer` objects matching the given [layer option](/layer-option).\n\n  @function up.layer.getAll\n  @param {string|up.Layer|number} [layer='current']\n    The [layer option](/layer-option) to look up.\n  @return {Array<up.Layer>}\n  @experimental\n  */\n\n  /*-\n  Returns the [root layer](/layer-terminology).\n\n  The root layer represents the initial page before any overlay was [opened](/opening-overlays).\n  The root layer always exists and cannot be closed.\n\n  @property up.layer.root\n  @param {up.Layer} root\n  @stable\n  */\n\n  /*-\n  Returns an array of all [overlays](/layer-terminology).\n\n  If no overlay is open, an empty array is returned.\n\n  To get an array of *all* layers including the [root layer](/up.layer.root),\n  use `up.layer.stack`.\n\n  @property up.layer.overlays\n  @param {Array<up.Layer>} overlays\n  @stable\n  */\n\n  /*-\n  Returns the frontmost layer in the [layer stack](/up.layer.stack).\n\n  The frontmost layer is the layer directly facing the user. If an overlay is\n  stacked on top of the frontmost layer, that overlay becomes the new frontmost layer.\n\n  In most cases you don't want to refer to the frontmost layer,\n  but to the [current layer](/up.layer.current) instead.\n\n  @property up.layer.front\n  @param {up.Layer} front\n  @stable\n  */\n\n  /*-\n  [Dismisses](/up.layer.dismiss) all overlays.\n\n  Afterwards the only remaining layer will be the [root layer](/up.layer.root).\n\n  @function up.layer.dismissOverlays\n  @param {any} [value]\n    The dismissal value.\n  @param {Object} [options]\n    See options for `up.layer.dismiss()`.\n  @stable\n  */\n  u.delegate(api, [\n    'get',\n    'getAll',\n    'root',\n    'overlays',\n    'current',\n    'front',\n    'sync',\n    'count',\n    'dismissOverlays'\n  ], () => stack)\n\n  /*-\n  [Accepts](/closing-overlays) the [current layer](/up.layer.current).\n\n  This is a shortcut for `up.layer.current.accept()`.\n  See `up.Layer#accept()` for more documentation.\n\n  @function up.layer.accept\n  @param {any} [value]\n  @param {Object} [options]\n  @stable\n  */\n\n  /*-\n  This event is emitted *before* a layer is [accepted](/closing-overlays).\n\n  The event is emitted on the [element of the layer](/up.layer.element) that is about to close.\n\n  @event up:layer:accept\n  @param {up.Layer} event.layer\n    The layer that is about to close.\n  @param {any} [event.value]\n    The overlay's [acceptance value](/closing-overlays#overlay-result-values).\n\n    Listeners may replace or mutate this value.\n  @param {Element} [event.origin]\n    The element that is causing the layer to close.\n\n    Will be `undefined` if the overlay is not closing by a user interacting with an element.\n  @param {up.Response} [event.response]\n    The server response that is causing this overlay to close.\n\n    Will be `undefined` if the overlay is not closing in reaction to a server response.\n\n    @experimental\n  @param event.preventDefault()\n    Prevents the overlay from closing.\n  @stable\n  */\n\n  /*-\n  This event is emitted *after* a layer was [accepted](/closing-overlays).\n\n  The event is emitted on the [layer's](/up.layer.element) when the close animation\n  is starting. If the layer has no close animaton and was already removed from the DOM,\n  the event is emitted a second time on the `document`.\n\n  > [tip]\n  > To prevent a layer from being closed, listen to `up:layer:accept` instead.\n\n  @event up:layer:accepted\n  @param {up.Layer} event.layer\n    The layer that was closed.\n  @param {any} [event.value]\n    The overlay's final [acceptance value](/closing-overlays#overlay-result-values).\n  @param {Element} [event.origin]\n    The element that caused the layer to close.\n\n    Will be `undefined` if the overlay was not closed by a user interacting with an element.\n  @param {up.Response} [event.response]\n    The server response that caused this overlay to close.\n\n    Will be `undefined` if the overlay was not closed in reaction to a server response.\n\n    @experimental\n  @stable\n  */\n\n  /*-\n  [Dismisses](/closing-overlays) the [current layer](/up.layer.current).\n\n  This is a shortcut for `up.layer.current.dismiss()`.\n  See `up.Layer#dismiss()` for more documentation.\n\n  @function up.layer.dismiss\n  @param {any} [value]\n  @param {Object} [options]\n  @stable\n  */\n\n  /*-\n  This event is emitted *before* a layer is [dismissed](/closing-overlays).\n\n  The event is emitted on the [element of the layer](/up.layer.element) that is about to close.\n\n  @event up:layer:dismiss\n  @param {up.Layer} event.layer\n    The layer that is about to close.\n  @param {any} [event.value]\n    The overlay's [dismissal value](/closing-overlays#overlay-result-values).\n\n    Listeners may replace or mutate this value.\n  @param {Element} [event.origin]\n    The element that is causing the layer to close.\n\n    Will be `undefined` if the overlay is not closing by a user interacting with an element.\n  @param {up.Response} [event.response]\n    The server response that is causing this overlay to close.\n\n    Will be `undefined` if the overlay is not closing in reaction to a server response.\n\n    @experimental\n  @param event.preventDefault()\n    Event listeners may call this method to prevent the overlay from closing.\n  @stable\n  */\n\n  /*-\n  This event is emitted *after* a layer was [dismissed](/closing-overlays).\n\n  The event is emitted on the [layer's](/up.layer.element) when the close animation\n  is starting. If the layer has no close animaton and was already removed from the DOM,\n  the event is emitted a second time on the `document`.\n\n  > [tip]\n  > To prevent a layer from being closed, listen to `up:layer:dismiss` instead.\n\n  @event up:layer:dismissed\n  @param {up.Layer} event.layer\n    The layer that was closed.\n  @param {any} [event.value]\n    The overlay's final [dismissal value](/closing-overlays#overlay-result-values).\n  @param {Element} [event.origin]\n    The element that caused the layer to close.\n\n    Will be `undefined` if the overlay was not closed by a user interacting with an element.\n  @param {up.Response} [event.response]\n    The server response that caused this overlay to close.\n\n    Will be `undefined` if the overlay was not closed in reaction to a server response.\n\n    @experimental\n  @stable\n  */\n\n  /*-\n  Returns whether the [current layer](/up.layer.current) is the [root layer](/up.layer.root).\n\n  This is a shortcut for `up.layer.current.isRoot()`.\n  See `up.Layer#isRoot()` for more documentation..\n\n  @function up.layer.isRoot\n  @return {boolean}\n  @stable\n  */\n\n  /*-\n  Returns whether the [current layer](/up.layer.current) is *not* the [root layer](/up.layer.root).\n\n  This is a shortcut for `up.layer.current.isOverlay()`.\n  See `up.Layer#isOverlay()` for more documentation.\n\n  @function up.layer.isOverlay\n  @return {boolean}\n  @stable\n  */\n\n  /*-\n  Returns whether the [current layer](/up.layer.current) is the [frontmost layer](/up.layer.front).\n\n  This is a shortcut for `up.layer.current.isFront()`.\n  See `up.Layer#isFront()` for more documentation.\n\n  @function up.layer.isFront\n  @return {boolean}\n  @stable\n  */\n\n  /*-\n  Listens to a [DOM event](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events)\n  that originated on an element [contained](/up.Layer.prototype.contains) by the [current layer](/up.layer.current).\n\n  This is a shortcut for `up.layer.current.on()`.\n  See `up.Layer#on()` for more documentation.\n\n  @function up.layer.on\n  @param {string} types\n    A space-separated list of event types to bind to.\n  @param {string|Function(): string} [selector]\n    The selector of an element on which the event must be triggered.\n  @param {Object} [options]\n  @param {Function(event, [element], [data])} listener\n    The listener function that should be called.\n  @return {Function()}\n    A function that unbinds the event listeners when called.\n  @stable\n  */\n\n  /*-\n  Unbinds an event listener previously bound to the [current layer](/up.layer.current).\n\n  This is a shortcut for `up.layer.current.off()`.\n  See `up.Layer#off()` for more documentation.\n\n  @function up.layer.off\n  @param {string} events\n  @param {string|Function(): string} [selector]\n  @param {Function(event, [element], [data])} listener\n    The listener function to unbind.\n  @stable\n  */\n\n  /*-\n  [Emits](/up.emit) an event on the [current layer](/up.layer.current)'s [element](/up.layer.element).\n\n  This is a shortcut for `up.layer.current.emit()`.\n  See `up.Layer#emit()` for more documentation.\n\n  @function up.layer.emit\n  @param {string} eventType\n  @param {Object} [props={}]\n  @stable\n  */\n\n  /*-\n  Returns the parent layer of the [current layer](/up.layer.current).\n\n  This is a shortcut for `up.layer.current.parent`.\n  See `up.Layer#parent` for more documentation.\n\n  @property up.layer.parent\n  @param {up.Layer} parent\n  @stable\n  */\n\n  /*-\n  Whether fragment updates within the [current layer](/up.layer.current)\n  can affect browser history and window title.\n\n  This is a shortcut for `up.layer.current.history`.\n  See `up.Layer#history` for more documentation.\n\n  @property up.layer.history\n  @param {boolean} history\n  @stable\n  */\n\n  /*-\n  The location URL of the [current layer](/up.layer.current).\n\n  This is a shortcut for `up.layer.current.location`.\n  See `up.Layer#location` for more documentation.\n\n  @property up.layer.location\n  @param {string} location\n  @stable\n  */\n\n  /*-\n  The [current layer](/up.layer.current)'s [mode](/up.layer.mode)\n  which governs its appearance and behavior.\n\n  @property up.layer.mode\n  @param {string} mode\n  @stable\n  */\n\n  /*-\n  The [context](/context) of the [current layer](/up.layer.current).\n\n  This is aliased as `up.context`.\n\n  @property up.layer.context\n  @param {string} context\n    The context object.\n\n    If no context has been set an empty object is returned.\n  @experimental\n  */\n\n  /*-\n  The outmost element of the [current layer](/up.layer.current).\n\n  This is a shortcut for `up.layer.current.element`.\n  See `up.Layer#element` for more documentation.\n\n  @property up.layer.element\n  @param {Element} element\n  @stable\n  */\n\n  /*-\n  The outmost element of the [current layer](/up.layer.current).\n\n  This is a shortcut for `up.layer.current.element`.\n  See `up.Layer#element` for more documentation.\n\n  @property up.layer.element\n  @param {Element} element\n  @stable\n  */\n\n  /*-\n  Returns whether the given `element` is contained by the [current layer](/up.layer.current).\n\n  This is a shortcut for `up.layer.current.contains(element)`.\n  See `up.Layer#contains` for more documentation.\n\n  @function up.layer.contains\n  @param {Element} element\n  @stable\n  */\n\n\n  /*-\n  The [size](/customizing-overlays#overlay-sizes) of the [current layer](/up.layer.current).\n\n  This is a shortcut for `up.layer.current.size`.\n  See `up.Layer#size` for more documentation.\n\n  @property up.layer.size\n  @param {string} size\n  @stable\n  */\n\n  /*-\n  Creates an element with the given `selector` and appends it to the [current layer's](/up.layer.current)\n  [outmost element](/up.Layer.prototype.element).\n\n  This is a shortcut for `up.layer.current.affix(selector)`.\n  See `up.Layer#affix` for more documentation.\n\n  @function up.layer.affix\n  @param {Element} element\n  @param {string} selector\n  @param {Object} attrs\n  @experimental\n  */\n\n  u.delegate(api, [\n    'accept',\n    'dismiss',\n    'isRoot',\n    'isOverlay',\n    'isFront',\n    'on',\n    'off',\n    'emit',\n    'parent',\n    'history',\n    'location',\n    'mode',\n    'context',\n    'element',\n    'contains',\n    'size',\n    'affix'\n  ], () => stack.current)\n\n  return api\n})()\n", "[up-href], [up-clickable] {\n  cursor: pointer;\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiL2hvbWUvaGVubmluZy9Qcm9qZWN0cy91bnBvbHkvc3JjL3VucG9seSIsInNvdXJjZXMiOlsibGluay5zYXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UiLCJzb3VyY2VzQ29udGVudCI6WyJbdXAtaHJlZl0sIFt1cC1jbGlja2FibGVdXG4gIGN1cnNvcjogcG9pbnRlclxuIl19 */", "require('./link.sass')\n\n/*-\nLinking to fragments\n====================\n\nThe `up.link` module lets you build links that update fragments instead of entire pages.\n\n### Motivation\n\nIn a traditional web application, the entire page is destroyed and re-created when the\nuser follows a link:\n\n![Traditional page flow](/images/tutorial/fragment_flow_vanilla.svg){:width=\"620\" class=\"picture has_border is_sepia has_padding\"}\n\nThis makes for an unfriendly experience:\n\n- State changes caused by AJAX updates get lost during the page transition.\n- Unsaved form changes get lost during the page transition.\n- The JavaScript VM is reset during the page transition.\n- If the page layout is composed from multiple scrollable containers\n  (e.g. a pane view), the scroll positions get lost during the page transition.\n- The user sees a \"flash\" as the browser loads and renders the new page,\n  even if large portions of the old and new page are the same (navigation, layout, etc.).\n\nUnpoly fixes this by letting you annotate links with an [`[up-target]`](/a-up-follow#up-target)\nattribute. The value of this attribute is a CSS selector that indicates which page\nfragment to update. The server **still renders full HTML pages**, but we only use\nthe targeted fragments and discard the rest:\n\n![Unpoly page flow](/images/tutorial/fragment_flow_unpoly.svg){:width=\"620\" class=\"picture has_border is_sepia has_padding\"}\n\nWith this model, following links feels smooth. All DOM state outside the updated fragment is preserved.\nPages also load much faster since the DOM, CSS and JavaScript environments do not need to be\ndestroyed and recreated for every request.\n\n\n### Example\n\nLet's say we are rendering three pages with a tabbed navigation to switch between screens:\n\nYour HTML could look like this:\n\n```html\n<nav>\n  <a href=\"/pages/a\">A</a>\n  <a href=\"/pages/b\">B</a>\n  <a href=\"/pages/b\">C</a>\n</nav>\n\n<article>\n  Page A\n</article>\n```\n\nSince we only want to update the `<article>` tag, we annotate the links\nwith an `up-target` attribute:\n\n```html\n<nav>\n  <a href=\"/pages/a\" up-target=\"article\">A</a>\n  <a href=\"/pages/b\" up-target=\"article\">B</a>\n  <a href=\"/pages/b\" up-target=\"article\">C</a>\n</nav>\n```\n\n> [NOTE]\n> Instead of `article` you can use any other CSS selector like `#main .article`.\n\nWith these [`[up-target]`](/a-up-follow#up-target) annotations Unpoly only updates the targeted part of the screen.\nThe JavaScript environment will persist and the user will not see a white flash while the\nnew page is loading.\n\n@see targeting-fragments\n@see handling-everything\n@see failed-responses\n\n@see a[up-follow]\n@see a[up-instant]\n@see a[up-preload]\n@see up.follow\n\n@module up.link\n*/\n\nup.link = (function() {\n\n  const u = up.util\n  const e = up.element\n\n  const linkPreloader = new up.LinkPreloader()\n\n  let lastMousedownTarget = null\n\n  // Links with attribute-provided HTML are always followable.\n  const LINKS_WITH_LOCAL_HTML = ['a[up-content]', 'a[up-fragment]', 'a[up-document]']\n\n  // Links with remote HTML are followable if there is one additional attribute\n  // suggesting \"follow me through Unpoly\".\n  const LINKS_WITH_REMOTE_HTML = ['a[href]', '[up-href]']\n  const ATTRIBUTES_SUGGESTING_FOLLOW = ['[up-follow]', '[up-target]', '[up-layer]', '[up-transition]', '[up-preload]', '[up-instant]', '[up-href]']\n\n  function combineFollowableSelectors(elementSelectors, attributeSelectors) {\n    return u.flatMap(elementSelectors, elementSelector => attributeSelectors.map(attrSelector => elementSelector + attrSelector))\n  }\n\n  /*-\n  Configures defaults for link handling.\n\n  In particular you can configure Unpoly to handle [all links on the page](/handling-everything)\n  without requiring developers to set `[up-...]` attributes.\n\n  @property up.link.config\n\n  @param {Array<string>} config.followSelectors\n    An array of CSS selectors matching links that will be [followed through Unpoly](/a-up-follow).\n\n    You can customize this property to automatically follow *all* links on a page without requiring an `[up-follow]` attribute.\n    See [Handling all links and forms](/handling-everything).\n\n  @param {Array<string>} config.noFollowSelectors\n    Exceptions to `up.link.config.followSelectors`.\n\n    Matching links will *not* be [followed through Unpoly](/a-up-follow), even if they match `up.link.config.followSelectors`.\n\n    By default Unpoly excludes:\n\n    - Links with an `[up-follow=false]` attribute.\n    - Links with a cross-origin `[href]`.\n    - Links with a [`[target]`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) attribute\n      (to target an iframe or open new browser tab).\n    - Links with a [`[download]`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download) attribute.\n    - Links with an `[href]` attribute starting with `javascript:`.\n    - Links with an `[href=\"#\"]` attribute that don't also have local HTML\n      in an `[up-document]`, `[up-fragment]` or `[up-content]` attribute.\n\n  @param {Array<string>} config.instantSelectors\n    An array of CSS selectors matching links that are [followed on `mousedown`](/a-up-instant)\n    instead of on `click`.\n\n    You can customize this property to follow *all* links on `mousedown` without requiring an `[up-instant]` attribute.\n    See [Handling all links and forms](/handling-everything).\n\n    Note that an instant link must also by [followable](/up.link.isFollowable), usually by giving it an\n    [`[up-follow]`](/a-up-follow) attribute or by configuring `up.link.config.followSelectors`.\n\n  @param {Array<string>} config.noInstantSelectors\n    Exceptions to `up.link.config.instantSelectors`.\n\n    Matching links will *not* be [followed on `mousedown`](/a-up-instant), even if they match `up.link.config.instantSelectors`.\n\n    By default Unpoly excludes:\n\n    - Links with an `[up-instant=false]` attribute.\n    - Links that are [not followable](#config.noFollowSelectors).\n\n  @param {Array<string>} config.preloadSelectors\n    An array of CSS selectors matching links that are [preloaded on hover](/a-up-preload).\n\n    You can customize this property to preload *all* links on `mousedown` without requiring an `[up-preload]` attribute.\n    See [Handling all links and forms](/handling-everything).\n\n  @param {Array<string>} config.noPreloadSelectors\n    Exceptions to `up.link.config.preloadSelectors`.\n\n    Matching links will *not* be [preloaded on hover](/a-up-preload), even if they match `up.link.config.preloadSelectors`.\n\n    By default Unpoly excludes:\n\n    - Links with an `[up-preload=false]` attribute.\n    - Links that are [not followable](#config.noFollowSelectors).\n    - Links with an [unsafe method](/up.link.isSafe).\n    - When the link destination [cannot be cached](/up.network.config#config.autoCache).\n\n  @param {number} [config.preloadDelay=75]\n    The number of milliseconds to wait before [`[up-preload]`](/a-up-preload)\n    starts preloading.\n\n  @param {Array<string>} [config.clickableSelectors]\n    A list of CSS selectors matching elements that should behave like links or buttons.\n\n    @include clickable-behaviors\n\n    @see [up-clickable]\n    @see [up-href]\n    @experimental\n  @stable\n  */\n  const config = new up.Config(() => ({\n    followSelectors: combineFollowableSelectors(LINKS_WITH_REMOTE_HTML, ATTRIBUTES_SUGGESTING_FOLLOW).concat(LINKS_WITH_LOCAL_HTML),\n\n    // (1) We don't want to follow <a href=\"#anchor\"> links without a path. Instead\n    //     we will let the browser change the current location's anchor and up.reveal()\n    //     on hashchange to scroll past obstructions.\n    // (2) We want to follow links with [href=#] only if they have a local source of HTML\n    //     through [up-content], [up-fragment] or [up-document].\n    //     Many web developers are used to give JavaScript-handled links an [href=\"#\"]\n    //     attribute. Also frameworks like Bootstrap only style links if they have an [href].\n    // (3) We don't want to handle <a href=\"javascript:foo()\"> links.\n    noFollowSelectors: ['[up-follow=false]', 'a[download]', 'a[target]', 'a[href^=\"#\"]:not([up-content]):not([up-fragment]):not([up-document])', 'a[href^=\"javascript:\"]', 'a[href^=\"mailto:\"]', e.crossOriginSelector('href'), e.crossOriginSelector('up-href')],\n\n    instantSelectors: ['[up-instant]'],\n    noInstantSelectors: ['[up-instant=false]', '[onclick]'],\n    preloadSelectors: combineFollowableSelectors(LINKS_WITH_REMOTE_HTML, ['[up-preload]']),\n    noPreloadSelectors: ['[up-preload=false]'],\n    clickableSelectors: LINKS_WITH_LOCAL_HTML.concat(['[up-emit]', '[up-accept]', '[up-dismiss]', '[up-clickable]']),\n    preloadDelay: 90,\n  }))\n\n  function isPreloadDisabled(link) {\n    return !up.browser.canPushState() || !isFollowable(link) || !willCache(link)\n  }\n\n  function willCache(link) {\n    // Instantiate a lightweight request with basic link attributes needed for the cache-check.\n    const options = parseRequestOptions(link)\n    if (options.url) {\n      if (options.cache == null) { options.cache = 'auto' }\n      options.basic = true\n      const request = new up.Request(options)\n      return request.willCache()\n    }\n  }\n\n  function reset() {\n    lastMousedownTarget = null\n    linkPreloader.reset()\n  }\n\n  /*-\n  Follows the given link with JavaScript and updates a fragment with the server response.\n\n  By default the layer's [main element](/up-main)\n  will be replaced. Attributes like `a[up-target]`\n  or `a[up-layer]` will be honored.\n\n  Following a link is considered [navigation](/navigation) by default.\n\n  Emits the event `up:link:follow`.\n\n  ### Examples\n\n  Assume we have a link with an `a[up-target]` attribute:\n\n  ```html\n  <a href=\"/users\" up-target=\".main\">Users</a>\n  ```\n\n  Calling `up.follow()` with this link will replace the page's `.main` fragment\n  as if the user had clicked on the link:\n\n  ```js\n  var link = document.querySelector('a')\n  up.follow(link)\n  ```\n\n  @function up.follow\n\n  @param {Element|jQuery|string} link\n    The link to follow.\n\n  @param {Object} [options]\n    [render options](/up.render#parameters) that should be used for following the link.\n\n    Unpoly will parse render options from the given link's attributes\n    like `[up-target]` or `[up-transition]`. See `a[up-follow]` for a list\n    of supported attributes.\n\n    You may pass this additional `options` object to supplement or override\n    options parsed from the link attributes.\n\n  @param {boolean} [options.navigate=true]\n    Whether this fragment update is considered [navigation](/navigation).\n\n    Setting this to `false` will disable most defaults, causing\n    Unpoly to render a fragment without side-effects like [updating history](/updating-history)\n    or [scrolling](/scrolling).\n\n  @return {up.RenderJob}\n    A promise that fulfills with an `up.RenderResult` once the link destination\n    has been loaded and rendered.\n\n  @stable\n  */\n  const follow = up.mockable(function(link, options) {\n    return up.render(followOptions(link, options))\n  })\n\n  function parseRequestOptions(link, options, parserOptions) {\n    options = u.options(options)\n    const parser = new up.OptionsParser(link, options, { ...parserOptions, fail: false })\n\n    options.url = followURL(link, options)\n    options.method = followMethod(link, options)\n    parser.json('headers')\n    parser.json('params')\n    parser.booleanOrString('cache')\n    parser.booleanOrString('expireCache')\n    parser.booleanOrString('evictCache')\n    parser.booleanOrString('revalidate')\n    parser.booleanOrString('abort')\n    parser.boolean('abortable')\n    parser.boolean('background')\n    parser.string('contentType')\n    parser.number('badResponseTime')\n    parser.number('timeout')\n\n    return options\n  }\n\n  /*-\n  Parses the [render](/up.render) options that would be used to\n  [follow](/up.follow) the given link, but does not render.\n\n  ### Example\n\n  Given a link with some `[up-...]` attributes:\n\n  ```html\n  <a href=\"/foo\" up-target=\".content\" up-layer=\"new\">...</a>\n  ```\n\n  We can parse the link's render options like this:\n\n  ```js\n  let link = document.querySelector('a[href=\"/foo\"]')\n  let options = up.link.followOptions(link)\n  // => { url: '/foo', method: 'GET', target: '.content', layer: 'new', ... }\n  ```\n\n  @function up.link.followOptions\n  @param {Element|jQuery|string} link\n    The link to follow.\n  @param {Object} [options]\n    Additional options for following the link.\n\n    Values from these options will override any attributes set on the given link element.\n  @return {Object}\n  @stable\n  */\n  function followOptions(link, options, parserOptions) {\n    // If passed a selector, up.fragment.get() will prefer a match on the current layer.\n    link = up.fragment.get(link)\n    options = u.options(options)\n\n    const parser = new up.OptionsParser(link, options, { fail: true, ...parserOptions })\n\n    parser.include(parseRequestOptions)\n\n    // Feedback options\n    parser.boolean('feedback')\n\n    // Fragment options\n    options.origin ||= link\n    parser.boolean('fail')\n    parser.boolean('navigate', {default: true})\n    parser.string('confirm', { attr: ['up-confirm', 'data-confirm'] })\n    parser.string('target')\n    parser.booleanOrString('fallback')\n    parser.string('match')\n    parser.string('content')\n    parser.string('fragment')\n    parser.string('document')\n    parser.boolean('useKeep')\n    parser.boolean('useHungry')\n\n    // Lifecycle options\n    parser.callback('onLoaded')\n    parser.callback('onRendered', { mainKey: 'result' })\n    parser.callback('onFinished', { mainKey: 'result' })\n    parser.callback('onOffline', { mainKey: 'error' }) // not a request option!\n    parser.callback('onError', { mainKey: 'error' }) // not a request option!\n\n    // Layer options\n    parser.boolean('peel')\n    parser.string('layer')\n    parser.string('baseLayer')\n    parser.json('context')\n    parser.string('mode')\n    parser.string('align')\n    parser.string('position')\n    parser.string('class')\n    parser.string('size')\n    parser.booleanOrString('dismissable')\n    parser.parse(up.layer.openCallbackAttr, 'onOpened')\n    parser.parse(up.layer.closeCallbackAttr, 'onAccepted')\n    parser.parse(up.layer.closeCallbackAttr, 'onDismissed')\n    parser.string('acceptEvent')\n    parser.string('dismissEvent')\n    parser.string('acceptLocation')\n    parser.string('dismissLocation')\n    parser.booleanOrString('history')\n\n    // Viewport options\n    parser.booleanOrString('focus')\n    parser.boolean('saveScroll')\n    parser.boolean('saveFocus')\n    parser.booleanOrString('scroll')\n    parser.boolean('revealTop')\n    parser.number('revealMax')\n    parser.number('revealPadding')\n    parser.number('revealSnap')\n    parser.string('scrollBehavior')\n\n    // History options\n    // { history } is actually a boolean, but we keep the deprecated string\n    // variant which should now be passed as { location }.\n    parser.booleanOrString('history')\n    parser.booleanOrString('location')\n    parser.booleanOrString('title')\n    parser.boolean('metaTags')\n\n    // Motion options\n    parser.include(up.motion.motionOptions)\n\n    // This is the event that may be prevented to stop the follow.\n    // up.form.submit() changes this to be up:form:submit instead.\n    // The guardEvent will also be assigned a { renderOptions } property in up.render()\n    if (!options.guardEvent) { options.guardEvent = up.event.build('up:link:follow', {log: 'Following link'}) }\n\n    return options\n  }\n\n  /*-\n  This event is [emitted](/up.emit) when a link is [followed](/up.follow) through Unpoly.\n\n  The event is emitted on the `<a>` element that is being followed.\n\n  ### Changing render options\n\n  Listeners may inspect and manipulate [render options](/up.render#parameters) for the coming fragment update.\n\n  The code below will open all form-contained links in an overlay, as to not\n  lose the user's form data:\n\n  ```js\n  up.on('up:link:follow', function(event, link) {\n    if (link.closest('form')) {\n      event.renderOptions.layer = 'new'\n    }\n  })\n  ```\n\n  @event up:link:follow\n  @param {Element} event.target\n    The link element that will be followed.\n  @param {Object} event.renderOptions\n    An object with [render options](/up.render#parameters) for the coming fragment update.\n\n    Listeners may inspect and modify these options.\n  @param event.preventDefault()\n    Prevents the link from being followed.\n  @stable\n  */\n\n  /*-\n  Preloads the given link.\n\n  When the link is clicked later, the response will already be [cached](/caching),\n  making the interaction feel instant.\n\n  You may use this function to programmatically populate the cache\n  with pages the user is likely to click or requires\n  [accessible while offline](/network-issues#offline-cache).\n\n  Preload requests are considered [background requests](/up.render#options.background)\n  and will not show the [progress bar](/loading-indicators#progress-bar).\n\n  Preloading a link will [enable caching](/caching#enabling-caching) for that link automatically.\n\n  @function up.link.preload\n  @param {string|Element|jQuery} link\n    The element or selector whose destination should be preloaded.\n  @param {Object} options\n    See options for `up.follow()`.\n  @param {boolean} [options.abortable=false]\n    Whether the preload request may be aborted when the user [navigates](/navigation)\n    or when `up.fragment.abort()` is called.\n\n    @experimental\n  @return {Promise}\n    A promise that will be fulfilled when the request was loaded and cached.\n\n    When the link cannot be preloaded, the promise rejects with an `up.AbortError`.\n  @stable\n  */\n  function preload(link, options) {\n    // If passed a selector, up.fragment.get() will match in the current layer.\n    link = up.fragment.get(link)\n\n    let issue = preloadIssue(link)\n    if (issue) {\n      return Promise.reject(new up.Error(issue))\n    }\n\n    const guardEvent = up.event.build('up:link:preload', {log: ['Preloading link %o', link]})\n\n    return follow(link, {\n      abortable: false,\n      ...options,\n      guardEvent,\n      preload: true\n    })\n  }\n\n  function preloadIssue(link) {\n    if (!isSafe(link)) {\n      return 'Will not preload an unsafe link'\n    }\n  }\n\n  /*-\n  This event is [emitted](/up.emit) before a link is [preloaded](/a-up-preload).\n\n  @event up:link:preload\n  @param {Element} event.target\n    The link element that will be preloaded.\n  @param {Object} event.renderOptions\n    An object with [render options](/up.render#parameters) for the preloading.\n\n    Listeners may inspect and modify these options.\n  @param event.preventDefault()\n    Prevents the link from being preloaded.\n  @stable\n  */\n\n  /*-\n  Returns the HTTP method that should be used when following the given link.\n\n  Looks at the link's `up-method` or `data-method` attribute.\n  Defaults to `\"get\"`.\n\n  @function up.link.followMethod\n  @param link\n  @param options.method {string}\n  @internal\n  */\n  function followMethod(link, options = {}) {\n    return u.normalizeMethod(options.method || link.getAttribute('up-method') || link.getAttribute('data-method'))\n  }\n\n  function followURL(link, options = {}) {\n    const url = options.url || link.getAttribute('up-href') || link.getAttribute('href')\n\n    // Developers sometimes make a <a href=\"#\"> to give a JavaScript interaction standard\n    // link behavior (like keyboard navigation or default styles). However, we don't want to\n    // consider this  a link with remote content, and rather honor [up-content], [up-document]\n    // and [up-fragment] attributes.\n    if (url !== '#') {\n      return url\n    }\n  }\n\n  /*-\n  Returns whether the given link will be [followed](/up.follow) by Unpoly\n  instead of making a full page load.\n\n  By default Unpoly will follow links if the element has\n  one of the following attributes:\n\n  - `[up-follow]`\n  - `[up-target]`\n  - `[up-layer]`\n  - `[up-mode]`\n  - `[up-transition]`\n  - `[up-content]`\n  - `[up-fragment]`\n  - `[up-document]`\n\n  To make additional elements followable, see `up.link.config.followSelectors`.\n\n  @function up.link.isFollowable\n  @param {Element|jQuery|string} link\n    The link to check.\n  @stable\n  */\n  function isFollowable(link) {\n    link = up.fragment.get(link)\n    return config.matches(link, 'followSelectors')\n  }\n\n  /*-\n  Makes sure that the given link will be [followed](/up.follow)\n  by Unpoly instead of making a full page load.\n\n  If the link is not already [followable](/up.link.isFollowable), the link\n  will receive an `a[up-follow]` attribute.\n\n  @function up.link.makeFollowable\n  @param {Element|jQuery|string} link\n    The element or selector for the link to make followable.\n  @experimental\n  */\n  function makeFollowable(link) {\n    if (!isFollowable(link)) {\n      link.setAttribute('up-follow', '')\n    }\n  }\n\n  function makeClickable(link) {\n    if (link.matches('a[href], button')) {\n      return\n    }\n\n    e.setMissingAttrs(link, {\n      tabindex: '0',     // Make them part of the natural tab order\n      role: 'link',      // Make screen readers pronounce \"link\"\n      'up-clickable': '' // Get pointer pointer from link.css\n    })\n\n    link.addEventListener('keydown', function(event) {\n      if ((event.key === 'Enter') || (event.key === 'Space')) {\n        return forkEventAsUpClick(event)\n      }\n    })\n  }\n\n  /*-\n  Enables keyboard interaction for elements that represent links or buttons.\n\n  To define the element's effect when activated, handle the `up:click` event.\n  If you want Unpoly to treat this element like a hyperlink, set an `[up-href]` attribute.\n\n  ### Accessibility\n\n  @include clickable-behaviors\n\n  ### Unobtrusive use\n\n  To add these behaviors to existing elements without setting the `[up-clickable]`,\n  push a selector into [`up.link.config.clickableSelectors`](/up.link.config#config.clickableSelectors).\n\n  @selector [up-clickable]\n  @experimental\n  */\n  up.macro(config.selectorFn('clickableSelectors'), makeClickable)\n\n  function shouldFollowEvent(event, link) {\n    // Users may configure up.link.config.followSelectors.push('a')\n    // and then opt out individual links with [up-follow=false].\n    if (event.defaultPrevented) {\n      return false\n    }\n\n    // If user clicked on a child link of $link, or in an <input> within an [up-expand][up-href]\n    // we want those other elements handle the click.\n    const betterTargetSelector = `a, [up-href], ${up.form.fieldSelector()}`\n    const betterTarget = event.target.closest(betterTargetSelector)\n    return !betterTarget || (betterTarget === link)\n  }\n\n  function isInstant(linkOrDescendant) {\n    const element = linkOrDescendant.closest(config.selector('instantSelectors'))\n    // Allow users to configure up.link.config.instantSelectors.push('a')\n    // but opt out individual links with [up-follow=false].\n    return element && !isInstantDisabled(element)\n  }\n\n  function isInstantDisabled(link) {\n    // (1) We cannot resolve config.noInstantSelectors via a :not() selector because\n    //     convertClicks() needs to check if a given link is instant.\n    // (2) We cannot implement this as !isFollowable(link) because [up-clickable] can add\n    //     instant support for non-followable elements.\n    return config.matches(link, 'noInstantSelectors') || config.matches(link, 'noFollowSelectors')\n  }\n\n  /*-\n  Provide an `up:click` event that improves on standard click\n  in several ways:\n\n  - It is emitted on mousedown for [up-instant] elements\n  - It is not emitted if the element has disappeared (or was overshadowed)\n    between `mousedown` and `click`. This can happen if `mousedown` creates a new element\n    that obstructs interaction with this element, or if a `mousedown` handler removes a handler.\n\n  Stopping an up:click event will also stop the underlying event.\n\n  Also see docs for `up:click`.\n\n  @function up.link.convertClicks\n  @param {up.Layer} layer\n  @internal\n  */\n  function convertClicks(layer) {\n    layer.on('click', function(event, element) {\n      // We never handle events for the right mouse button,\n      // or when Shift/CTRL/Meta/ALT is pressed\n      if (!up.event.isUnmodified(event)) {\n        return\n      }\n\n      // (1) Instant links should not have a `click` event.\n      //     This would trigger the browsers default follow-behavior and possibly activate JS libs.\n      // (2) A11Y: We also need to check whether the [up-instant] behavior did trigger on mousedown.\n      //     Keyboard navigation will not necessarily trigger a mousedown event.\n      if (isInstant(element) && lastMousedownTarget) {\n        up.event.halt(event)\n\n      // In case mousedown has created a layer over the click coordinates,\n      // Chrome will emit an event with { target: document.body } on click.\n      // Ignore that event and only process if we would still hit the\n      // expect layers at the click coordinates.\n      } else if (layer.wasHitByMouseEvent(event) && !didUserDragAway(event)) {\n        // Event is a `PointerEvent` with an { pointerType } property.\n        // Its values are 'mouse', 'pen', 'touch' or '' (unknown, meaning synthetic or keyboard).\n        forkEventAsUpClick(event)\n      }\n\n      // In case the user switches input modes.\n      return lastMousedownTarget = null\n    })\n\n    layer.on('mousedown', function(event, element) {\n      // We never handle events for the right mouse button,\n      // or when Shift/CTRL/Meta/ALT is pressed\n      if (!up.event.isUnmodified(event)) {\n        return\n      }\n\n      lastMousedownTarget = event.target\n\n      if (isInstant(element)) {\n        // A11Y: Keyboard navigation will not necessarily trigger a mousedown event.\n        // We also don't want to listen to the enter key, since some screen readers\n        // use the enter key for something else.\n        forkEventAsUpClick(event)\n      }\n    })\n  }\n\n  function didUserDragAway(clickEvent) {\n    return lastMousedownTarget && (lastMousedownTarget !== clickEvent.target)\n  }\n\n  function forkEventAsUpClick(originalEvent) {\n    let forwardedProps = ['clientX', 'clientY', 'button', ...up.event.keyModifiers]\n    const newEvent = up.event.fork(originalEvent, 'up:click', forwardedProps)\n    up.emit(originalEvent.target, newEvent, { log: false })\n  }\n\n  /*-\n  A `click` event that honors the [`[up-instant]`](/a-up-instant) attribute.\n\n  This event is generally emitted when an element is clicked. However, for elements\n  with an [`[up-instant]`](/a-up-instant) attribute this event is emitted on `mousedown` instead.\n\n  This is useful to listen to links being activated, without needing to know whether\n  a link is `[up-instant]`.\n\n  ### Example\n\n  Assume we have two links, one of which is `[up-instant]`:\n\n  ```html\n  <a href=\"/one\">Link 1</a>\n  <a href=\"/two\" up-instant>Link 2</a>\n  ```\n\n  The following event listener will be called when *either* link is activated:\n\n  ```js\n  document.addEventListener('up:click', function(event) {\n    ...\n  })\n  ```\n\n  ### Cancelation\n\n  You may cancel an `up:click` event using `event.preventDefault()`.\n\n  Canceling `up:click` on a hyperlink will prevent any Unpoly from [following](/a-up-follow) that link.\n\n  The underlying `click` or `mousedown` event will also be canceled.\n\n  ### Accessibility\n\n  If the user activates an element using their keyboard, the `up:click` event will be emitted\n  when the key is pressed even if the element has an `[up-instant]` attribute.\n\n  ### Only unmodified clicks are considered\n\n  To prevent overriding native browser behavior, the `up:click` is only emitted for unmodified clicks.\n\n  In particular, it is not emitted when the user holds `Shift`, `CTRL` or `Meta` while clicking.\n  Neither it is emitted when the user clicks with a secondary mouse button.\n\n  @event up:click\n  @param {Element} event.target\n    The clicked element.\n  @param {Event} event.originalEvent\n    The underlying `click` or `mousedown` event.\n  @param event.preventDefault()\n    Prevents this event and also the original `click` or `mousedown` event.\n  @stable\n  */\n\n  /*-\n  Returns whether the given link has a [safe](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.1)\n  HTTP method like `GET`.\n\n  @function up.link.isSafe\n  @param {Element} link\n  @return {boolean}\n  @stable\n  */\n  function isSafe(link) {\n    const method = followMethod(link)\n    return up.network.isSafeMethod(method)\n  }\n\n  /*-\n  [Follows](/up.follow) this link with JavaScript and updates a fragment with the server response.\n\n  Following a link is considered [navigation](/navigation) by default.\n\n  ### Example\n\n  This will update the fragment `<div class=\"content\">` with the same element\n  fetched from `/posts/5`:\n\n  ```html\n  <a href=\"/posts/5\" up-follow up-target=\".content\">Read post</a>\n  ```\n\n  If no `[up-target]` attribute is set, the [main target](/up-main) is updated.\n\n  ### Advanced fragment changes\n\n  See [fragment placement](/targeting-fragments) for advanced use cases\n  like updating multiple fragments or appending content to an existing element.\n\n  ### Short notation\n\n  You may omit the `[up-follow]` attribute if the link has one of the following attributes:\n\n  - `[up-target]`\n  - `[up-layer]`\n  - `[up-transition]`\n  - `[up-content]`\n  - `[up-fragment]`\n  - `[up-document]`\n\n  Such a link will still be followed through Unpoly.\n\n  ### Following all links automatically\n\n  You can configure Unpoly to follow *all* links on a page without requiring an `[up-follow]` attribute.\n\n  See [Handling all links and forms](/handling-everything).\n\n  ### Preventing Unpoly from following links\n\n  To prevent Unpoly from following an `a[up-follow]` link, use one of the following options:\n\n  - Prevent the `up:link:follow` event on the link element\n  - Prevent the `up:click` event on the link element\n  - Set an `[up-follow=false]` attribute on the link element\n\n  @selector a[up-follow]\n\n  @param [up-navigate='true']\n    Whether this fragment update is considered [navigation](/navigation).\n\n    Setting this to `false` will disable most defaults documented below,\n    causing Unpoly to render a fragment without side-effects like updating history\n    or scrolling.\n\n  @param [href]\n    The URL to fetch from the server.\n\n    See [loading content from a URL](/render-content#url).\n\n    To use a different URL when a link is followed through Unpoly (as opposed to a browser's full page load),\n    set an `[up-href]` attribute.\n\n    Instead of making a server request, you may also render an [existing string of HTML](/render-content#local).\n\n  @param [up-target]\n    The [target selector](/targeting-fragments) to update.\n\n    If omitted a [main target](/up-main) will be rendered.\n\n  @param [up-fallback='true']\n    Specifies behavior if the [target selector](/up.render#options.target) is missing from the current page or the server response.\n\n    If set to a CSS selector, Unpoly will attempt to replace that selector instead.\n\n    If set to `true` Unpoly will attempt to replace a [main target](/up-main) instead.\n\n    If set to `false` Unpoly will immediately reject the render promise.\n\n  @param [up-match='region']\n    Controls which fragment to update when the [`[up-target]`](#up-target) selector yields multiple results.\n\n    When set to `'region'` Unpoly will prefer to update fragments in the\n    [region](/targeting-fragments#resolving-ambiguous-selectors) of the [origin element](/up.render#options.origin).\n\n    If set to `'first'` Unpoly will always update the first matching fragment.\n\n    Defaults to `up.fragment.config.match`, which defaults to `'region'`.\n\n  @param [up-method='get']\n    The HTTP method to use for the request.\n\n    Common values are `get`, `post`, `put`, `patch` and `delete`. The value is case insensitive.\n\n    The HTTP method may also be passed as an `[data-method]` attribute.\n\n    By default, methods other than `get` or `post` will be converted into a `post` request, and carry\n    their original method as a configurable [`_method` parameter](/up.protocol.config#config.methodParam).\n\n  @param [up-params]\n    A JSON object with additional [parameters](/up.Params) that should be sent as the request's\n    [query string](https://en.wikipedia.org/wiki/Query_string) or payload.\n\n    When making a `GET` request to a URL with a query string, the given `{ params }` will be added\n    to the query parameters.\n\n  @param [up-headers]\n    A JSON object with additional request headers.\n\n    Unpoly will by default send a number of custom request headers.\n    E.g. the `X-Up-Target` header includes the [target selector](/targeting-fragments).\n    See `up.protocol` for details.\n\n  @param [up-content]\n    The new [inner HTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n    for the targeted fragment.\n\n    See [Updating an element's inner HTML from a string](/render-content#content).\n\n  @param [up-fragment]\n    A string of HTML comprising *only* the new fragment's\n    [outer HTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML).\n\n    With an `[up-fragment]` attribute you can omit the `[up-target]` attribute.\n    The target will be [derived](/target-derivation) from the root element in the given HTML.\n\n    See [Rendering a string that only contains the fragment](/render-content#fragment).\n\n  @param [up-document]\n    A string of HTML containing the targeted fragment.\n\n    See [Extracting an element's outer HTML from a larger HTML string](/render-content#document).\n\n  @param [up-fail]\n    Whether the server response should be considered failed.\n\n    By [default](/up.network.config#config.fail) any HTTP status code other than 2xx or [304](/skipping-rendering#rendering-nothing) is considered an error code.\n\n    For failed responses Unpoly will use attributes prefixed with `up-fail`, e.g. `[up-fail-target]`.\n    See [handling server errors](/failed-responses) for details.\n\n  @param [up-history='auto']\n    Whether the browser URL, window title and meta tags will be [updated](/updating-history).\n\n    If set to `true`, the history will always be updated, using the title and URL from\n    the server response, or from given `[up-title]` and `[up-location]` attributes.\n\n    If set to `auto` history will be updated if the `[up-target]` matches\n    a selector in `up.fragment.config.autoHistoryTargets`. By default this contains all\n    [main targets](/up-main).\n\n    If set to `false`, the history will remain unchanged.\n\n    @see updating-history\n\n  @param [up-title]\n    An explicit document title to set before rendering.\n\n    By default the title is extracted from the response's `<title>` tag.\n    To prevent the title from being updated, set `[up-title=false]` to explicitly\n\n    This attribute is only used when [updating history](#up-history).\n\n  @param [up-location]\n    An explicit URL to set before rendering.\n\n    By default Unpoly will use the link's `[href]` or the final URL after the server redirected.\n    To prevent the URL from being updated, set `[up-location=false]`.\n\n    This attribute is only used when [updating history](#up-history).\n\n  @param [up-meta-tags]\n    Whether to update [meta tags](/up-meta) in the `<head>`.\n\n    By default Unpoly will extract meta tags from the response's `<head>`.\n    To prevent meta tags from being updated, set `[up-meta-tags=false]`.\n\n    This attribute is only used when [updating history](#up-history).\n\n  @param [up-transition]\n    The name of an [transition](/up.motion) to morph between the old and few fragment.\n\n    If you are [prepending or appending content](/targeting-fragments#appending-or-prepending-content),\n    use the `[up-animation]` attribute instead.\n\n  @param [up-animation]\n    The name of an [animation](/up.motion) to reveal a new fragment when\n    [prepending or appending content](/targeting-fragments#appending-or-prepending-content).\n\n    If you are replacing content (the default), use the `[up-transition]` attribute instead.\n\n  @param [up-duration]\n    The duration of the transition or animation (in millisconds).\n\n  @param [up-easing]\n    The timing function that accelerates the transition or animation.\n\n    See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function)\n    for a list of available timing functions.\n\n  @param [up-cache='auto']\n    Whether to read from and write to the [cache](/caching).\n\n    With `[up-cache=true]` Unpoly will try to re-use a cached response before connecting\n    to the network. To prevent display of stale content, cached responses are\n    [reloaded once rendered](#up-revalidate). If no cached response exists,\n    Unpoly will make a request and cache the server response.\n\n    With `[up-cache=auto]` Unpoly will use the cache only if `up.network.config.autoCache`\n    returns `true` for the request.\n\n    With `[up-cache=false]` Unpoly will always make a network request.\n\n  @param [up-revalidate='auto']\n    Whether to reload the [targeted fragment](/targeting-fragments)\n    after it was rendered from a cached response.\n\n    With `[up-revalidate='auto']` Unpoly will revalidate if the `up.fragment.config.autoRevalidate(response)`\n    returns `true`. By default this configuration will return true for\n    [expired](/up.fragment.config#config.autoRevalidate) responses.\n\n    With `[up-revalidate='true']` Unpoly will always revalidate cached content, regardless\n    of its age.\n\n    With `[up-revalidate='false']` Unpoly will never revalidate cached content.\n\n  @param [up-expire-cache]\n    Whether existing [cache](/caching) entries will be [expired](/caching#expiration) with this request.\n\n    By default a non-GET request will expire the entire cache.\n    You may also pass a [URL pattern](/url-patterns) to only expire matching requests.\n\n    Also see [`up.request({ expireCache })`](/up.request#options.expireCache) and `up.network.config.expireCache`.\n\n  @param [up-evict-cache]\n    Whether existing [cache](/caching) entries will be [evicted](/caching#eviction) with this request.\n\n    You may also pass a [URL pattern](/url-patterns) to only evict matching requests.\n\n    Also see [`up.request({ evictCache })`](/up.request#options.evictCache) and `up.network.config.evictCache`.\n\n  @param [up-abort='target']\n    Whether to [abort existing requests](/aborting-requests) before rendering.\n\n  @param [up-abortable='true']\n    Whether this request may be aborted by other requests targeting the same fragments or layer.\n\n    See [aborting requests](/aborting-requests) for details.\n\n    @experimental\n\n  @param [up-background='false']\n    Whether this request will load in the background.\n\n    Background requests deprioritized over foreground requests.\n    Background requests also won't emit `up:network:late` events and won't trigger\n    the [progress bar](/loading-indicators#progress-bar).\n\n  @param [up-bad-response-time]\n    The number of milliseconds after which this request can cause\n    an `up:network:late` event.\n\n    Defaults to `up.network.config.badResponseTime`.\n\n    @experimental\n\n  @param [up-timeout]\n    The number of milliseconds after which this request fails with a timeout.\n\n    Defaults to `up.network.config.timeout`.\n\n  @param [up-layer='origin current']\n    The [layer](/up.layer) in which to match and render the fragment.\n\n    See [layer option](/layer-option) for a list of allowed values.\n\n    To [open the fragment in a new overlay](/opening-overlays), pass `[up-layer=new]`.\n    In this case attributes for `a[up-layer=new]` may also be used.\n\n  @param [up-peel='true']\n    Whether to close overlays obstructing the updated layer when the fragment is updated.\n\n    This is only relevant when updating a layer that is not the [frontmost layer](/up.layer.front).\n\n  @param [up-context]\n    A JSON object that will be merged into the [context](/context)\n    of the current layer once the fragment is rendered.\n\n    @experimental\n\n  @param [up-scroll='auto']\n    How to scroll after the new fragment was rendered.\n\n    See [Scrolling](/scrolling) for a list of allowed values.\n\n  @param [up-scroll-behavior='instant']\n    Whether to [animate the scroll motion](/scroll-tuning#animating-the-scroll-motion)\n    when [prepending or appending](/targeting-fragments#appending-or-prepending-content) content.\n\n  @param [up-reveal-snap]\n    When to [snap to the top](/scroll-tuning#snapping-to-the-screen-edge)\n    when scrolling to an element near the top edge of the viewport's scroll buffer.\n\n  @param [up-reveal-top]\n    When to [move a revealed element to the top](/scroll-tuning#moving-revealed-elements-to-the-top)\n    when scrolling to an element.\n\n  @param [up-reveal-padding]\n    How much [space to leave to the closest viewport edge](/scroll-tuning#revealing-with-padding)\n    when scrolling to an element.\n\n  @param [up-reveal-max]\n    How many pixel lines of [high element to reveal](/scroll-tuning#revealing-with-padding) when scrolling to an element.\n\n  @param [up-save-scroll]\n    Whether to [save scroll positions](/up.viewport.saveScroll) before updating the fragment.\n\n    Saved scroll positions can later be restored with [`[up-scroll=restore]`](/scrolling#restoring-scroll-positions).\n\n  @param [up-focus='auto']\n    What to focus after the new fragment was rendered.\n\n    See [Controlling focus](/focus) for a list of allowed values.\n\n  @param [up-save-focus]\n    Whether to [save focus-related state](/up.viewport.saveFocus) before updating the fragment.\n\n    Saved scroll positions can later be restored with [`[up-focus=restore]`](/focus#restoring-focus).\n\n  @param [up-confirm]\n    A message the user needs to confirm before fragments are updated.\n\n    The message will be shown as a [native browser prompt](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt).\n\n    If the user does not confirm the render promise will reject and no fragments will be updated.\n\n  @param [up-feedback='true']\n    Whether to give the link an `.up-active` class and the targeted element an `.up-loading` class\n    while loading content.\n\n    See [navigation feedback](/up.feedback).\n\n  @param [up-on-loaded]\n    A JavaScript snippet that is executed when the server responds with new HTML,\n    but before the HTML is rendered.\n\n    The snippet runs in the following scope:\n\n    | Expression | Value                                         |\n    |------------|-----------------------------------------------|\n    | `this`     | The link being followed                       |\n    | `event`    | A preventable `up:fragment:loaded` event      |\n\n  @param [up-on-rendered]\n    A JavaScript snippet that is executed when Unpoly has updated fragments.\n\n    The snippet runs in the following scope:\n\n    | Expression | Value                                                |\n    |------------|------------------------------------------------------|\n    | `this`     | The link being followed                              |\n    | `result`   | The `up.RenderResult` for the respective render pass |\n\n    The snippet will be called zero, one or two times:\n\n    - When the server rendered an [empty response](/skipping-rendering#rendering-nothing), no fragments are updated. `[up-on-rendered]` is not called.\n    - When the server rendered a matching fragment, it will be updated on the page. `[up-on-rendered]` is called with the [result](/up.RenderResult).\n    - When [revalidation](/caching#revalidation) renders a second time, `[up-on-rendered]` is called again with the final result.\n\n    Also see [Running code after rendering](/render-hooks#running-code-after-rendering).\n\n  @param [up-on-finished]\n    A JavaScript snippet that is execvuted when no further DOM changes will be caused by this render pass.\n\n    In particular:\n\n    - [Animations](/up.motion) have concluded and [transitioned](https://unpoly.com/a-up-transition) elements were removed from the DOM tree.\n    - A [cached response](#up-cache) was [revalidated with the server](/caching#revalidation).\n      If the server has responded with new content, this content has also been rendered.\n\n    | Expression | Value                                                                  |\n    |------------|------------------------------------------------------------------------|\n    | `this`     | The link being followed                                                |\n    | `result`   | The `up.RenderResult` for the last render pass that updated a fragment |\n\n    If [revalidation](/caching#revalidation) re-rendered the fragment, `result` describes updates from the\n    second render pass. If no revalidation was performed, or if revalidation yielded an [empty response](/caching#when-nothing-changed),\n    it is the result from the initial render pass.\n\n    Also see [Awaiting postprocessing](/render-hooks#awaiting-postprocessing).\n\n  @param [up-on-offline]\n    A JavaScript snippet that is executed when the fragment could not be loaded\n    due to a [disconnect or timeout](/network-issues).\n\n    | Expression | Value                                         |\n    |------------|-----------------------------------------------|\n    | `this`     | The link being followed                       |\n    | `error`    | An `up.Offline` error                         |\n\n  @param [up-on-error]\n    A JavaScript snippet that is run when any error is thrown during the rendering process.\n\n    | Expression | Value                                         |\n    |------------|-----------------------------------------------|\n    | `this`     | The link being followed                       |\n    | `error`    | An `Error` object                             |\n\n    The callback is also called when the render pass fails due to [network issues](/network-issues),\n    or [aborts](/aborting-requests).\n\n    Also see [Handling errors](/render-hooks#handling-errors).\n\n  @param [up-use-keep='true']\n    Whether [`[up-keep]`](/up-keep) elements will be preserved in the updated fragment.\n\n    @experimental\n\n  @param [up-use-hungry='true']\n    Whether [`[up-hungry]`](/up-hungry) elements outside the updated fragment will also be updated.\n\n    @experimental\n\n  @stable\n  */\n  up.on('up:click', config.selectorFn('followSelectors'), function(event, link) {\n    if (shouldFollowEvent(event, link)) {\n      up.event.halt(event, { log: true })\n\n      // When the user clicks an hyperlink, the browser will focus the link element on `click`.\n      // However, for an `a[up-instant]` link we will emit `up:click` on `mousedown` and halt the `click` event.\n      // Without a `click` event the browser won't focus the link.\n      //\n      // This also has an unfortunate effect on `input[up-validate]`:\n      //\n      // - User types into a text field\n      // - With focus still on the text field, the user clicks on an `a[up-instant]`.\n      // - The link is being followed, causing a request for the new fragment.\n      // - When the response is received, Unpoly will update the targeted fragment.\n      // - This causes the text field (probably being replaced) from losing focus, causing a `change` event,\n      //   triggering `[up-validate]` and another server request for the validation.\n      // - The link request is probably `{ abort: true }`, but since it happened *before* the\n      //   validation request there was nothing to abort.\n      // - When the validation response is received, the text field is probably gone, causing error.\n      //\n      // To preseve behavioral symmetry to standard links, we manually focus the link when it was activated\n      // on `mousedown`.\n      up.focus(link, { preventScroll: true })\n\n      up.error.muteUncriticalRejection(follow(link))\n    }\n  })\n\n  /*-\n  Makes any element behave like a hyperlink.\n\n  ### Example\n\n  The following `<span>` element will [navigate](/a-up-follow) to `/details` when clicked:\n\n  ```html\n  <span up-href=\"/details\">Read more</span>\n  ```\n\n  ### Accessibility\n\n  @include clickable-behaviors\n\n  The link-like element cannot be opened in a new tab.\n\n  ### Advantages of `<a>` elements\n\n  In general you should prefer using regular hyperlinks (`a[href]`) over elements with `[up-href]`:\n\n  - Only regular links allow the user to open the destination in a new tab\n  - Regular links still work when JavaScript is unavailable.\n  - Regular links can be followed from crawlers like Google\n\n  `<a>` elements are also exceptional in that they may [contain block elements](https://makandracards.com/makandra/43549-it-s-ok-to-put-block-elements-inside-an-a-tag).\n\n  ### Use cases of `[up-href]`\n\n  There are some use cases for `[up-href]`:\n\n  - When you want to *prevent* the user from opening a link in a new tab.\n  - When the element cannot be wrapped in an `<a>`, e.g. a `<tr>`.\n\n  @selector [up-href]\n  @param [up-href]\n    The URL to load when activated.\n  @params-note\n    All attributes for `a[up-follow]` may be used.\n  @stable\n  */\n\n  /*-\n  Follows this link on `mousedown` instead of `click`.\n\n  This will save precious milliseconds that otherwise spent\n  on waiting for the user to release the mouse button. Since an\n  AJAX request will be triggered right way, the interaction will\n  appear faster.\n\n  > [INFO]\n  > With `[up-instant]` users can no longer cancel a click by dragging the pressed mouse away from the link.\n  > However, for navigation actions this isn't needed. E.g. many operation systems switch tabs on `mousedown`\n  > instead of `click`.\n\n  ### Example\n\n  ```html\n  <a href=\"/users\" up-follow up-instant>User list</a>\n  ```\n\n  ### Accessibility\n\n  If the user activates an element using their keyboard, the `up:click` event will be emitted\n  on `click`, even if the element has an `[up-instant]` attribute.\n\n  @selector a[up-instant]\n  @stable\n  */\n\n  /*-\n  Add an `[up-expand]` attribute to any element to enlarge the click area of a\n  descendant link.\n\n  `[up-expand]` honors all the Unppoly attributes in expanded links, like\n  `a[up-target]`, `a[up-instant]` or `a[up-preload]`.\n\n  ### Example\n\n  ```html\n  <div class=\"notification\" up-expand>\n    Record was saved!\n    <a href=\"/records\">Close</a>\n  </div>\n  ```\n\n  In the example above, clicking anywhere within `.notification` element\n  would [follow](/up.follow) the *Close* link.\n\n  ### Elements with multiple contained links\n\n  If a container contains more than one link, you can set the value of the\n  `[up-expand]` attribute to a CSS selector to define which link should be expanded:\n\n  ```html\n  <div class=\"notification\" up-expand=\".close\">\n    Record was saved!\n    <a class=\"details\" href=\"/records/5\">Details</a>\n    <a class=\"close\" href=\"/records\">Close</a>\n  </div>\n  ```\n\n  ### Limitations\n\n  `[up-expand]` has some limitations for advanced browser users:\n\n  - Users won't be able to right-click the expanded area to open a context menu\n  - Users won't be able to `CTRL`+click the expanded area to open a new tab\n\n  To overcome these limitations, consider nesting the entire clickable area in an actual `<a>` tag.\n  [It's OK to put block elements inside an anchor tag](https://makandracards.com/makandra/43549-it-s-ok-to-put-block-elements-inside-an-a-tag).\n\n  @selector [up-expand]\n  @param [up-expand]\n    A CSS selector that defines which containing link should be expanded.\n\n    If omitted, the first link in this element will be expanded.\n  @stable\n  */\n  up.macro('[up-expand]', function(area) {\n    const selector = area.getAttribute('up-expand') || 'a, [up-href]'\n\n    let childLink = e.get(area, selector)\n    if (childLink) {\n      const areaAttrs = e.upAttrs(childLink)\n      areaAttrs['up-href'] ||= childLink.getAttribute('href')\n      e.setMissingAttrs(area, areaAttrs)\n\n      const areaClasses = e.upClasses(childLink)\n      area.classList.add(...areaClasses)\n\n      makeFollowable(area)\n      // We could also consider making the area clickable, via makeClickable().\n      // However, since the original link is already present within the area,\n      // we would not add accessibility benefits. We might also confuse screen readers\n      // with a nested link.\n    }\n  })\n\n  /*-\n  Preloads this link when the user hovers over it.\n\n  When the link is clicked later the response will already be cached,\n  making the interaction feel instant.\n\n  Preloading a link will *not* [abort](/aborting-requests) pending requests\n  [targeting](/targeting-fragments) the same fragments. Only when the link is clicked later\n  conflicting requests are aborted.\n\n  Preload requests are considered [background requests](/up.render#options.background)\n  and will not show the [progress bar](/loading-indicators#progress-bar).\n\n  Preloading a link will [enable caching](/caching#enabling-caching) for that link automatically.\n\n  Unpoly will only preload [links with safe methods](/up.link.isSafe).\n\n  @selector a[up-preload]\n  @param [up-preload-delay]\n    The number of milliseconds to wait between hovering\n    and preloading. Increasing this will lower the load in your server,\n    but will also make the interaction feel less instant.\n\n    Defaults to `up.link.config.preloadDelay`.\n  @stable\n  */\n  up.compiler(config.selectorFn('preloadSelectors'), function(link) {\n    if (!isPreloadDisabled(link)) {\n      linkPreloader.watchLink(link)\n    }\n  })\n\n  up.on('up:framework:reset', reset)\n\n  return {\n    follow,\n    followOptions,\n    preload,\n    makeFollowable,\n    makeClickable,\n    isSafe,\n    isFollowable,\n    shouldFollowEvent,\n    followMethod,\n    convertClicks,\n    config,\n    combineFollowableSelectors,\n    preloadIssue,\n  }\n})()\n\nup.follow = up.link.follow\n", "/*-\nForms\n=====\n\nThe `up.form` module helps you work with non-trivial forms.\n\n@see validation\n@see dependent-fields\n@see disabling-forms\n@see watch-options\n\n@see form[up-submit]\n@see [up-validate]\n@see [up-switch]\n@see [up-autosubmit]\n@see up.watch\n\n@module up.form\n*/\nup.form = (function() {\n\n  const u = up.util\n  const e = up.element\n\n  const ATTRIBUTES_SUGGESTING_SUBMIT = ['[up-submit]', '[up-target]', '[up-layer]', '[up-transition]']\n\n  /*-\n  Sets default options for form submission and validation.\n\n  @property up.form.config\n\n  @param {Array<string>} [config.submitSelectors]\n    An array of CSS selectors matching forms that will be [submitted through Unpoly](/form-up-submit).\n\n    You can configure Unpoly to handle *all* forms on a page without requiring an `[up-submit]` attribute:\n\n    ```js\n    up.form.config.submitSelectors.push('form')\n    ```\n\n    Individual forms may opt out with an `[up-submit=false]` attribute.\n    You may configure additional exceptions in `config.noSubmitSelectors`.\n\n  @param {Array<string>} [config.noSubmitSelectors]\n    Exceptions to `up.form.config.submitSelectors`.\n\n    Matching forms will *not* be [submitted through Unpoly](/form-up-submit),\n    even if they match `up.form.config.submitSelectors`.\n\n  @param {Array<string>} [config.groupSelectors=['[up-form-group]', 'fieldset', 'label', 'form']]\n    An array of CSS selectors matching a [form group](/up-form-group).\n\n    When [validating](/validation#validating-after-changing-a-field) a field,\n    Unpoly will re-render the [closest](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)\n    form group around that field.\n\n    When a group is matched, Unpoly will [derive a target selector](/target-derivation) for the element.\n    In the example below, changing the *City* field would validate the target `#city_group`:\n\n    ```html\n    <fieldset id=\"city_group\">\n      <label for=\"city\">City</label>\n      <input type=\"text\" name=\"city\" id=\"city\" up-validate>\n    </fieldset>\n    ```\n\n    If no good selector cannot be derived from the group element, the resulting target will\n    use a `:has()` suffix that matches the changed field. In the example below the target\n    would be `fieldset:has(#city)`:\n\n    ```html\n    <fieldset> <!-- no [id] attribute to derive a selector from -->\n      <label for=\"city\">City</label>\n      <input type=\"text\" name=\"city\" id=\"city\" up-validate>\n    </fieldset>\n    ```\n\n  @param {string} [config.fieldSelectors]\n    An array of CSS selectors that represent form fields, such as `input` or `select`.\n\n    When you add custom JavaScript controls to this list, matching elements should respond to the properties `{ name, value, disabled }`.\n\n  @param {string} [config.submitButtonSelectors]\n    An array of CSS selectors that represent submit buttons, such as `input[type=submit]`.\n\n  @param {number} [config.watchInputDelay=0]\n    The number of milliseconds to [wait before running a watcher callback](/watch-options#debouncing-callbacks).\n\n    This default delay is only applied when [watching the `input` event](/watch-options#which-events-to-watch).\n    There is no default delay when watching other types of events.\n\n  @param {Array<string>|Function(Element): Array<string>} [config.watchInputEvents=['input', 'change']]\n    An array of events to substitute if [watching the `input` event](/watch-options#which-events-to-watch).\n\n    This can be used to watch [misbehaving fields](/watch-options#normalizing-non-standard-events)\n    that don't emit the [standard `input` event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)\n    as its value is being edited.\n\n    It's OK to name multiple events that may result in the same change (e.g. `['keydown', 'keyup']`).\n    Unpoly guarantees the callback is only run once per changed value.\n\n    Instead of configuring an array of event types, you may also set a function that accepts\n    a form field and returns an array of event types to watch for that field.\n\n  @param {Array<string>|Function(Element): Array<string>} [config.watchChangeEvents=['change']]\n    An array of events to substitute if [watching the `change` event](/watch-options#which-events-to-watch).\n\n    This can be used to watch [misbehaving fields](/watch-options#normalizing-non-standard-events)\n    that don't emit the [standard `change` event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n    after its value was changed.\n\n    It's OK to name multiple events that may result in the same change (e.g. `['change', 'blur']`).\n    Unpoly guarantees the callback is only run once per changed value.\n\n    Instead of configuring an array of event types, you may also set a function that accepts\n    a form field and returns an array of event types to watch for that field.\n\n  @stable\n   */\n  const config = new up.Config(() => ({\n    groupSelectors: ['[up-form-group]', 'fieldset', 'label', 'form'],\n    fieldSelectors: ['select', 'input:not([type=submit]):not([type=image])', 'button[type]:not([type=submit])', 'textarea'],\n    submitSelectors: up.link.combineFollowableSelectors(['form'], ATTRIBUTES_SUGGESTING_SUBMIT),\n    noSubmitSelectors: ['[up-submit=false]', '[target]', e.crossOriginSelector('action')],\n    submitButtonSelectors: ['input[type=submit]', 'input[type=image]', 'button[type=submit]', 'button:not([type])'],\n    // Although we only need to bind to `input`, we always also bind to `change`\n    // in case another script manually triggers it.\n    watchInputEvents: ['input', 'change'],\n    watchInputDelay: 0,\n    watchChangeEvents: ['change'],\n  }))\n\n  /*-\n  @function up.form.fieldSelector\n  @internal\n  */\n  function fieldSelector(suffix = '') {\n    return config.fieldSelectors.map(field => field + suffix).join()\n  }\n\n  /*-\n  Returns whether the given element is a form field, such as `input` or `select`.\n\n  To configure what Unpoly considers a form field, use `up.form.config.fieldSelectors`.\n\n  @function up.form.isField\n  @param {Element} element\n    The element to check.\n  @return {boolean}\n    Whether the given element is a form field.\n  @stable\n  */\n  function isField(element) {\n    return element.matches(fieldSelector())\n  }\n\n  /*-\n  Returns a list of form fields within the given element.\n\n  You can configure what Unpoly considers a form field by adding CSS selectors to the\n  `up.form.config.fieldSelectors` array.\n\n  If the given element is itself a form field, a list of that given element is returned.\n\n  @function up.form.fields\n  @param {Element|jQuery} root\n    The element to scan for contained form fields.\n\n    If the element is itself a form field, a list of that element is returned.\n  @return {List<Element>}\n\n  @experimental\n  */\n  function findFields(root) {\n    root = e.get(root) // unwrap jQuery\n    let fields = e.subtree(root, fieldSelector())\n\n    // If findFields() is called with an entire form, gather fields outside the form\n    // element that are associated with the form (through <input form=\"id-of-form\">, which\n    // is an HTML feature.)\n    if (root.matches('form[id]')) {\n      const outsideFieldSelector = fieldSelector(e.attrSelector('form', root.getAttribute('id')))\n      const outsideFields = up.fragment.all(outsideFieldSelector, { layer: root })\n      fields.push(...outsideFields)\n      fields = u.uniq(fields)\n    }\n\n    return fields\n  }\n\n  /*-\n  Returns a list of submit buttons within the given element.\n\n  You can configure what Unpoly considers a submit button by adding CSS selectors to the\n  `up.form.config.submitButtonSelectors` array.\n\n  @function up.form.submitButtons\n  @param {Element|jQuery} root\n    The element to scan for contained submit buttons.\n  @return {List<Element>}\n    The list of found submit buttons.\n  @experimental\n  */\n  function findSubmitButtons(root) {\n    return e.subtree(root, submitButtonSelector())\n  }\n\n  /*-\n  @function up.form.submittingButton\n  @param {Element} form\n  @internal\n  */\n  function submittingButton(form) {\n    const selector = submitButtonSelector()\n    const focusedElement = document.activeElement\n\n    // Use focused element only if it is a part of the submitted form.\n    if (focusedElement && focusedElement.form === form) {\n      // It must match the submit button selector as well.\n      if (focusedElement.matches(selector)) {\n        return focusedElement\n      }\n    }\n\n    // If no button is focused, we assume the first button in the form.\n    return e.get(form, selector)\n  }\n\n  /*-\n  @function up.form.submitButtonSelector\n  @internal\n  */\n  function submitButtonSelector() {\n    return config.selector('submitButtonSelectors')\n  }\n\n  /*-\n  Submits a form via AJAX and updates a page fragment with the response.\n\n  Instead of loading a new page, the form is submitted via AJAX.\n  The response is parsed for a CSS selector and the matching elements will\n  replace corresponding elements on the current page.\n\n  The unobtrusive variant of this is the `form[up-submit]` selector.\n  See its documentation to learn how form submissions work in Unpoly.\n\n  Submitting a form is considered [navigation](/navigation).\n\n  Emits the event [`up:form:submit`](/up:form:submit).\n\n  ### Example\n\n  ```js\n  up.submit('form.new-user', { target: '.main' })\n  ```\n\n  @function up.submit\n\n  @param {Element|jQuery|string} form\n    The form to submit.\n\n    If the argument points to an element that is not a form,\n    Unpoly will search its ancestors for the [closest](/up.fragment.closest) form.\n\n  @param {Object} [options]\n    [render options](/up.render#parameters) that should be used for submitting the form.\n\n    Unpoly will parse render options from the given form's attributes\n    like `[up-target]` or `[up-transition]`. See `form[up-submit]` for a list\n    of supported attributes.\n\n    You may pass this additional `options` object to supplement or override\n    options parsed from the form attributes.\n\n  @param {boolean} [options.navigate=true]\n    Whether this fragment update is considered [navigation](/navigation).\n\n    Setting this to `false` will disable most defaults.\n\n  @param {string|Element} [options.failTarget]\n    The [target selector](/targeting-fragments) to update when the server responds with an error code.\n\n    Defaults to the form element itself.\n\n    @see failed-responses\n\n  @param {boolean|string} [options.disable]\n    Whether to [disable form controls](/disabling-forms) while the form is submitting.\n\n  @param {Element} [options.origin]\n    The element that triggered the form submission.\n\n    This defaults to the first applicable:\n\n    - An element within the form that was focused when the form was submitted (e.g. when the user presses `Enter` inside a text field)\n    - The [button clicked to submit the form](/up:form:submit#event.submitButton).\n    - The first submit button\n    - The `<form>` element\n\n  @return {up.RenderJob}\n    A promise that fulfills with an `up.RenderResult`\n    once the server response was loaded and rendered.\n\n  @stable\n  */\n  const submit = up.mockable((form, options) => {\n    return up.render(submitOptions(form, options))\n  })\n\n  /*-\n  Parses the [render](/up.render) options that would be used to\n  [submit](/up.submit) the given form, but does not render.\n\n  ### Example\n\n  Given a form element:\n\n  ```html\n  <form action=\"/foo\" method=\"post\" up-target=\".content\">\n  ...\n  </form>\n  ```\n\n  We can parse the link's render options like this:\n\n  ```js\n  let form = document.querySelector('form')\n  let options = up.form.submitOptions(form)\n  // => { url: '/foo', method: 'POST', target: '.content', ... }\n  ```\n\n  @param {Element|jQuery|string} form\n    The form for which to parse render option.\n  @param {Object} [options]\n    Additional options for the form submission.\n\n    Values from these options will override any attributes set on the given form element.\n  @function up.form.submitOptions\n  @return {Object}\n  @stable\n  */\n  function submitOptions(form, options, parserOptions) {\n    form = getForm(form)\n\n    options = u.options(options)\n\n    let parser = new up.OptionsParser(form, options, parserOptions)\n\n    parser.include(destinationOptions)\n\n    // We should usually be able to derive a target selector since form[action] is a default\n    // deriver. In cases when we cannot, we should usually update a main target since\n    // submitting is navigation, and { fallback: true } is a navigation default.\n    parser.string('failTarget', { default: up.fragment.tryToTarget(form) })\n\n    parser.booleanOrString('disable')\n\n    // The guardEvent will also be assigned an { renderOptions } property in up.render()\n    options.guardEvent ||= up.event.build('up:form:submit', {\n      submitButton: options.submitButton,\n      log: 'Submitting form',\n      params: options.params\n    })\n\n    options.origin ||= up.viewport.focusedElementWithin(form) || options.submitButton || form\n\n    // Now that we have extracted everything form-specific into options, we can call\n    // up.link.followOptions(). This will also parse the myriads of other options\n    // that are possible on both <form> and <a> elements.\n    parser.include(up.link.followOptions)\n\n    return options\n  }\n\n  function watchOptions(field, options, parserOptions = {}) {\n    options = u.options(options)\n\n    // Computing the effective options for a given field is pretty involved,\n    // as there are multiple layers of defaults. In increasing priority these are:\n    //\n    // Users can configure app-wide defaults for some options:\n    //\n    // \t\tup.form.config.watchInputDelay = 100\n    //\n    // Forms can configure [up-watch-...] prefixed defaults for all watchers:\n    //\n    // \t\t<form up-watch-disable=\"false\">\n    // \t\t\t<input up-autosubmit>\n    // \t\t</form>\n    //\n    // Form-wide options can be overridden at the input level:\n    //\n    // \t\t<form up-watch-disable=\"true\">\n    // \t\t\t<input up-autosubmit up-watch-disable=\"false\">\n    // \t\t</form>\n    //\n    // You may also set [up-watch-...] attribute on any element containing fields.\n    // The closest attribute around the changed field is honored.\n    //\n    // This is particularly useful for a group of radio buttons:\n    //\n    // \t\t<form up-watch-disable=\"true\">\n    // \t\t\t<fieldset up-autosubmit up-watch-disable=\"false\">\n    // \t\t\t\t<input type=\"radio\" name=\"kind\" value=\"0\">\n    // \t\t\t\t<input type=\"radio\" name=\"kind\" value=\"1\">\n    // \t\t\t\t<input type=\"radio\" name=\"kind\" value=\"2\">\n    // \t\t\t</fieldset>\n    // \t\t</form>\n    //\n    // Programmatic callers may also override all HTML attributes by passing an options hash:\n    //\n    //    up.validate(field, { disable: true })\n\n    let parser = new up.OptionsParser(field, options, { ...parserOptions, closest: true, attrPrefix: 'up-watch-' })\n\n    parser.boolean('feedback')\n    parser.booleanOrString('disable')\n    parser.string('event')\n    parser.number('delay')\n\n    let config = up.form.config\n    if (options.event === 'input') {\n      // Expand the event name via the map in `up.form.config.watchInputEvents`.\n      // This way we can fix components\n      options.event = u.evalOption(config.watchInputEvents, field)\n      options.delay ??= config.watchInputDelay\n    } else if (options.event === 'change') {\n      options.event = u.evalOption(config.watchChangeEvents, field)\n    }\n\n    options.origin ||= field\n\n    return options\n  }\n\n  /*-\n  Disables all [fields](/up.form.fields) and [submit buttons](/up.form.submitButtons) within the given element.\n\n  Disabling a focused control may cause focus to be reset. To prevent this, Unpoly will\n  focus the closest [form group](/up-form-group) around the disabled control.\n\n  To automatically disable a form when it is submitted, add the [`[up-disable]`](/form-up-submit#up-disable)\n  property to the `<form>` element.\n\n  ### Dealing with focus loss\n\n  When a focus field is disabled, it will lose focus.\n\n  In that case Unpoly will focus the [closest form group](/up.form.group) around the disabled control.\n\n  @function up.form.disable\n  @param {Element} element\n    The element within which fields and buttons should be disabled.\n  @return {Function}\n    A function that re-enables the elements that were disabled.\n  @internal\n  */\n  function disableContainer(container) {\n    let focusedElement = document.activeElement\n    let focusFallback\n    let controls = [...findFields(container), ...findSubmitButtons(container)]\n\n    for (let control of controls) {\n      if (control === focusedElement) {\n        focusFallback = findGroup(focusedElement)\n      }\n      raiseDisableStack(control)\n    }\n\n    if (focusFallback) {\n      up.focus(focusFallback, { force: true, preventScroll: true })\n    }\n\n    return function() {\n      controls.forEach(lowerDisableStack)\n    }\n  }\n\n  function raiseDisableStack(control) {\n    if (!control.upDisableCount) {\n      control.upDisableCount ||= 0\n      control.upOriginalDisabled = control.disabled\n    }\n\n    control.upDisableCount++\n    control.disabled = true\n  }\n\n  function lowerDisableStack(control) {\n    if (control.upDisableCount) {\n      if (!control.disabled) {\n        // In this case external code has re-enabled this field.\n        // We abort our own disablement stack.\n        control.upDisableCount = 0\n      } else {\n        control.upDisableCount--\n        if (!control.upDisableCount) {\n          control.disabled = control.upOriginalDisabled\n        }\n      }\n    }\n  }\n\n  function disableWhile(promise, options) {\n    let undoDisable = handleDisableOption(options)\n    u.always(promise, undoDisable)\n  }\n\n  function handleDisableOption({ disable, origin }) {\n    if (!disable) return u.noop\n\n    let missingOption = (key) => { up.fail(\"Cannot process { disable: '%s' } option without { %s }\", disable, key) }\n    let getOrigin = () => origin || missingOption('origin')\n    let getOriginForm = () => getScope(getOrigin())\n\n    let containers\n\n    if (disable === true) {\n      containers = [getOriginForm()]\n    } else if (u.isString(disable)) {\n      // Disable all elements matching the given selector, but within the form\n      containers = up.fragment.subtree(getOriginForm(), disable, { origin })\n    }\n\n    return u.sequence(containers.map(disableContainer))\n  }\n\n  // This was extracted from submitOptions().\n  // Validation needs to submit a form without options intended for the final submission,\n  // like [up-scroll], [up-confirm], etc.\n  function destinationOptions(form, options, parserOptions) {\n    options = u.options(options)\n    form = getForm(form)\n    const parser = new up.OptionsParser(form, options, parserOptions)\n\n    parser.string('contentType', { attr: 'enctype' })\n    parser.json('headers')\n\n    // Parse params from form fields.\n    const params = up.Params.fromForm(form)\n\n    const submitButton = submittingButton(form)\n    if (submitButton) {\n      options.submitButton = submitButton\n      // Submit buttons with a [name] attribute will add to the params.\n      // Note that addField() will only add an entry if the given button has a [name] attribute.\n      params.addField(submitButton)\n\n      // Submit buttons may have [formmethod] and [formaction] attribute\n      // that override [method] and [action] attribute from the <form> element.\n      options.method ||= submitButton.getAttribute('formmethod')\n      options.url ||= submitButton.getAttribute('formaction')\n    }\n\n    // We had any { params } option to the params that we got from the form.\n    params.addAll(options.params)\n    options.params = params\n\n    // Parse the form element's { url, method } *after* parsing the submit button.\n    // The submit button's [formmethod] and [formaction] attributes have precedence.\n    parser.string('url', { attr: 'action', default: up.fragment.source(form) })\n    parser.string('method', {\n      attr: ['up-method', 'data-method', 'method'],\n      default: 'GET',\n      normalize: u.normalizeMethod\n    })\n    if (options.method === 'GET') {\n      // Only for GET forms, browsers discard all query params from the form's [action] URL.\n      // The URLs search part will be replaced with the serialized form data.\n      // See design/query-params-in-form-actions/cases.html for\n      // a demo of vanilla browser behavior.\n      options.url = up.Params.stripURL(options.url)\n    }\n\n    return options\n  }\n\n  /*-\n  This event is [emitted](/up.emit) when a form is [submitted](/up.submit) through Unpoly.\n\n  The event is emitted on the element that caused the form submission.\n  This is usually a submit button or a focused field. If the element is not known, the event is emitted\n  on the `<form>` element.\n\n  When the form is being [validated](/up-validate), this event is not emitted.\n  Instead an `up:form:validate` event is emitted.\n\n  ### Changing render options\n\n  Listeners may inspect and manipulate [render options](/up.render#parameters) for the coming fragment update.\n\n  The code below will use a custom [transition](/a-up-transition)\n  when a form submission [fails](/failed-responses):\n\n  ```js\n  up.on('up:form:submit', function(event, form) {\n    event.renderOptions.failTransition = 'shake'\n  })\n  ```\n\n  @event up:form:submit\n  @param {Element} event.target\n    The element that caused the form submission.\n  @param {up.Params} event.params\n    The [form parameters](/up.Params) that will be send as the form's request payload.\n\n    Listeners may inspect and modify params before they are sent.\n  @param {Element} [event.submitButton]\n    The button used to submit the form.\n\n    If no button was pressed directly (e.g. the user pressed `Enter` inside a focused text field),\n    this returns the first submit button.\n  @param {Object} event.renderOptions\n    An object with [render options](/up.render#parameters) for the fragment update.\n\n    Listeners may inspect and modify these options.\n  @param event.preventDefault()\n    Prevents the form from being submitted.\n  @stable\n  */\n\n  // MacOS does not focus buttons on click.\n  // That means that submittingButton() cannot rely on document.activeElement.\n  // See https://github.com/unpoly/unpoly/issues/103\n  up.on('up:click', submitButtonSelector, function (event, button) {\n    // Don't mess with focus unless we know that we're going to handle the form.\n    // https://groups.google.com/g/unpoly/c/wsiATxepVZk\n    const form = getForm(button)\n    if (form && isSubmittable(form)) {\n      button.focus()\n    }\n  })\n\n  /*-\n  Watches form fields and runs a callback when a value changes.\n\n  While you can also listen to a [standard `input` event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event),\n  using `up.watch()` comes with a number of quality of live improvements:\n\n  - The callback only runs when a value was actually changed. Multiple events resulting in the same value will only run the callback once.\n  - The callback's execution frequency can be [debounced](/watch-options#debouncing-callbacks)\n  - Guarantees that [only one async callback is running concurrently](#async-callbacks).\n\n  The unobtrusive variant of this is the `[up-watch]` attribute.\n\n  ### Example\n\n  The following would print to the console whenever an input field changes:\n\n  ```js\n  up.watch('input.query', function(value) {\n    console.log('Query is now', value)\n  })\n  ```\n\n  ### Callback arguments\n\n  The callback may accept up to three arguments:\n\n    ```js\n  up.watch('input.query', function(value, name, options) {\n    console.log('Query is now', value)\n  })\n  ```\n\n  The three arguments are:\n\n  | Name       | Type      | Description                           |\n  | ---------- | --------- | ------------------------------------- |\n  | `value`    | `string`  | The changed field value               |\n  | `name`     | `string`  | The `[name]` of the changed field     |\n  | `options`  | `Object`  | Render options for the change (`{ origin, feedback }`) |\n\n  ### Watching multiple fields\n\n  Instead of a single form field, you can also pass multiple fields,\n  a `<form>` or any container that contains form fields.\n  The callback will be run if any of the given fields change:\n\n  ```js\n  up.watch('form', function(value, name) {\n    console.log('The value of %o is now %o', name, value)\n  })\n  ```\n\n  ### Async callbacks\n\n  When your callback does async work (like fetching data over the network) it should return a promise\n  that settles once the work concludes:\n\n  ```js\n  up.watch('input.query', function(value, name, options) {\n    let url = '/search?query=' + escapeURIFragment(value)\n    return up.render('.results', { url, ...options }) // mark-phrase \"return\"\n  })\n  ```\n\n  Unpoly will guarantee that only one async callback is running concurrently.\n  If the form is changed while an async callback is still processing, Unpoly will wait\n  until the callback concludes and then run it again with the latest field values.\n\n  ### Batching changes\n\n  You may also pass the `{ batch: true }` option to receive all\n  changes since the last callback in a single object:\n\n  ```js\n  up.watch('form', { batch: true }, function(diff, options) {\n    for (let name in diff) {\n      let value = diff[name]\n      console.log('The value of %o is now %o', name, value)\n    }\n  })\n  ```\n\n  @function up.watch\n  @param {Element|jQuery} element\n    The form field that will be watched.\n\n    You can pass a field, a `<form>` or any container that contains form fields.\n    The callback will be run if any of the contained fields change.\n  @param {boolean} [options.batch=false]\n    If set to `true`, the `onChange` callback will receive multiple\n    detected changes in a [single diff object as its argument](#batching-changes).\n\n    The object's keys are the names of the changed fields.\n    The object's values are the values of the changed fields.\n\n    @experimental\n  @param {string|Array<string>} [options.event='input']\n    The types of event to observe.\n\n    See [which events to watch](/watch-options#which-events-to-watch).\n  @param {number} [options.delay]\n    The number of miliseconds to wait between an observed event and running the callback.\n\n    See [debouncing callbacks](/watch-options#debouncing-callbacks).\n  @param {boolean|string} [options.disable]\n    Whether to disable fields while an async callback is running.\n\n    See [disabling fields while working](/watch-options#disabling-fields-while-working).\n  @param {Function(value, name, options): Promise|undefined} callback\n    The callback to run when the field's value changes.\n\n    An async callback function should return a promise that settles when\n    the callback completes.\n  @return {Function()}\n    A destructor function that unsubscribes the watcher when called.\n\n    Watching will stop automatically when the form is [destroyed](/up.destroy).\n  @stable\n  */\n  function watch(root, ...args) {\n    root = up.element.get(root) // unwrap jQuery\n    const callback = u.extractCallback(args) || watchCallbackFromElement(root) || up.fail('No callback given for up.watch()')\n    let options = u.extractOptions(args)\n\n    const watcher = new up.FieldWatcher(root, options, callback)\n\n    watcher.start()\n\n    return () => watcher.stop()\n  }\n\n  function watchCallbackFromElement(element) {\n    let rawCallback = element.getAttribute('up-watch')\n    if (rawCallback) {\n      return up.NonceableCallback.fromString(rawCallback).toFunction('value', 'name').bind(element)\n    }\n  }\n\n  /*-\n  Automatically submits a form when a field changes.\n\n  The unobtrusive variant of this is the `[up-autosubmit]` attribute.\n\n  @function up.autosubmit\n  @param {string|Element|jQuery} target\n    The field or form to watch.\n  @param {Object} [options]\n    See options for [`up.watch()`](/up.watch#parameters).\n  @return {Function()}\n    A destructor function that stops auto-submitting when called.\n\n    Auto-submitting will stop automatically when the observed fields are removed from the DOM.\n  @stable\n  */\n  function autosubmit(target, options = {}) {\n    const onChange = (_diff, renderOptions) => submit(target, renderOptions)\n    return watch(target, { options, batch: true }, onChange)\n  }\n\n  function getGroupSelectors() {\n    return up.migrate.migratedFormGroupSelectors?.() || config.groupSelectors\n  }\n\n  /*-\n  Returns the [form group](/up-form-group) for the given element.\n\n  By default a form group is a `<fieldset>` element or any container with an `[up-form-group]` attribute.\n  This can be configured in `up.form.config.groupSelectors`.\n\n  Form groups may be nested. This function returns the [closest](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest) group around the given element.\n  If no closer group is found, the `<form>` element is returned.\n\n  ### Example\n\n  This is a form with two groups:\n\n  ```html\n  <form>\n    <fieldset>\n      <label for=\"email\">E-mail</label>\n      <input type=\"text\" name=\"email\" id=\"email\">\n    </fieldset>\n    <fieldset>\n      <label for=\"password\">Password</label>\n      <input type=\"text\" name=\"password\" id=\"password\">\n    </fieldset>\n  </form>\n  ```\n\n  We can now retrieve the form group for any element in the form:\n\n  ```js\n  let passwordField = document.querySelector('#password')\n  let group = up.form.group(passwordField) // returns second <fieldset>\n  ```\n\n  @function up.form.group\n  @param {Element} element\n    The element for which to find a form group.\n  @return {Element|undefined}\n    The closest form group around the given element.\n\n    If no better group can be found, the `form` element is returned.\n  @experimental\n  */\n  function findGroup(field) {\n    return findGroupSolution(field).element\n  }\n\n  /*-\n  Marks this element as a from group, which (usually) contains a label, input and error message.\n\n  You are not required to use form groups to [submit forms through Unpoly](/form-up-submit).\n  However, structuring your form into groups will help Unpoly to make smaller changes to the DOM when\n  working with complex form. For instance, when [validating](/validation#validating-after-changing-a-field) a field,\n  Unpoly will re-render the [closest](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)\n  form group around that field.\n\n  By default Unpoly will also consider a `<fieldset>` or `<label>` around a field to be a form group.\n  You can configure this in `up.form.config.groupSelectors`.\n\n  ### Example\n\n  Many apps use form groups to wrap a label, input field, error message and help text:\n\n  ```html\n  <form up-validate>\n    <div up-form-group>\n      <label for=\"email\">E-mail</label>\n      <input type=\"text\" name=\"email\" id=\"email\">\n    </div>\n    <div up-form-group>\n      <label for=\"password\">Password</label>\n      <input type=\"text\" name=\"password\" id=\"password\">\n      <div class=\"error\">Must be 8 characters or longer</div>\n    </div>\n  </form>\n  ```\n\n  The form above also uses the `[up-validate]` attribute to [validate](/validation#validating-after-changing-a-field)\n  form groups after changing a field:\n\n  - After changing the *E-Mail* field, Unpoly will validate the `[up-form-group]:has(#email)` target.\n  - After changing the *Password* field, Unpoly will validate the `[up-form-group]:has(#password)` target.\n\n  @selector [up-form-group]\n  @stable\n  */\n\n  function findGroupSolution(field) {\n    return u.findResult(getGroupSelectors(), function(groupSelector) {\n      let group = field.closest(groupSelector)\n      if (group) {\n        let goodDerivedGroupTarget = up.fragment.tryToTarget(group)\n        let goodDerivedFieldTarget = up.fragment.tryToTarget(field)\n        // Most forms have multiple groups with no identifying attributes, e.g. <div up-form-group>.\n        // Hence we use a :has() selector to identify the form group by the selector\n        // of the contained field, which usually has an identifying [name] or [id] attribute.\n        let groupHasFieldTarget = goodDerivedFieldTarget && (group !== field) && `${groupSelector}:has(${goodDerivedFieldTarget})`\n        let target = goodDerivedGroupTarget || groupHasFieldTarget\n        if (target) {\n          return {\n            target,\n            element: group,\n            origin: field\n          }\n        }\n      }\n    })\n  }\n\n\n  /*-\n  Render a new form state from its current field values, to show validation errors or\n  update [dependent fields](/dependent-fields).\n\n  Typical use cases are to [show validation errors](/validation#validating-after-changing-a-field)\n  after a field was changed or to update forms where one field depends on the value of another.\n\n  `up.validate()` submits the given element's form with an additional `X-Up-Validate`\n  HTTP header. Upon seeing this header, the server is expected to validate (but not commit)\n  the form submission and render a new form state. See [this example](/up-validate#backend-protocol)\n  for control flow on the server.\n\n  To automatically update a form after a field was changed, use the the `[up-validate]` attribute.\n  You may combine `[up-validate]` and `up.validate()` within the same form. Their updates\n  will be [batched together](#batching) to prevent race conditions.\n\n  ### Controlling what is updated\n\n  `up.validate()` always submits the entire form with its current field values to the form's\n  `[action]` path. Typically only a fragment of the form is updated with the response.\n  This minimizes the chance for loss of transient state like scroll positions, cursor selection\n  or user input while the request is in flight.\n\n  Passing a form field will update the closest [form group](/up-form-group) around the field:\n\n  ```js\n  up.validate('input[name=email]')\n  ```\n\n  If the given field has an `[up-validate]` attribute with a custom target selector, that selector\n  will be updated instead.\n\n  You may also update arbitrary elements within the form:\n\n  ```js\n  up.validate('.preview')\n  ```\n\n  You may also choose to re-render an entire form.\n  In this case it is recommended to [disable fields](/disabling-forms) while rendering.\n  This prevents the loss of user input made while the request is in flight:\n\n  ```js\n  up.validate('form', { disable: true })\n  ```\n\n  ### Multiple validations are batched together {#batching}\n\n  In order to prevent race conditions, multiple calls of `up.validate()` within the same\n  [task](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/) are consolidated into a single request.\n  For instance, the following will send a single request [targeting](/targeting-fragments) `.foo, .bar`:\n\n  ```js\n  up.validate('.foo')\n  up.validate('.bar')\n  ```\n\n  Validating the same target multiple times will also only send a single request.\n  For instance, the following will send a single request targeting `.qux`:\n\n  ```js\n  up.validate('.qux')\n  up.validate('.qux')\n  ```\n\n  When one of your target elements is an ancestor of another target, Unpoly will only request the ancestor.\n  For instance, the following would send a single request targeting `form`:\n\n  ```js\n  up.validate('input[name=email]')\n  up.validate('form')\n  ```\n\n  Also see [preventing race conditions](/dependent-fields#preventing-race-conditions).\n\n  @function up.validate\n  @param {string|Element|jQuery} element\n    The field or fragment that should be rendered on the server.\n\n    See [controlling what is updated](#controlling-what-is-updated).\n  @param {string} [options.target=element]\n    The [target selector](/targeting-fragments) to render.\n\n    By default the given `element` will be rendered.\n    If `element` is a field, its form group or `[up-validate]` target will be rendered.\n  @param {string|Element|jQuery} [options.formGroup = true]\n    Whether, when a field is given as `element`,\n    the field's closest [form group](/up-form-group) should be targeted.\n  @param {Element} [options.origin=element]\n    The element or field that caused this validation pass.\n\n    The names of all fields contained within the origin will be passed as an `X-Up-Validate` request header.\n  @param {string|Array<string>} [options.event='change']\n    The event types to observe.\n\n    See [which events to watch](/watch-options#which-events-to-watch).\n  @param {string|Element|jQuery} [options.delay]\n    The number of miliseconds to wait between an observed event and validating.\n\n    See [debouncing callbacks](/watch-options#debouncing-callbacks).\n  @param {string|Element|jQuery} [options.disable]\n    Whether to disable fields while waiting for the server response.\n\n    See [disabling fields while working](/watch-options#disabling-fields-while-working).\n  @param {string|Element|jQuery} [options.feedback]\n    Whether to show navigation feedback while waiting for the server response.\n\n    See [showing feedback while working](/watch-options#showing-feedback-while-working).\n  @param {Object} [options.data]\n    Overrides properties from the new fragment's `[up-data]`\n    with the given [data object](/data).\n  @param {boolean} [options.keepData]\n    [Preserve](/data#preserving-data-through-reloads) the reloaded fragment's [data object](/data).\n\n    Properties from the new fragment's `[up-data]`  are overridden with the old fragment's `[up-data]`.\n  @param {Object} [options]\n    Additional [render options](/up.render#parameters) for the validation request.\n  @return {up.RenderJob}\n    A promise that fulfills when the server-side validation is received\n    and the form was updated.\n\n    The promise rejects when one of the following conditions occur:\n\n    - the form element was [aborted](/aborting-requests)\n    - the server sends an error status\n    - there is a [network issue](/network-issues)\n    - [targets](/targeting-fragments) could not be matched\n  @stable\n  */\n  function validate(...args) {\n    let options = parseValidateArgs(...args)\n    let validator = up.FormValidator.forElement(options.origin)\n    return validator.validate(options)\n  }\n\n  /*-\n  Parses the many signatures of `up.validate()`.\n\n  See specs for examples.\n\n  @function up.form.parseValidateArgs\n  @internal\n  */\n  function parseValidateArgs(originOrTarget, ...args) {\n    const options = u.extractOptions(args)\n\n    if (options.origin) {\n      options.target ||= up.fragment.toTarget(originOrTarget)\n    } else {\n      options.origin ||= up.fragment.get(originOrTarget)\n    }\n\n    return options\n  }\n\n  /*-\n  This event is emitted before a form is being [validated](/up-validate).\n\n  @event up:form:validate\n  @param {Element} event.target\n    The form that is being validated.\n  @param {up.Params} event.params\n    The [form parameters](/up.Params) that will be sent as the form's request payload.\n\n    Listeners may inspect and modify params before they are sent.\n    Note that the request may be a [batch of multiple validations](/up.validate#batching).\n  @param {Element} event.fields\n    The form fields that triggered this validation pass.\n\n    When multiple fields are validating within the same [task](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/),\n    Unpoly will make a single validation request with multiple targets.\n\n    @experimental\n  @param {Object} event.renderOptions\n    An object with [render options](/up.render#parameters) for the fragment update\n    that will show the validation results.\n\n    Listeners may inspect and modify these options.\n    Note that the request may be a [batch of multiple validations](/up.validate#batching).\n  @param event.preventDefault()\n    Prevents the validation request from being sent to the server.\n  @stable\n  */\n\n  function switcherValues(field) {\n    let value\n    let meta\n\n    if (field.matches('input[type=checkbox]')) {\n      if (field.checked) {\n        value = field.value\n        meta = ':checked'\n      } else {\n        meta = ':unchecked'\n      }\n    } else if (field.matches('input[type=radio]')) {\n      const form = getScope(field)\n      const groupName = field.getAttribute('name')\n      const checkedButton = form.querySelector(`input[type=radio]${e.attrSelector('name', groupName)}:checked`)\n      if (checkedButton) {\n        meta = ':checked'\n        value = checkedButton.value\n      } else {\n        meta = ':unchecked'\n      }\n    } else {\n      value = field.value\n    }\n\n    const values = []\n    if (u.isPresent(value)) {\n      values.push(value)\n      values.push(':present')\n    } else {\n      values.push(':blank')\n    }\n    if (u.isPresent(meta)) {\n      values.push(meta)\n    }\n    return values\n  }\n\n  /*-\n  Shows or hides a selector depending on the value of a form field.\n\n  See `[up-switch]` for more documentation and examples.\n\n  This function does not currently have a very useful API outside\n  of our use for `up-switch`'s UJS behavior, that's why it's currently\n  still marked `@internal`.\n\n  @function up.form.switchTargets\n  @param {Element} switcher\n  @param {string} [options.target]\n    The target selectors to switch.\n    Defaults to an `[up-switch]` attribute on the given field.\n  @internal\n  */\n  function switchTargets(switcher, options = {}) {\n    const targetSelector = options.target || options.target || switcher.getAttribute('up-switch')\n    const form = getScope(switcher)\n    targetSelector || up.fail(\"No switch target given for %o\", switcher)\n    const fieldValues = switcherValues(switcher)\n\n    for (let target of up.fragment.all(form, targetSelector)) {\n      switchTarget(target, fieldValues)\n    }\n  }\n\n  const switchTarget = up.mockable(function(target, fieldValues) {\n    let show\n    fieldValues ||= switcherValues(findSwitcherForTarget(target))\n\n    let hideValues = target.getAttribute('up-hide-for')\n    if (hideValues) {\n      hideValues = parseSwitchTokens(hideValues)\n      show = u.intersect(fieldValues, hideValues).length === 0\n    } else {\n      let showValues = target.getAttribute('up-show-for')\n      // If the target has neither [up-show-for] or [up-hide-for] attributes,\n      // assume the user wants the target to be visible whenever anything\n      // is checked or entered.\n      showValues = showValues ? parseSwitchTokens(showValues) : [':present', ':checked']\n      show = u.intersect(fieldValues, showValues).length > 0\n    }\n\n    e.toggle(target, show)\n    target.classList.add('up-switched')\n  })\n\n  function parseSwitchTokens(str) {\n    return u.parseTokens(str, { json: true })\n  }\n\n  function findSwitcherForTarget(target) {\n    const form = getScope(target)\n    const switchers = form.querySelectorAll('[up-switch]')\n    const switcher = u.find(switchers, function(switcher) {\n      const targetSelector = switcher.getAttribute('up-switch')\n      return target.matches(targetSelector)\n    })\n    return switcher || up.fail('Could not find [up-switch] field for %o', target)\n  }\n\n  function getForm(elementOrSelector, options = {}) {\n    const element = up.fragment.get(elementOrSelector, options)\n\n    // Element#form will also work if the element is outside the form with an [form=form-id] attribute\n    return element.form || element.closest('form')\n  }\n\n  // Alternative to getForm() which falls back to the layer element for elements without a form.\n  // Only works with elements. Does not support a selector as a first argument.\n  function getScope(element, options) {\n    return getForm(element, options) || up.layer.get(element).element\n  }\n\n  function focusedField() {\n    return u.presence(document.activeElement, isField)\n  }\n\n  /*-\n  Returns whether the given form will be [submitted](/up.follow) through Unpoly\n  instead of making a full page load.\n\n  By default Unpoly will follow forms if the element has\n  one of the following attributes:\n\n  - [`[up-submit]`](/form-up-submit)\n  - [`[up-target]`](/a-up-follow#up-target)\n  - [`[up-layer]`](/a-up-follow#up-layer)\n  - [`[up-transition]`](/a-up-transition)\n\n  To consider other selectors to be submittable, see `up.form.config.submitSelectors`.\n\n  @function up.form.isSubmittable\n  @param {Element|jQuery|string} form\n    The form to check.\n  @stable\n  */\n  function isSubmittable(form) {\n    form = up.fragment.get(form)\n    return config.matches(form, 'submitSelectors')\n  }\n\n  /*-\n  Submits this form via JavaScript and updates a fragment with the server response.\n\n  The server must render an element matching the [target selector](/targeting-fragments) from the `[up-target]` attribute.\n  A matching element in the current page is then swapped with the new element from the server response.\n  The response may include other HTML (even an entire HTML document), but only the matching element will be updated.\n\n  The programmatic variant of this is the [`up.submit()`](/up.submit) function.\n\n  ### Example\n\n  ```html\n  <form method=\"post\" action=\"/users\" up-submit up-target=\".content\">\n    ...\n  </form>\n  ```\n\n  ### Handling validation errors\n\n  When the form could not be submitted due to invalid user input,\n  Unpoly can re-render the form with validation errors.\n\n  See [validating forms](/validation) for details and examples.\n\n\n  ### Showing that the form is processing\n\n  See [navigation feedback](/up.feedback) and [disabling form controls while working](/disabling-forms).\n\n  ### Short notation\n\n  You may omit the `[up-submit]` attribute if the form has one of the following attributes:\n\n  - `[up-target]`\n  - `[up-layer]`\n  - `[up-transition]`\n\n  Such a form will still be submitted through Unpoly.\n\n  ### Handling all forms automatically\n\n  You can configure Unpoly to handle *all* forms on a page without requiring an `[up-submit]` attribute.\n\n  See [Handling all links and forms](/handling-everything).\n\n  @selector form[up-submit]\n\n  @params-note\n    All attributes for `a[up-follow]` may be used.\n\n  @param [up-target]\n    The [target selector](/targeting-fragments) to update for a successful form submission.\n\n  @param [up-fail-target]\n    The [target selector](/targeting-fragments) to update when the server responds with an error code.\n\n    Defaults to the form element itself.\n\n    @see failed-responses\n\n  @param [up-disable]\n    Whether to [disable form controls](/disabling-forms) while the form is submitting.\n\n  @stable\n  */\n\n  up.on('submit', config.selectorFn('submitSelectors'), function(event, form) {\n    // Users may configure up.form.config.submitSelectors.push('form')\n    // and then opt out individual forms with [up-submit=false].\n    if (event.defaultPrevented) return\n\n    up.event.halt(event, { log: true })\n    up.error.muteUncriticalRejection(submit(form))\n  })\n\n  /*-\n  Renders a new form state when a field changes, to show validation errors or\n  update [dependent fields](/dependent-fields).\n\n  When a form field with an `[up-validate]` attribute is changed, the form is submitted to the server\n  which is expected to render a new form state from its current field values.\n  The [form group](/up-form-group) around the changed field is updated with the server response.\n\n  This gives the user quick feedback whether their change is valid,\n  without the need to scroll for error messages or to backtrack to\n  fields completed earlier.\n\n  > [NOTE]\n  > `[up-validate]` is a tool to implement highly dynamic forms that must update\n  > *as the user is completing fields*.\\\n  > If you only need to [validate forms after submission](/validation#validating-after-submission),\n  > you don't need `[up-validate]`.\n\n  ### Marking fields for validation\n\n  Let's look at a standard registration form that asks for an e-mail and password.\n  The form is organized into [form groups](/up-form-group) of labels, inputs and\n  an optional error message:\n\n  ```html\n  <form action=\"/users\">\n\n    <fieldset>\n      <label for=\"email\">E-mail</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n    </fieldset>\n\n    <fieldset>\n      <label for=\"password\">Password</label>\n      <input type=\"password\" id=\"password\" name=\"password\">\n    </fieldset>\n\n    <button type=\"submit\">Register</button>\n\n  </form>\n  ```\n\n  We have some data constraints that we want to validate as the user is filling in fields:\n\n  - When the user changes the `email` field, we want to validate that the e-mail address\n    is formatted correctly and is still available.\n  - When the user changes the `password` field, we want to validate\n    the minimum password length.\n\n  If validation fails we want to show validation errors *as soon as the user blurs the field*.\n\n  We're going to render validation errors using the following HTML:\n\n    ```html\n  <form action=\"/users\">\n\n    <fieldset>\n      <label for=\"email\" up-validate>E-mail</label>\n      <input type=\"text\" id=\"email\" name=\"email\" value=\"foo@bar.com\">\n      <div class=\"error\">E-mail has already been taken!</div> <!-- mark-line -->\n    </fieldset>\n\n    <fieldset>\n      <label for=\"password\" up-validate>Password</label>\n      <input type=\"password\" id=\"password\" name=\"password\" value=\"secret\">\n      <div class=\"error\">Password is too short!</div> <!-- mark-line -->\n    </fieldset>\n\n  </form>\n  ```\n\n  We can implement this by giving both fields an `[up-validate]` attribute:\n\n  ```html\n  <form action=\"/users\">\n\n    <fieldset>\n      <label for=\"email\" up-validate>E-mail</label> <!-- mark-phrase \"up-validate\" -->\n      <input type=\"text\" id=\"email\" name=\"email\">\n    </fieldset>\n\n    <fieldset>\n      <label for=\"password\" up-validate>Password</label> <!-- mark-phrase \"up-validate\" -->\n      <input type=\"password\" id=\"password\" name=\"password\">\n    </fieldset>\n\n    <button type=\"submit\">Register</button>\n\n  </form>\n  ```\n\n  Whenever a field with `[up-validate]` changes, the form is submitted to its `[action]` path\n  with an additional `X-Up-Validate` HTTP header.\n\n  ### Backend protocol\n\n  When the user changes the `email` field in the registration form above,\n  the following request willbe sent:\n\n  ```http\n  POST /users HTTP/1.1\n  X-Up-Validate: email\n  X-Up-Target: fieldset:has(#email)\n  Content-Type: application/x-www-form-urlencoded\n\n  email=foo%40bar.com&password=secret\n  ```\n\n  Upon seeing an `X-Up-Validate` header, the server is expected to validate (but not commit)\n  the form submission and render a new form state from the request parameters.\n\n  This requires a change in the backend code that handles the form's `[action]` path.\n  Until now the backend only had to handle two cases:\n\n  1. The form was submitted with valid data. We create a new account and sign in the user.\n  2. The form submission failed due to an invalid email or password. We re-render the form with error messages.\n\n  A [Ruby on Rails](https://rubyonrails.org/) implementation would look like this:\n\n  ```ruby\n  class UsersController < ApplicationController\n\n    def create\n      # Instantiate model from request parameters\n      user_params = params.require(:user).permit(:email, :password)\n      @user = User.new(user_params)\n\n      if @user.save\n        # Form is submitted successfully\n        sign_in @user\n      else\n        # Submission failed\n        render 'form', status: :unprocessable_entity\n      end\n\n    end\n\n  end\n  ```\n\n  To honor the validation protocol, our backend needs to handle a third case:\n\n  <ol start=\"3\">\n    <li>When seeing an <code>X-Up-Validate</code> header, render a new form state from request parameters</li>\n  </ol>\n\n  In our example backend above, this change could look like this:\n\n  ```ruby\n  class UsersController < ApplicationController\n\n    def create\n      # Instantiate model from request parameters\n      user_params = params.require(:user).permit(:email, :password)\n      @user = User.new(user_params)\n\n      if request.headers['X-Up-Validate'] # mark-line\n        @user.validate # mark-line\n        render 'form' # mark-line\n      elsif @user.save\n        # Form is submitted successfully\n        sign_in @user\n      else\n        # Submission failed\n        render 'form', status: :unprocessable_entity\n      end\n\n    end\n\n  end\n  ```\n\n  > [TIP]\n  > If you're using Python with Django, you may find the [`django-forms-dynamic`](https://github.com/dabapps/django-forms-dynamic)\n  > package useful to implement this pattern.\n\n  The server is free to respond with any HTTP status code, regardless of the validation result.\n  Unpoly will always consider a validation request to be successful, even if the\n  server responds with a non-200 status code.\n\n  Upon seeing an `X-Up-Validate` hader, the server now renders a new state form from request parameters,\n  showing eventual validation errors and updating [dependent fields](/dependent-fields):\n\n  ```html\n  <form action=\"/users\">\n\n    <fieldset>\n      <label for=\"email\" up-validate>E-mail</label>\n      <input type=\"text\" id=\"email\" name=\"email\" value=\"foo@bar.com\">\n      <div class=\"error\">E-mail has already been taken!</div> <!-- mark-line -->\n    </fieldset>\n\n    <fieldset>\n      <label for=\"password\" up-validate>Password</label>\n      <input type=\"password\" id=\"password\" name=\"password\" value=\"secret\">\n      <div class=\"error\">Password is too short!</div> <!-- mark-line -->\n    </fieldset>\n\n  </form>\n  ```\n\n  ### How validation results are displayed\n\n  `[up-validate]` always submits the entire form with its current field values to the form's\n  `[action]` path. Typically only a fragment of the form is updated with the response.\n  This minimizes the chance for loss of transient state like scroll positions, cursor selection\n  or user input while the request is in flight.\n\n  By default Unpoly will only update the closest [form group](/up-form-group)\n  around the validating field. The [example above](#marking-fields-for-validation),\n  after changing the `email` field, only the `<fieldset>` around the field will be updated.\n\n  If the form is not structured into groups, the entire\n  form will be updated.\n\n  #### Updating a different fragment\n\n  If you don't want to update the field's form group, you can set the `[up-validate]`\n  attribute to any [target selector](/targeting-fragments):\n\n  ```html\n  <input type=\"text\" name=\"email\" up-validate=\".email-errors\"> <!-- mark-phrase \".email-errors\" -->\n  <div class=\"email-errors\"></div>\n  ```\n\n  You may also [update multiple fragments](/targeting-fragments#updating-multiple-fragments)\n  by separating their target selectors with a comma:\n\n  ```html\n  <input type=\"text\" name=\"email\" up-validate=\".email-errors, .base-errors\"> <!-- mark-phrase \".email-errors, .base-errors\" -->\n  ```\n\n  ### Updating dependent fields\n\n  The `[up-validate]` attribute is a useful tool to partially update a form\n  when one fields depends on the value of another field.\n\n  See [dependent fields](/dependent-fields) for more details and examples.\n\n\n  ### Validating while typing\n\n  @include validating-while-typing\n\n\n  ### Preventing race conditions\n\n  Custom dynamic form implementations will often exhibit race conditions, e.g. when the user\n  is quickly changing fields while requests are still in flight.\n  Such issues are solved with `[up-validate]`. The form will eventually show a consistent state,\n  regardless of how fast the user clicks or how slow the network is.\n\n  See [preventing race conditions](/dependent-fields#preventing-race-conditions) for more details.\n\n  ### Validating multiple fields\n\n  You can set `[up-validate]` on any element to validate *all contained fields* on change.\n\n  In the [example above](#marking-fields-for-validation),\n  instead of setting `[up-validate]` on each individual `<input>`, we can also set it on the `<form>`:\n\n  ```html\n  <form action=\"/users\" up-validate> <!-- mark-phrase \"up-validate\" -->\n\n    <fieldset>\n      <label for=\"email\" up-validate>E-mail</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n    </fieldset>\n\n    <fieldset>\n      <label for=\"password\" up-validate>Password</label>\n      <input type=\"password\" id=\"password\" name=\"password\">\n    </fieldset>\n\n    <button type=\"submit\">Register</button>\n\n  </form>\n  ```\n\n #### Validating radio buttons\n\n  Multiple radio buttons with the same `[name]` produce a single value for the form.\n\n  To watch radio buttons group, use the `[up-validate]` attribute on an\n  element that contains all radio button elements with a given name:\n\n  ```html\n  <fieldset up-validate>\n    <input type=\"radio\" name=\"format\" value=\"html\"> HTML format\n    <input type=\"radio\" name=\"format\" value=\"pdf\"> PDF format\n    <input type=\"radio\" name=\"format\" value=\"txt\"> Text format\n  </fieldset>\n  ```\n\n  ### Programmatic validation\n\n  To update form fragments from your JavaScript, use the [`up.validate()`](/up.validate) function.\n  You may combine `[up-validate]` and `up.validate()` within the same form. Their updates\n  will be [batched together](/up.validate#batching) in order to\n  [prevent race conditions](/dependent-fields#preventing-race-conditions).\n\n\n  @selector [up-validate]\n  @param [up-validate]\n    The [target selector](/targeting-fragments) to update with the server response.\n\n    Defaults the closest [form group](/up-form-group) around the validating field.\n  @param [up-watch-event='change']\n    The event types to observe.\n\n    See [which events to watch](/watch-options#which-events-to-watch).\n  @param [up-watch-delay]\n    The number of miliseconds to wait between an observed event and validating.\n\n    See [debouncing callbacks](/watch-options#debouncing-callbacks).\n  @param [up-watch-disable]\n    Whether to [disable fields](/disabling-forms) while validation is running.\n\n    See [disabling fields while working](/watch-options#disabling-fields-while-working).\n  @param [up-watch-feedback]\n    Whether to give [navigation feedback](/up.feedback) while validating.\n\n    See [showing feedback while working](/watch-options#showing-feedback-while-working).\n  @stable\n  */\n  up.compiler(validatingFieldSelector, function(fieldOrForm) {\n    let validator = up.FormValidator.forElement(fieldOrForm)\n    validator.watchContainer(fieldOrForm)\n  })\n\n  function validatingFieldSelector() {\n    return config.fieldSelectors.map((selector) => `${selector}[up-validate], [up-validate] ${selector}`).join(', ')\n  }\n\n  /*-\n  Show or hide elements when a form field is set to a given value.\n\n  The observed elements can use [`[up-show-for]`](/up-show-for) and [`[up-hide-for]`](/up-hide-for)\n  attributes to indicate for which values they should be shown or hidden.\n\n  The `[up-switch]` element and its observed elements must be inside the same `<form>`.\n\n  ### Example: Select options\n\n  The controlling form field gets an `[up-switch]` attribute with a selector for the elements to show or hide:\n\n  ```html\n  <select name=\"advancedness\" up-switch=\".target\">\n    <option value=\"basic\">Basic parts</option>\n    <option value=\"advanced\">Advanced parts</option>\n    <option value=\"very-advanced\">Very advanced parts</option>\n  </select>\n  ```\n\n  The target elements can use [`[up-show-for]`](/up-show-for) and [`[up-hide-for]`](/up-hide-for)\n  attributes to indicate for which values they should be shown or hidden.\n\n  ```html\n  <div class=\"target\" up-show-for=\"basic\">\n    only shown for advancedness = basic\n  </div>\n\n  <div class=\"target\" up-hide-for=\"basic\">\n    hidden for advancedness = basic\n  </div>\n\n  <div class=\"target\" up-show-for=\"advanced very-advanced\">\n    shown for advancedness = advanced or very-advanced\n  </div>\n  ```\n\n  ### Example: Text field\n\n  The controlling `<input>` gets an `[up-switch]` attribute with a selector for the elements to show or hide:\n\n  ```html\n  <input type=\"text\" name=\"user\" up-switch=\".target\">\n\n  <div class=\"target\" up-show-for=\"alice\">\n    only shown for user alice\n  </div>\n  ```\n\n  You may also use the pseudo-values `:blank` to match an empty input value,\n  or `:present` to match a non-empty input value:\n\n  ```html\n  <input type=\"text\" name=\"user\" up-switch=\".target\">\n\n  <div class=\"target\" up-show-for=\":blank\">\n    please enter a username\n  </div>\n  ```\n\n  ### Example: Checkbox\n\n  For checkboxes you may match against the pseudo-values `:checked` or `:unchecked`:\n\n  ```html\n  <input type=\"checkbox\" name=\"flag\" up-switch=\".target\">\n\n  <div class=\"target\" up-show-for=\":checked\">\n    only shown when checkbox is checked\n  </div>\n\n  <div class=\"target\" up-show-for=\":unchecked\">\n    only shown when checkbox is unchecked\n  </div>\n  ```\n\n  You may also match against the `[value]` attribute of the checkbox element:\n\n  ```html\n  <input type=\"checkbox\" name=\"flag\" value=\"active\" up-switch=\".target\">\n\n  <div class=\"target\" up-show-for=\"active\">\n    only shown when checkbox is checked\n  </div>\n  ```\n\n  ### Example: Radio button\n\n  ```html\n  <input type=\"radio\" name=\"advancedness\" value=\"basic\" up-switch=\".target\">\n  <input type=\"radio\" name=\"advancedness\" value=\"advanced\" up-switch=\".target\">\n  <input type=\"radio\" name=\"advancedness\" value=\"very-advanced\" up-switch=\".target\">\n\n  <div class=\"target\" up-show-for=\"basic\">\n    only shown for advancedness = basic\n  </div>\n\n  <div class=\"target\" up-hide-for=\"basic\">\n    hidden for advancedness = basic\n  </div>\n\n  <div class=\"target\" up-show-for=\"advanced very-advanced\">\n    shown for advancedness = advanced or very-advanced\n  </div>\n  ```\n\n  ### Example: Values containing spaces\n\n  If your values might contain spaces, you may also serialize them as a JSON array:\n\n  ```html\n  <select name='advancedness' up-switch='.target'>\n    <option value='John Doe'>John Doe</option>\n    <option value='Jane Doe'>Jane Doe</option>\n    <option value='Max Mustermann'>Max Mustermann</option>\n  </select>\n\n  <div class='target' up-show-for='[\"John Doe\", \"Jane Doe\"]'>\n    You selected John or Jane Doe\n  </div>\n\n  <div class='target' up-hide-for='[\"Max Mustermann\"]'>\n    You selected Max Mustermann\n  </div>\n  ```\n\n  @selector [up-switch]\n  @param up-switch\n    A CSS selector for elements whose visibility depends on this field's value.\n  @stable\n  */\n\n  /*-\n  Only shows this element if an input field with `[up-switch]` has one of the given values.\n\n  See `[up-switch]` for more documentation and examples.\n\n  @selector [up-show-for]\n  @param [up-show-for]\n    A space-separated list of input values for which this element should be shown.\n\n    If your values might contain spaces, you may also serialize them as a JSON array.\n  @stable\n  */\n\n  /*-\n  Hides this element if an input field with `[up-switch]` has one of the given values.\n\n  See `[up-switch]` for more documentation and examples.\n\n  @selector [up-hide-for]\n  @param [up-hide-for]\n    A space-separated list of input values for which this element should be hidden.\n\n    If your values might contain spaces, you may also serialize them as a JSON array.\n  @stable\n  */\n  up.compiler('[up-switch]', (switcher) => {\n    switchTargets(switcher)\n  })\n\n  up.on('change', '[up-switch]', (_event, switcher) => {\n    switchTargets(switcher)\n  })\n\n  up.compiler('[up-show-for]:not(.up-switched), [up-hide-for]:not(.up-switched)', (element) => {\n    switchTarget(element)\n  })\n\n  /*-\n  Watches form fields and runs a callback when a value changes.\n\n  Only fields with a `[name]` attribute can be watched.\n\n  The programmatic variant of this is the [`up.watch()`](/up.watch) function.\n\n  ### Example\n\n  The following would run a log whenever the `<input>` changes:\n\n  ```html\n  <input name=\"query\" up-watch=\"console.log('New value', value)\">\n  ```\n\n  ### Callback context\n\n  The script given to `[up-watch]` runs with the following context:\n\n  | Name     | Type      | Description                           |\n  | -------- | --------- | ------------------------------------- |\n  | `this`   | `Element` | The changed form field                |\n  | `name`   | `Element` | The `[name]` of the changed field     |\n  | `value`  | `string`  | The new value of the changed field    |\n\n  ### Watching multiple fields\n\n  You can set `[up-watch]` on any element to observe all contained fields.\n  The `name` argument contains the name of the field that was changed:\n\n  ```html\n  <form>\n    <div up-watch=\"console.log(`New value of ${name} is ${value}`)\">\n      <input type=\"email\" name=\"email\">\n      <input type=\"password\" name=\"password\">\n    </div>\n\n    <!-- This field is outside the [up-watch] container and will not be watched -->\n    <input type=\"text\" name=\"screen-name\">\n  </form>\n  ```\n\n  You may also set `[up-watch]` on a `<form>` element to watch *all* fields in a form:\n\n  ```html\n  <form up-watch=\"console.log(`New value of ${name} is ${value}`)\">\n    <input type=\"email\" name=\"email\">\n    <input type=\"password\" name=\"password\">\n    <input type=\"text\" name=\"screen-name\">\n  </form>\n  ```\n\n  #### Watching radio buttons\n\n  Multiple radio buttons with the same `[name]` produce a single value for the form.\n\n  To watch radio buttons group, use the `[up-watch]` attribute on an\n  element that contains all radio button elements with a given name:\n\n  ```html\n  <div up-watch=\"console.log('New value is', value)\">\n    <input type=\"radio\" name=\"format\" value=\"html\"> HTML format\n    <input type=\"radio\" name=\"format\" value=\"pdf\"> PDF format\n    <input type=\"radio\" name=\"format\" value=\"txt\"> Text format\n  </div>\n  ```\n\n  ### Async callbacks\n\n  When your callback does async work (like fetching data over the network) it should return a promise\n  that settles once the work concludes:\n\n    ```html\n  <input name=\"query\" up-watch=\"return asyncWork()\">\n  ```\n\n  Unpoly will guarantee that only one async callback is running concurrently.\n  If the form is changed while an async callback is still processing, Unpoly will wait\n  until the callback concludes and then run it again with the latest field values.\n\n  @selector [up-watch]\n  @param up-watch\n    The code to run when any field's value changes.\n  @param [up-watch-event='input']\n    The type of event to watch.\n\n    See [which events to watch](/watch-options#which-events-to-watch).\n  @param [up-watch-delay]\n    The number of miliseconds to wait after a change before the code is run.\n\n    See [debouncing callbacks](/watch-options#debouncing-callbacks).\n  @param [up-watch-disable]\n    Whether to disable fields while an async callback is running.\n\n    See [disabling fields while working](/watch-options#disabling-fields-while-working).\n  @param [up-watch-feedback]\n    Whether to show navigation feedback while an async callback is running.\n\n    See [showing feedback while working](/watch-options#showing-feedback-while-working).\n  @stable\n  */\n\n  up.compiler('[up-watch]', (formOrField) => watch(formOrField))\n\n  /*-\n  Automatically submits a form when a field changes.\n\n  The programmatic variant of this is the [`up.autosubmit()`](/up.autosubmit) function.\n\n  ### Example\n\n  The following would automatically submit the form when the `query` field is changed:\n\n  ```html\n  <form method=\"GET\" action=\"/search\">\n    <input type=\"search\" name=\"query\" up-autosubmit>\n    <input type=\"checkbox\" name=\"archive\"> Include archived\n  </form>\n  ```\n\n  ### Auto-submitting multiple fields\n\n  You can set `[up-autosubmit]` on any element to submit the form when a contained field changes.\n\n  For instance, to auto-submit a form when any field changes, set the `[up-autosubmit]` on the `<form>` element:\n\n  ```html\n  <form method=\"GET\" action=\"/search\" up-autosubmit>\n    <input type=\"search\" name=\"query\">\n    <input type=\"checkbox\" name=\"archive\"> Include archived\n  </form>\n  ```\n\n  #### Auto-submitting radio buttons\n\n  Multiple radio buttons with the same `[name]` (a radio button group)\n  produce a single value for the form.\n\n  To auto-submit group of radio buttons, use the `[up-autosubmit]` attribute on an\n  element containing the entire button group:\n\n  ```html\n  <div up-autosubmit>\n    <input type=\"radio\" name=\"format\" value=\"html\"> HTML format\n    <input type=\"radio\" name=\"format\" value=\"pdf\"> PDF format\n    <input type=\"radio\" name=\"format\" value=\"txt\"> Text format\n  </div>\n  ```\n\n  @selector [up-autosubmit]\n  @param [up-watch-event='input']\n    The type of event to watch.\n\n    See [which events to watch](/watch-options#which-events-to-watch).\n  @param [up-watch-delay]\n    The number of miliseconds to wait after a change before submitting the form.\n\n    If the form element is [aborted](/aborting-requests) or\n    destroyed during the delay, the submission is canceled.\n\n    See [debouncing callbacks](/watch-options#debouncing-callbacks).\n  @stable\n  */\n  up.compiler('[up-autosubmit]', (formOrField) => autosubmit(formOrField))\n\n  return {\n    config,\n    submit,\n    submitOptions,\n    destinationOptions,\n    watchOptions,\n    isSubmittable,\n    watch,\n    validate,\n    autosubmit,\n    fieldSelector,\n    fields: findFields,\n    isField,\n    submitButtons: findSubmitButtons,\n    focusedField,\n    switchTarget,\n    disableWhile,\n    disable: disableContainer,\n    group: findGroup,\n    groupSolution: findGroupSolution,\n    groupSelectors: getGroupSelectors,\n    get: getForm,\n    getScope,\n  }\n})()\n\nup.submit = up.form.submit\nup.watch = up.form.watch\nup.autosubmit = up.form.autosubmit\nup.validate = up.form.validate\n", "/*-\nNavigation feedback\n===================\n\nThe `up.feedback` module adds useful CSS classes to fragments while they are loading over the network.\n\nBy styling these classes you can provide instant feedback to user interactions,\nimproving the perceived speed of your interface.\n\n\n### Example\n\nLet's say we have an `<nav>` element with two links, pointing to `/foo` and `/bar` respectively:\n\n```html\n<nav>\n  <a href=\"/foo\" up-follow>Foo</a>\n  <a href=\"/bar\" up-follow>Bar</a>\n</nav>\n```\n\nBy giving the navigation bar the `[up-nav]` attribute, links pointing to the current browser address are highlighted\nas we navigate through the site.\n\nWhile the current URL is `/foo`, the first link is automatically marked with an [`.up-current`](/a.up-current) class.\nWe also assign an [`[aria-current]`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current) attribute\nto convey the highlighted link to assistive technologies:\n\n```html\n<nav up-nav>\n  <a href=\"/foo\" up-follow class=\"up-current\" aria-current=\"page\">Foo</a>\n  <a href=\"/bar\" up-follow>Bar</a>\n</nav>\n```\n\nWhen the user clicks on the `/bar` link, the link will receive the `.up-active` class while it is waiting\nfor the server to respond. The [targeted](/targeting-fragments) fragment (the `<main>` element) gets the `.up-loading` class:\n\n```\n<nav up-nav>\n  <a href=\"/foo\" up-follow class=\"up-current\" aria-current=\"page\">Foo</a>\n  <a href=\"/bar\" up-follow class=\"up-active\">Bar</a>\n</div>\n\n<main class=\"up-loading\">\n  Foo content\n</main>\n```\n\nOnce the response is received the `.up-active` and `.up-loading` classes are removed.\nSince the new URL is `/bar`, the [`.up-current`](/a.up-current) class has been moved to the \"Bar\" link.\n\n```html\n<nav up-nav>\n  <a href=\"/foo\" up-follow>Foo</a>\n  <a href=\"/bar\" up-follow class=\"up-current\" aria-current=\"page\">Bar</a>\n</nav>\n\n<main>\n  Bar content\n</main>\n```\n\n### Enabling navigation feedback\n\nNavigation feedback is enabled per default when [navigating](/navigation).\n\nWhen rendering without navigation, you may enable feedback by setting an\n[`[up-feedback]`](/a-up-follow#up-feedback) attribute or by passing a\n[`{ feedback }`](/up.render#options.feedback) option:\n\n```js\nup.render('.preview', { url: '/preview', feedback: true })\n```\n\nWhen watching fields you may [show navigation feedback](/watch-options#showing-feedback-while-working)\nwhile an async callback is running.\n\n\n@see [up-nav]\n@see a.up-current\n@see .up-active\n@see .up-loading\n\n@module up.feedback\n*/\nup.feedback = (function() {\n\n  const u = up.util\n  const e = up.element\n\n  /*-\n  Sets default options for this package.\n\n  @property up.feedback.config\n\n  @param {Array<string>} [config.currentClasses]\n    An array of classes to set on [links that point the current location](/a.up-current).\n\n  @param {Array<string>} [config.navSelectors]\n    An array of CSS selectors that match [navigation components](/up-nav).\n\n  @stable\n  */\n  const config = new up.Config(() => ({\n    currentClasses: ['up-current'],\n    navSelectors: ['[up-nav]', 'nav'],\n  }))\n\n  function reset() {\n    up.layer.root.feedbackLocation = null\n  }\n\n  const CLASS_ACTIVE = 'up-active'\n  const CLASS_LOADING = 'up-loading'\n  const SELECTOR_LINK = 'a, [up-href]'\n\n  function navSelector() {\n    return config.selector('navSelectors')\n  }\n\n  function normalizeURL(url) {\n    if (url) {\n      return u.normalizeURL(url, { trailingSlash: false, hash: false })\n    }\n  }\n\n  function linkURLs(link) {\n    // Check if we have computed the URLs before.\n    // Computation is sort of expensive (multiplied by number of links),\n    // so we cache the results in a link property\n    return link.upFeedbackURLs ||= new up.LinkFeedbackURLs(link)\n  }\n\n  function updateFragment(fragment) {\n    const layerOption = { layer: up.layer.get(fragment) }\n\n    if (up.fragment.closest(fragment, navSelector(), layerOption)) {\n      // If the new fragment is an [up-nav], or if the new fragment is a child of an [up-nav],\n      // all links in the new fragment are considered links that we need to update.\n      //\n      // Note that:\n      //\n      // - The [up-nav] element might not be part of this update.\n      //   It might already be in the DOM, and only a child was updated.\n      // - The fragment might be a link itself.\n      // - We do not need to update sibling links of fragment that have been processed before.\n      // - The fragment may be the <body> element which contains all other overlays.\n      //   But we only want to update the <body>.\n      const links = up.fragment.subtree(fragment, SELECTOR_LINK, layerOption)\n      updateLinks(links, layerOption)\n    } else {\n      updateLinksWithinNavs(fragment, layerOption)\n    }\n  }\n\n  function updateLinksWithinNavs(fragment, options) {\n    const navs = up.fragment.subtree(fragment, navSelector(), options)\n    const links = u.flatMap(navs, nav => e.subtree(nav, SELECTOR_LINK))\n    updateLinks(links, options)\n  }\n\n  function getNormalizedLayerLocation(layer) {\n    // Don't re-use layer.feedbackLocation since the current layer returns\n    // location.href in case someone changed the history using the pushState API.\n    return layer.feedbackLocation || normalizeURL(layer.location)\n  }\n\n  function updateLinks(links, options = {}) {\n    if (!links.length) { return }\n\n    const layer = options.layer || up.layer.get(links[0])\n\n    // An overlay might not have a { location } property, e.g. if it was created\n    // from local { content }. In this case we do not set .up-current.\n    let layerLocation = getNormalizedLayerLocation(layer)\n    if (layerLocation) {\n      for (let link of links) {\n        const isCurrent = linkURLs(link).isCurrent(layerLocation)\n        for (let currentClass of config.currentClasses) {\n          link.classList.toggle(currentClass, isCurrent)\n        }\n        e.toggleAttr(link, 'aria-current', 'page', isCurrent)\n      }\n    }\n  }\n\n  /*-\n  @function findActivatableArea\n  @param {string|Element|jQuery} element\n  @internal\n  */\n  function findActivatableArea(element) {\n    // Try to enlarge links that are expanded with [up-expand] on a surrounding container.\n    // Note that the expression below is not the same as e.closest(area, SELECTOR_LINK)!\n    return e.ancestor(element, SELECTOR_LINK) || element\n  }\n\n  /*-\n  While rendering [with navigation feedback](/up.feedback#enabling-navigation-feedback), the `.up-active` class is added to the [origin](/origin)\n  element that triggered the change.\n\n  The `.up-active` class is removed once the new content has been loaded and rendered.\n\n  ### Example\n\n  We have a link:\n\n  ```html\n  <a href=\"/foo\" up-follow>Foo</a>\n  ```\n\n  When the user clicks on the link, the link is assigned the `.up-active` class\n  while the request is loading:\n\n  ```html\n  <a href=\"/foo\" up-follow class=\"up-active\">Foo</a>\n  ```\n\n  Once the link destination has loaded and rendered, the `.up-active` class\n  is removed and the [`.up-current`](/a.up-current) class is added:\n\n  ```html\n  <a href=\"/foo\" up-follow class=\"up-current\" aria-current=\"page\">Foo</a>\n  ```\n\n  > [NOTE]\n  > Links do *not* need an `[up-nav]` container to get the `.up-active` class while loading.\n\n  ### Default origins\n\n  The origin element is set automatically for many actions, for example:\n\n  @include default-origins\n\n  When rendering from JavaScript, you may set the origin by passing an\n  [`{ origin }`](/origin#setting-the-origin-programmatically) option.\n\n  ### Styling active elements\n\n  To improve the perceived responsiveness of your user interface,\n  consider highlighting active links and submit buttons in your CSS:\n\n  ```css\n  a.up-active,\n  input[type=submit].up-active,\n  button[type=submit].up-active  {\n    outline: 2px solid blue;\n  }\n  ```\n\n  If you're looking to style the [targeted](/targeting-fragments) fragment, use the `.up-loading` class\n  instead.\n\n  @selector .up-active\n  @stable\n  */\n\n  /*-\n  While rendering [with navigation feedback](/up.feedback#enabling-navigation-feedback),\n  [targeted fragments](/targeting-fragments) are assigned the `.up-loading` class.\n\n  The `.up-loading` class is removed once the fragment was updated.\n\n  ### Example\n\n  We have a fragment that we want to update:\n\n  ```html\n  <div class=\"foo\">\n    Old content\n  </div>\n  ```\n\n  We now update the fragment with new content from the server:\n\n  ```js\n  up.render('.foo', { url: '/path', feedback: true })\n  ```\n\n  While the request is loading, the targeted element has the `.up-loading` class:\n\n  ```html\n  <div class=\"foo up-loading\">\n    Old content\n  </div>\n  ```\n\n  Once the response was rendered, the `.up-loading` class is removed:\n\n  ```html\n  <div class=\"foo\">\n    New content\n  </div>\n  ```\n\n  ### Styling targeted fragments\n\n  To improve the perceived responsiveness\n  of your user interface, consider styling loading fragments in your CSS:\n\n  ```css\n  .up-loading {\n    opacity: 0.6;\n  }\n  ```\n\n  If you're looking to style the link that targeted the fragment, use the\n  `.up-active` class instead.\n\n  @selector .up-loading\n  @stable\n  */\n\n  function showAroundRequest(request, options) {\n    if (!options.feedback) {\n      return\n    }\n\n    let clean = (fn) => u.always(request, fn)\n\n    let activeElement = getActiveElementFromRenderOptions(request)\n    if (activeElement) {\n      clean(e.addTemporaryClass(activeElement, CLASS_ACTIVE))\n    }\n\n    for (let fragment of request.fragments) {\n      clean(e.addTemporaryClass(fragment, CLASS_LOADING))\n    }\n  }\n\n  function getActiveElementFromRenderOptions(request) {\n    let activeElement = request.origin\n    if (activeElement) {\n      // If the link area was grown with [up-expand], we highlight the [up-expand] container.\n      return findActivatableArea(activeElement)\n    }\n  }\n\n  /*-\n  Marks this element as a navigation component, such as a menu or navigation bar.\n\n  When a link within an `[up-nav]` element points to [its layer's location](/up.layer.location),\n  it is assigned the [`.up-current`](/a.up-current) class. When the browser navigates to another location, the class is removed automatically.\n\n  You may also assign `[up-nav]` to an individual link instead of an navigational container.\n\n  Standard [`<nav>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav) elements are always\n  navigational containers and do not need an `[up-nav]` attribute.\n  You can configure additional selectors to automatically match your navigation components in `up.feedback.config.navSelectors`.\n\n\n  ### Example\n\n  Let's take a simple menu with two links. The menu has been marked with the `[up-nav]` attribute:\n\n  ```html\n  <div up-nav>\n    <a href=\"/foo\">Foo</a>\n    <a href=\"/bar\">Bar</a>\n  </div>\n  ```\n\n  If the browser location changes to `/foo`, the first link is marked as `.up-current`:\n\n  ```html\n  <div up-nav>\n    <a href=\"/foo\" class=\"up-current\">Foo</a>\n    <a href=\"/bar\">Bar</a>\n  </div>\n  ```\n\n  If the browser location changes to `/bar`, the first link automatically loses its `.up-current` class.\n  Now the second link is marked as `.up-current`:\n\n  ```html\n  <div up-nav>\n    <a href=\"/foo\">Foo</a>\n    <a href=\"/bar\" class=\"up-current\">Bar</a>\n  </div>\n  ```\n\n  ### When is a link \"current\"?\n\n  When no [overlay](/up.layer) is open, the current location is the URL displayed\n  in the browser's address bar. When the link in question is placed in an overlay,\n  the current location is the location of that overlay, even if that\n  overlay doesn't have [visible history](/up.Layer.prototype.history).\n\n  A link matches the current location (and is marked as `.up-current`) if it matches either:\n\n  - the link's `[href]` attribute\n  - the link's `[up-href]` attribute\n  - the URL pattern in the link's [`[up-alias]`](/a-up-alias) attribute\n\n  Any `#hash` fragments in the link's or current URLs will be ignored.\n\n  @selector [up-nav]\n  @stable\n  */\n\n  /*-\n  Links within `[up-nav]` may use the `[up-alias]` attribute to pass a [URL pattern](/url-patterns) for which they\n  should also be highlighted as [`.up-current`](/a.up-current).\n\n  ### Example\n\n  The link below will be highlighted with `.up-current` at both `/profile` and `/profile/edit` locations:\n\n  ```html\n  <div up-nav>\n    <a href=\"/profile\" up-alias=\"/profile/edit\">Profile</a>\n  </div>\n  ```\n\n  To pass more than one alternative URLs, use a [URL pattern](/url-patterns).\n\n  @selector a[up-alias]\n  @param up-alias\n    A [URL pattern](/url-patterns) with alternative URLs.\n  @stable\n  */\n\n  /*-\n  When a link within an `[up-nav]` element points to the current location, it is assigned the `.up-current` class.\n\n  To set other classes on current links, configure `up.feedback.config.currentClasses`.\n\n  See [`[up-nav]`](/up-nav) for more documentation and examples.\n\n  @selector a.up-current\n  @stable\n  */\n\n  function updateLayerIfLocationChanged(layer) {\n    const processedLocation = layer.feedbackLocation\n\n    const layerLocation = getNormalizedLayerLocation(layer.location)\n\n    // A history change might call this function multiple times,\n    // since we listen to both up:location:changed and up:layer:location:changed.\n    // We also don't want to unnecessarily reprocess nav links, which is expensive.\n    // For this reason we check whether the current location differs from\n    // the last processed location.\n    if (!processedLocation || (processedLocation !== layerLocation)) {\n      layer.feedbackLocation = layerLocation\n      updateLinksWithinNavs(layer.element, { layer })\n    }\n  }\n\n  function onBrowserLocationChanged() {\n    const frontLayer = up.layer.front\n\n    // We allow Unpoly-unaware code to use the pushState API and change the\n    // front layer in the process. See up.Layer.Base#location setter.\n    if (frontLayer.showsLiveHistory()) {\n      updateLayerIfLocationChanged(frontLayer)\n    }\n  }\n\n  // Even when the modal or popup does not change history, we consider the URLs of the content it displays.\n  up.on('up:location:changed', (_event) => { // take 1 arg to prevent data parsing\n    onBrowserLocationChanged()\n  })\n\n  up.on('up:fragment:compile', (_event, newFragment) => {\n    updateFragment(newFragment)\n  })\n\n  up.on('up:layer:location:changed', (event) => {\n    updateLayerIfLocationChanged(event.layer)\n  })\n\n  // The framework is reset between tests\n  up.on('up:framework:reset', reset)\n\n  return {\n    config,\n    showAroundRequest,\n    normalizeURL,\n  }\n})()\n", "/*-\nPassive updates\n===============\n\nThis package contains functionality to passively receive updates from the server.\n\n@see flashes\n\n@see [up-hungry]\n@see [up-poll]\n\n@module up.radio\n*/\nup.radio = (function() {\n\n  const e = up.element\n\n  /*-\n  Configures defaults for passive updates.\n\n  @property up.radio.config\n\n  @param {Array<string>} [config.hungrySelectors]\n    An array of CSS selectors that is replaced whenever a matching element is found in a response.\n    These elements are replaced even when they were not targeted directly.\n\n    By default this contains the `[up-hungry]` attribute.\n\n    The configured selectors will be used to find hungry elements in the current page.\n    For each matching element a target will be [derived](/target-derivation) from that\n    specific element. E.g. when you configure `up.radio.config.hungrySelectors.push('input')`,\n    a given input will be targeted with its derived selector (like `input[name=email]`).\n\n    For this to work hungry elements [must have a derivable target selector](/up-hungry#derivable-target-required).\n\n  @param {number} [config.pollInterval=30000]\n    The default [polling](/up-poll) interval in milliseconds.\n\n  @stable\n  */\n  const config = new up.Config(() => ({\n    hungrySelectors: ['[up-hungry]'],\n    pollInterval: 30000,\n  }))\n\n  function hungrySteps(renderOptions) {\n    let { useHungry, origin, layer: renderLayer } = renderOptions\n    let steps = { current: [], other: [] }\n\n    if (!useHungry) return steps\n\n    let hungrySelector = config.selector('hungrySelectors')\n\n    // When multiple steps target the same new selector, we're updating the layer\n    // that's closer to the layer of the render pass.\n    //\n    // In this case two steps will match the same { newElement }. Hence this case is\n    // not covered by step compression (which looks at { oldElement }).\n    const layerPreference = [renderLayer, ...renderLayer.ancestors, ...renderLayer.descendants]\n\n    for (let elementLayer of layerPreference) {\n      let hungries = up.fragment.all(elementLayer.element, hungrySelector, { layer: elementLayer })\n\n      for (let element of hungries) {\n        let selector = up.fragment.tryToTarget(element, { origin })\n        if (!selector) {\n          up.warn('[up-hungry]', 'Ignoring untargetable fragment %o', element)\n          continue\n        }\n\n        let ifLayer = e.attr(element, 'up-if-layer')\n        let applicableLayers = ifLayer ? up.layer.getAll(ifLayer, { baseLayer: elementLayer }) : [elementLayer]\n\n        let motionOptions = up.motion.motionOptions(element)\n\n        // We cannot emit up:fragment:hungry here as we don't know { newElement } yet.\n        let selectEvent = up.event.build('up:fragment:hungry', { log: false })\n        let selectCallback = e.callbackAttr(element, 'up-on-hungry', { exposedKeys: ['newFragment', 'renderOptions'] })\n\n        let step = {\n          selector,            // The selector for a single step is { selector }\n          oldElement: element, // The match on the current page\n          layer: elementLayer, // May be different from { layer } when we found an [up-hungry][up-if-layer=any]\n          origin,              // The { origin } passed into the fn. will be used to match { newElement } later.\n          ...motionOptions,    // The hungry element defines its own transition, duration, easing.\n          placement: 'swap',   // Hungry elements are always swapped, never appended\n          useKeep: true,       // Always honor [up-keep] in hungry elements. Set here because we don't inherit default render options.\n          maybe: true,         // Don't fail if we cannot match { newElement } later.\n          selectEvent,         // Used by up.ResponseDoc#selectStep()\n          selectCallback,      // Used by up.ResponseDoc#selectStep()\n          // The step also gets a reference to the original render options.\n          // Although these render options are not used to render the hungry step, it will be\n          // passed to up:fragment:hungry listener to e.g. only update hungry elements if the\n          // original render pass would update history.\n          originalRenderOptions: renderOptions,\n        }\n\n        if (applicableLayers.includes(renderLayer)) {\n          let list = renderLayer === elementLayer ? steps.current : steps.other\n          list.push(step)\n        }\n      }\n\n    }\n\n    // Remove nested steps on other layers.\n    // Note that `steps.current` is already compressed by up.Change.UpdateLayer once it's been mixed with\n    // the explicit target steps. So we're not doing it again here.\n    steps.other = up.fragment.compressNestedSteps(steps.other)\n\n    return steps\n  }\n\n  /*-\n  Before an `[up-hungry]` is added to a render pass, a event `up:fragment:hungry` is emitted on the element.\n\n  ### Preventing hungry elements from being updated\n\n  You may prevent the `up:fragment:hungry` event to exclude an hungry element from the render pass.\n  Use this to define arbitrary conditions for when an hungry element should be updated.\n\n  For example, the following would update an hungry element only for render passes that [update history](/updating-history):\n\n  ```js\n  element.addEventListener('up:fragment:hungry', function(event) {\n    if (!event.renderOptions.history) event.preventDefault()\n  })\n  ```\n\n  You may also define conditions based on the *new* element that a hungry element would be swapped with.\n  The following would skip an update if the new element has a class `.is-empty`:\n\n  ```js\n  element.addEventListener('up:fragment:hungry', function(event) {\n    if (event.newFragment.classList.contains('is-empty')) {\n      event.preventDefault()\n    }\n  })\n  ```\n\n  @event up:fragment:hungry\n  @param {Element} event.target\n    The hungry element that is about to be swapped.\n  @param {Element} event.newFragment\n    The fragment in the new content that this hungry element would be swapped with.\n  @param {Object} event.renderOptions\n    The [render options](/up.render#parameters) for the current render pass.\n  @param event.preventDefault()\n    Prevents the hungry element from being targeted in the current render pass.\n  @experimental\n  */\n\n  /*-\n  Elements with an `[up-hungry]` attribute are updated whenever the server\n  sends a matching element, even if the element isn't [targeted](/targeting-fragments).\n\n  Hungry elements are optional in the same way as `:maybe` targets.\n  When an `[up-hungry]` element does not match in the server response, the element will not be updated,\n  but no error is thrown.\n\n  ### Use cases\n\n  Common use cases for `[up-hungry]` are elements that live in the application layout,\n  outside of the fragment that is typically being targeted. Examples include:\n\n  - Unread message counters\n  - Page-specific subnavigation\n  - Account-wide notifications (e.g. about an expired credit card)\n\n  Instead of explicitly including such elements in every [target selector](/targeting-fragments)\n  (e.g. `.content, .unread-messages:maybe`) we can mark the element as `[up-hungry]`:\n\n  ```html\n  <div class=\"unread-messages\" up-hungry>\n    You have no unread messages\n  </div>\n  ```\n\n  An selector for the hungry element (`.unread-messages`) will be added to target selectors automatically.\n\n  ### Derivable target required {#derivable-target-required}\n\n  When an `[up-hungry]` fragment piggy-backs on another fragment update, Unpoly\n  will [derive a target selector](/target-derivation) for the hungry element.\n\n  For this to work the hungry element must have an [identifying attribute](/target-derivation#derivation-patterns),\n  like an `[id]` or a unique `[class]` attribute.\n  When no good target can be derived, the hungry element is excluded from the update.\n\n  ### Behavior with multiple layers\n\n  By default only hungry elements on the targeted [layer](/up.layer) are updated.\n\n  To match a hungry element when updating other layers, set an [`[up-if-layer]`](#up-if-layer) attribute.\n  For example, a hungry element with `[up-if-layer=\"subtree\"]` will piggy-back on render passes for both\n  its own layer and any overlay covering it.\n\n  ### Conflict resolution\n\n  When Unpoly renders new content, each element in that content can only be inserted once.\n  When multiple hungry elements conflict with each other or with the the [primary render target](/targeting-fragments),\n  that conflict is resolved using the following rules:\n\n  1. When both a [target selector](/targeting-fragments) and a hungry elements target the same fragment in the response, only the direct render target will be updated.\n  2. When hungry elements are nested within each other, the outmost fragment will be updated. Note that we recommend to not over-use the hungry mechanism, and prefer to explicit render targets instead.\n  3. When hungry elements on different layers target the same fragment in the response,\n     the layer closest to the rendering layer will be chosen.\n\n  ### Disabling\n\n  By default hungry fragments are processed for all updates of the current layer.\n  You can disable the processing of hungry fragments using one of the following methods:\n\n  - Rendering with an [`{ useHungry: false }`](/up.render#options.useHungry) option will not process any hungry fragments.\n  - Setting an [`[up-use-hungry=\"false\"]`](/a-up-follow#up-use-hungry) attribute on a link or form will not update hungry fragments when the element is activated.\n  - Preventing an `up:fragment:hungry` event will prevent the hungry fragment\n    from being updated.\n  - Calling `event.preventDefault()` in an `[up-on-hungry]` attribute handler will prevent the hungry fragment\n    from being updated.\n\n  @selector [up-hungry]\n  @param [up-if-layer='current']\n    Only piggy-back on updates on [layers](/up.layer) that match the given [layer reference](/layer-option).\n\n    Relative references like `'parent'` or `'child'` will be resolved in relation to the hungry element's layer.\n\n    To match a hungry element when updating one of multiple layers, separate the references using and `or` delimiter.\n    For example, `'current or child'` will match for updates on either the hungry element's layer, or\n    its direct child.\n\n    To match a hungry element when updating *any* layer, set this attribute to `'any'`.\n  @param [up-on-hungry]\n    Code to run before this element is included in a fragment update.\n\n    Calling `event.preventDefault()` will prevent the hungry fragment\n    from being updated.\n\n    For instance, you want to auto-update an hungry navigation bar,\n    but only if we're changing history entries:\n\n    ```html\n    <nav id=\"side-nav\" up-hungry up-on-hungry=\"if (!renderOptions.history) event.preventDefault()\">\n     ...\n    </nav>\n    ```\n\n    The code may use the variables `event` (of type `up:fragment:hungry`),\n    `this` (the hungry element), `newFragment` and `renderOptions`.\n\n  @param [up-transition]\n    The [animated transition](/a-up-transition) to apply when this element is updated.\n  @param [up-duration]\n    The duration of the transition or animation (in millisconds).\n\n  @param [up-easing]\n    The timing function that accelerates the transition or animation.\n\n    See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function)\n    for a list of available timing functions.\n  @stable\n  */\n\n  /*-\n  Starts [polling](/up-poll) the given element.\n\n  The given element does not need an `[up-poll]` attribute.\n\n  @function up.radio.startPolling\n  @param {Element} fragment\n    The fragment to reload periodically.\n  @param {number} [options.interval]\n    The reload interval in milliseconds.\n\n    Defaults to `up.radio.config.pollInterval`.\n  @param {string} [options.url]\n    The URL from which to reload the fragment.\n\n    Defaults to the closest `[up-source]` attribute of an ancestor element.\n  @param {string} [options.ifLayer='front']\n    Controls polling while the fragment's [layer](/up.layer) is covered by an overlay.\n\n    When set to `'front'`, polling will pause while the fragment's layer is covered by an overlay.\n    When the fragment's layer is uncovered, polling will resume.\n\n    When set to `'any'`, polling will continue on background layers.\n\n    @experimental\n  @stable\n  */\n  function startPolling(fragment, options = {}) {\n    up.FragmentPolling.forFragment(fragment).forceStart(options)\n  }\n\n  /*-\n  Stops [polling](/up-poll) the given element.\n\n  @function up.radio.stopPolling\n  @param {Element} fragment\n    The fragment to stop reloading.\n  @stable\n  */\n  function stopPolling(element) {\n    up.FragmentPolling.forFragment(element).forceStop()\n  }\n\n  function pollOptions(fragment, options = {}) {\n    const parser = new up.OptionsParser(fragment, options)\n    parser.number('interval', { default: config.pollInterval })\n    parser.string('ifLayer', { default: 'front' })\n    return options\n  }\n\n  /*-\n  Elements with an `[up-poll]` attribute are [reloaded](/up.reload) from the server periodically.\n\n  ### Example\n\n  Assume an application layout with an unread message counter.\n  You can use `[up-poll]` to refresh the counter every 30 seconds:\n\n  ```html\n  <div class=\"unread-count\" up-poll>\n    2 new messages\n  </div>\n  ```\n\n  ### Controlling the reload interval\n\n  You may set an optional `[up-interval]` attribute to set the reload interval in milliseconds:\n\n  ```html\n  <div class=\"unread-count\" up-poll up-interval=\"10000\">\n    2 new messages\n  </div>\n  ```\n\n  If the value is omitted, a global default is used. You may configure the default like this:\n\n  ```js\n  up.radio.config.pollInterval = 10000\n  ```\n\n  ### Controlling the source URL\n\n  The element will be reloaded from the URL from which it was originally loaded.\n\n  To reload from another URL, set an `[up-source]` attribute on the polling element:\n\n  ```html\n  <div class=\"unread-count\" up-poll up-source=\"/unread-count\">\n    2 new messages\n  </div>\n  ```\n\n  ### Controlling the target selector\n\n  A target selector will be [derived](/target-derivation) from the polling element.\n\n  ### Polling is paused in the background\n\n  By default polling will pause while the fragment's [layer](/up.layer) is covered by an overlay.\n  When the layer is uncovered, polling will resume.\n  To keep polling on background layers, set [`[up-if-layer=any]`](#up-if-layer).\n\n  Polling will also pause automatically while the browser tab is hidden.\n  When the browser tab is re-activated, polling will resume.\n\n  When at least one poll interval was spent paused in the background and the user\n  then returns to the layer or tab, Unpoly will immediately reload the fragment.\n  You can use this to load recent data when the user returns to your app after working on something else for a while. For example, the following\n  would reload your [main](/main) element after an absence of 5 minutes or more:\n\n  ```html\n  <main up-poll up-interval=\"300_000\">\n    ...\n  </main>\n   ```\n\n  ### Skipping updates on the client\n\n  Client-side code may skip an update by preventing an `up:fragment:poll` event\n  on the polling fragment.\n\n\n  ### Skipping updates on the server\n\n  When polling a fragment periodically we want to avoid rendering unchanged content.\n  This saves <b>CPU time</b> and reduces the <b>bandwidth cost</b> for a\n  request/response exchange to about 1 KB (1 packet).\n\n  See [Skipping rendering](/skipping-rendering) for more details and examples.\n\n  When an update is skipped, Unpoly will try to poll again after the configured interval.\n\n  ### Stopping polling\n\n  There are two reasons for polling to stop:\n\n  - The fragment from the server response no longer has an `[up-poll]` attribute.\n  - The fragment from the server response has an `[up-poll=\"false\"]` attribute.\n  - Client-side code has called `up.radio.stopPolling()` with the polling element.\n\n  @selector [up-poll]\n  @param [up-interval]\n    The reload interval in milliseconds.\n\n    Defaults to `up.radio.config.pollInterval`.\n  @param [up-if-layer='front']\n    Controls polling while the fragment's [layer](/up.layer) is covered by an overlay.\n\n    When set to `'front'`, polling will pause while the fragment's layer is covered by an overlay.\n    When the fragment's layer is uncovered, polling will resume.\n\n    When set to `'any'`, polling will continue on background layers.\n\n    @experimental\n  @param [up-keep-data]\n    [Preserve](/data#preserving-data-through-reloads) the polling fragment's\n    [data object](/data) through reloads.\n\n    @experimental\n  @param [up-source]\n    The URL from which to reload the fragment.\n\n    Defaults to the closest `[up-source]` attribute of an ancestor element.\n  @stable\n  */\n  up.compiler('[up-poll]:not([up-poll=false])', function(fragment) {\n    up.FragmentPolling.forFragment(fragment).onPollAttributeObserved()\n  })\n\n  /*-\n  This event is emitted before a [polling](/up-poll) fragment is reloaded from the server.\n\n  Listener may prevent the `up:fragment:poll` event to prevent the fragment from being reloaded.\n  Preventing the event will only skip a single update. It will *not* stop future polling.\n\n  @event up:fragment:poll\n  @param {Element} event.target\n    The polling fragment.\n  @param event.preventDefault()\n    Prevents the fragment from being reloaded.\n  @experimental\n  */\n\n  /*-\n  Use an `[up-flashes]` element to show confirmations, alerts or warnings.\n\n  ![A confirmation flash, an error flash and a warning flash](images/flashes.png){:width='480'}\n\n  You application layout should have an empty `[up-flashes]` element to indicate where flash messages\nshould be inserted:\n\n  ```html\n  <nav>\n    Navigation items ...\n  </nav>\n  <div up-flashes></div> <!-- mark-line -->\n  <main>\n    Main page content ...\n  </main>\n  ```\n\n  To render a flash message, include an `[up-flashes]` element in your response.\n  The element's content should be the messages you want to render:\n\n  ```html\n  <div up-flashes>\n    <strong>User was updated!</strong>\n  </div>\n\n  <main>\n    Main response content ...\n  </main>\n  ```\n\n  See [notification flashes](/flashes) for more details and examples.\n\n  @selector [up-flashes]\n  @param [up-transition]\n    The name of an [transition](/up.motion) to morph between the old and few notification flashes.\n  @param [up-duration]\n    The duration of the transition (in millisconds).\n\n  @param [up-easing]\n    The timing function that accelerates the transition.\n\n    See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function)\n    for a list of available timing functions.\n  @experimental\n  */\n  up.macro('[up-flashes]', function(fragment) {\n    e.setMissingAttrs(fragment, {\n      'up-hungry': '',\n      'up-if-layer': 'subtree',\n      'up-keep': '',\n      'role': 'alert',\n    })\n\n    fragment.addEventListener('up:fragment:keep', function(event) {\n      if (!e.isEmpty(event.newFragment)) event.preventDefault()\n    })\n  })\n\n  return {\n    config,\n    hungrySteps,\n    startPolling,\n    stopPolling,\n    pollOptions,\n  }\n})()\n", "/*\nPlay nice with Rails UJS\n========================\n\nUnpoly is mostly a superset of Rails UJS, so we convert attributes like `[data-method]` to `[up-method]\u00B4.\n*/\n(function() {\n\n  const e = up.element\n\n  function isRails() {\n    return window.Rails || // rails-ujs gem\n      window.jQuery?.rails // jquery-ujs gem\n  }\n\n  for (let feature of ['method', 'confirm']) {\n    const upAttribute = `up-${feature}`\n    const dataAttribute = `data-${feature}`\n\n    up.macro(`a[${dataAttribute}]`, function(link) {\n      if (isRails() && up.link.isFollowable(link)) {\n        e.setMissingAttr(link, upAttribute, link.getAttribute(dataAttribute))\n        // Remove the [data-...] attribute so links will not be\n        // handled a second time by Rails UJS.\n        link.removeAttribute(dataAttribute)\n      }\n    })\n  }\n\n})()\n", "require('./unpoly/namespace')\nrequire('./unpoly/mockable')\nrequire('./unpoly/util')\nrequire('./unpoly/error')\nrequire('./unpoly/migrate_stub')\nrequire('./unpoly/browser')\nrequire('./unpoly/element')\n\nrequire('./unpoly/errors/error')\nrequire('./unpoly/errors/not_implemented')\nrequire('./unpoly/errors/aborted')\nrequire('./unpoly/errors/cannot_match')\nrequire('./unpoly/errors/cannot_parse')\nrequire('./unpoly/errors/cannot_target')\nrequire('./unpoly/errors/offline')\n\nrequire('./unpoly/classes/record')\nrequire('./unpoly/classes/config')\nrequire('./unpoly/classes/log_config')\nrequire('./unpoly/classes/options_parser')\nrequire('./unpoly/classes/fifo_cache')\nrequire('./unpoly/classes/rect')\n\nrequire('./unpoly/classes/body_shifter')\nrequire('./unpoly/classes/change/change')\nrequire('./unpoly/classes/change/addition')\nrequire('./unpoly/classes/render_job')\nrequire('./unpoly/classes/change/removal')\nrequire('./unpoly/classes/change/destroy_fragment')\nrequire('./unpoly/classes/change/open_layer')\nrequire('./unpoly/classes/change/update_layer')\nrequire('./unpoly/classes/change/update_steps')\nrequire('./unpoly/classes/change/close_layer')\nrequire('./unpoly/classes/change/from_url')\nrequire('./unpoly/classes/change/from_response')\nrequire('./unpoly/classes/change/from_content')\nrequire('./unpoly/classes/compiler_pass')\nrequire('./unpoly/classes/css_transition')\nrequire('./unpoly/classes/destructor_pass')\nrequire('./unpoly/classes/event_emitter')\nrequire('./unpoly/classes/event_listener')\nrequire('./unpoly/classes/event_listener_group')\nrequire('./unpoly/classes/field_watcher')\nrequire('./unpoly/classes/form_validator')\nrequire('./unpoly/classes/focus_capsule')\nrequire('./unpoly/classes/fragment_processor')\nrequire('./unpoly/classes/fragment_finder')\nrequire('./unpoly/classes/fragment_focus')\nrequire('./unpoly/classes/fragment_polling')\nrequire('./unpoly/classes/fragment_scrolling')\nrequire('./unpoly/classes/layer/base')\nrequire('./unpoly/classes/layer/overlay')\nrequire('./unpoly/classes/layer/overlay_with_tether')\nrequire('./unpoly/classes/layer/overlay_with_viewport')\nrequire('./unpoly/classes/layer/root')\nrequire('./unpoly/classes/layer/modal')\nrequire('./unpoly/classes/layer/popup')\nrequire('./unpoly/classes/layer/drawer')\nrequire('./unpoly/classes/layer/cover')\nrequire('./unpoly/classes/layer_lookup')\nrequire('./unpoly/classes/layer_stack')\nrequire('./unpoly/classes/link_feedback_urls')\nrequire('./unpoly/classes/link_preloader')\nrequire('./unpoly/classes/motion_controller')\nrequire('./unpoly/classes/nonceable_callback')\nrequire('./unpoly/classes/overlay_focus')\nrequire('./unpoly/classes/params')\nrequire('./unpoly/classes/progress_bar')\nrequire('./unpoly/classes/render_options')\nrequire('./unpoly/classes/render_result')\nrequire('./unpoly/classes/request')\nrequire('./unpoly/classes/request/cache')\nrequire('./unpoly/classes/request/queue')\nrequire('./unpoly/classes/request/form_renderer')\nrequire('./unpoly/classes/request/xhr_renderer')\nrequire('./unpoly/classes/response')\nrequire('./unpoly/classes/response_doc')\nrequire('./unpoly/classes/reveal_motion')\nrequire('./unpoly/classes/selector')\nrequire('./unpoly/classes/tether')\nrequire('./unpoly/classes/url_pattern')\n\nrequire('./unpoly/framework')\nrequire('./unpoly/event')\nrequire('./unpoly/protocol')\nrequire('./unpoly/log')\nrequire('./unpoly/script')\nrequire('./unpoly/history')\nrequire('./unpoly/fragment')\nrequire('./unpoly/viewport')\nrequire('./unpoly/motion')\nrequire('./unpoly/network')\nrequire('./unpoly/layer')\nrequire('./unpoly/link')\nrequire('./unpoly/form')\nrequire('./unpoly/feedback')\nrequire('./unpoly/radio')\nrequire('./unpoly/rails')\n\nup.framework.onEvaled()\n\n"],
  "mappings": "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",
  "names": ["require_namespace", "__commonJSMin", "require_mockable", "__commonJSMin", "originalFn", "name", "obj", "mockableFn", "require_util", "__commonJSMin", "noop", "asyncNoop", "memoize", "func", "cachedValue", "cached", "args", "NORMALIZE_URL_DEFAULTS", "normalizeURL", "url", "options", "newOptions", "parts", "parseURL", "normalized", "isCrossOrigin", "pathname", "matchURLs", "leftURL", "rightURL", "APP_PROTOCOL", "APP_HOSTNAME", "urlOrAnchor", "isString", "link", "normalizeMethod", "method", "methodAllowsPayload", "iteratee", "block", "item", "map", "list", "mapped", "i", "mapObject", "array", "pairer", "merger", "object", "pair", "each", "isNull", "isUndefined", "isDefined", "negate", "isMissing", "isGiven", "isBlank", "value", "isObject", "isList", "isOptions", "presence", "tester", "isPresent", "isFunction", "isBoolean", "isNumber", "typeOfResult", "isElement", "isRegExp", "isError", "isJQuery", "isElementish", "isPromise", "isArray", "isFormData", "toArray", "copyArrayLike", "isNodeList", "isArguments", "isHTMLCollection", "nullToUndefined", "wrapList", "copy", "arrayLike", "merge", "sources", "mergeDefined", "result", "source", "key", "defaults", "parseArgIntoOptions", "argKey", "extractOptions", "findInList", "match", "element", "some", "findResult", "every", "compact", "filterList", "filterMap", "mapping", "compactObject", "pickBy", "uniq", "uniqBy", "mapper", "seenElements", "elem", "index", "matches", "reject", "intersect", "array1", "array2", "contains", "scheduleTimer", "millis", "callback", "queueTask", "task", "queueMicrotask", "last", "subValue", "objectContains", "subObject", "reducedValue", "pick", "isEqual", "keys", "filtered", "omit", "_value", "unresolvablePromise", "remove", "evalOption", "evalAutoOption", "autoMeans", "ESCAPE_HTML_ENTITY_MAP", "escapeHTML", "string", "char", "escapeRegExp", "pluckKey", "renameKey", "oldKey", "newKey", "extractLastArg", "extractCallback", "identity", "arg", "sequence", "functions", "fn", "flatten", "flattened", "flatMap", "always", "promise", "newDeferred", "resolveFn", "rejectFn", "nativePromise", "givenResolve", "givenReject", "isBasicObjectProperty", "k", "a", "b", "isEqualList", "aKeys", "bKeys", "aKey", "PARSE_TOKEN_PATTERNS", "parseTokens", "separator", "pattern", "wrapValue", "constructor", "nextUid", "uid", "reverse", "renameKeys", "renameKeyFn", "renamed", "camelToKebabCase", "str", "lowerCaseFirst", "upperCaseFirst", "defineDelegates", "props", "targetProvider", "prop", "target", "newValue", "stringifyArg", "placeholder", "attr", "error", "SPRINTF_PLACEHOLDERS", "sprintf", "message", "useMemoizeCacheEntry", "cacheEntry", "buildMemoizeCacheEntry", "oldImpl", "self", "e", "memoizeMethod", "propLiteral", "cachingImpl", "cache", "cacheKey", "safeStringifyJSON", "json", "escapeHighASCII", "unicodeEscape", "variant", "changes", "require_error", "__commonJSMin", "fail", "args", "isCritical", "error", "muteUncriticalRejection", "promise", "throwCritical", "muteUncriticalSync", "block", "e", "value", "report", "event", "guard", "fn", "guardFn", "require_migrate_stub", "__commonJSMin", "require_browser", "__commonJSMin", "u", "submitForm", "form", "canPushState", "canJQuery", "canHasSelector", "popCookie", "name", "value", "assertConfirmed", "options", "require_element", "__commonJSMin", "exports", "module", "require_element", "__commonJSMin", "u", "first", "args", "selector", "subtree", "root", "results", "contains", "selectorOrElement", "element", "getOne", "ancestor", "around", "getList", "value", "valueToList", "hide", "show", "toggle", "newVisible", "isVisible", "toggleAttr", "attr", "newPresent", "setAttrs", "attrs", "key", "setTemporaryAttrs", "oldAttrs", "metaContent", "name", "attrSelector", "insertBefore", "existingElement", "newElement", "createFromSelector", "includePath", "parseSelector", "rootElement", "depthElement", "previousElement", "includeSegment", "tagName", "id", "classNames", "attributes", "className", "attributeName", "attributeValue", "klass", "setInlineStyle", "excludeRaw", "includeRaw", "match", "includeSelectorWithoutAttrValues", "attrValues", "removeAttrSelectorValues", "depthSelector", "parsed", "_match", "replaceAttrSelectors", "ATTR_SELECTOR_PATTERN", "string", "replacement", "operator", "quote", "values", "affix", "parent", "position", "SINGLETON_TAG_NAMES", "isSingleton", "elementTagName", "attribute", "idSelector", "classSelector", "createBrokenDocumentFromHTML", "html", "fixParserDamage", "scriptish", "clone", "createFromHTML", "range", "elements", "getRoot", "paint", "concludeCSSTransition", "undo", "setTemporaryStyle", "hasCSSTransition", "elementOrStyleHash", "styleHash", "computedStyle", "prop", "duration", "fixedToAbsolute", "elementRectAsFixed", "offsetParentRect", "computedStyleNumber", "setMissingAttrs", "setMissingAttr", "unwrap", "wrapper", "preservingFocus", "wrappedNodes", "wrappedNode", "wrapChildren", "childNode", "isWrapper", "fn", "oldFocusElement", "stringAttr", "booleanAttr", "pass", "booleanOrStringAttr", "numberAttr", "jsonAttr", "json", "callbackAttr", "link", "exposedKeys", "mainKey", "code", "callback", "event", "exposedValues", "closestAttr", "parseFn", "newStyles", "oldStyles", "inlineStyle", "addTemporaryClass", "setTemporaryAttr", "props", "style", "extractFromStyleObject", "rawValue", "keyOrKeys", "normalizeStyleValueForWrite", "CSS_LENGTH_PROPS", "cssLength", "obj", "isUpPrefixed", "upAttrs", "attrNames", "upClasses", "cleanJQuery", "isEmpty", "crossOriginSelector", "require_error", "__commonJSMin", "message", "props", "name", "require_not_implemented", "__commonJSMin", "require_aborted", "__commonJSMin", "message", "require_cannot_match", "__commonJSMin", "require_cannot_parse", "__commonJSMin", "require_cannot_target", "__commonJSMin", "require_offline", "__commonJSMin", "require_record", "__commonJSMin", "u", "_options", "options", "source", "other", "require_config", "__commonJSMin", "u", "blueprintFn", "element", "prop", "includes", "excludes", "selector", "require_log_config", "__commonJSMin", "enabledKey", "enabled", "newEnabled", "require_options_parser", "__commonJSMin", "u", "e", "element", "options", "parserOptions", "key", "keyOptions", "parser", "link", "attr", "attrValueFn", "attrNames", "value", "attrName", "normalizeFn", "failKey", "failAttrNames", "optionsFn", "fnResult", "prefix", "option", "require_fifo_cache", "__commonJSMin", "u", "capacity", "normalizeKey", "key", "value", "oldestKey", "require_rect", "__commonJSMin", "element", "require_body_shifter", "__commonJSMin", "e", "element", "overflowElement", "body", "bodyRightPadding", "bodyRightShift", "elementRight", "elementRightShift", "styles", "unshiftFn", "require_change", "__commonJSMin", "u", "options", "renderResult", "existingValue", "newValue", "require_addition", "__commonJSMin", "u", "e", "options", "eventPlan", "layer", "oldElement", "newElement", "source", "time", "etag", "steps", "responseDoc", "noneOptions", "require_render_job", "__commonJSMin", "u", "_a", "options", "result", "resultOrError", "onRendered", "onFinished", "guardedOnFinished", "error", "prefix", "onRequest", "request", "onRender", "guardEvent", "abort", "fragments", "layer", "origin", "newLayer", "abortOptions", "require_removal", "__commonJSMin", "require_destroy_fragment", "__commonJSMin", "options", "require_open_layer", "__commonJSMin", "u", "options", "responseDoc", "onApplicable", "unbindClosing", "otherLayerSteps", "buildOptions", "beforeNew", "optionsWithLayerDefaults", "parent", "scrollingOptions", "require_update_layer", "__commonJSMin", "u", "_a", "options", "responseDoc", "onApplicable", "unbindClosing", "otherLayerSteps", "step", "finder", "focusCapsule", "i", "oldFragments", "require_update_steps", "__commonJSMin", "u", "e", "options", "responseDoc", "motionEndPromises", "step", "fragment", "newFragments", "parent", "morphOptions", "oldWrapper", "newWrapper", "wrapperStep", "wrapper", "position", "oldElement", "newElement", "partner", "partnerSelector", "lookupOpts", "plan", "keepPlans", "keepable", "keepPlan", "keepableClone", "viewports", "viewport", "cursorProps", "reviver", "element", "require_close_layer", "__commonJSMin", "u", "options", "parent", "event", "formerParent", "verbPast", "verbPastUpperCaseFirst", "name", "newFocusElement", "require_from_url", "__commonJSMin", "u", "_a", "options", "_newPageReason", "responseOrError", "successAttrs", "failAttrs", "renderOptions", "requestAttributesOptions", "response", "error", "retryOptions", "require_from_response", "__commonJSMin", "u", "_a", "options", "finalRenderOptions", "result", "renderResult", "originalRenderOptions", "inputTarget", "effectiveTarget", "verifyResult", "expiredResponse", "meta", "renderOptions", "responseURL", "serverLocation", "hash", "serverTarget", "require_from_content", "__commonJSMin", "u", "_a", "options", "plans", "layer", "layers", "targets", "target", "props", "change", "matchedPlan", "result", "error", "plan", "primaryPlan", "assets", "docOptions", "responseDoc", "opts", "getPlanProps", "reason", "planTargets", "humanizedLayerOption", "fn", "require_compiler_pass", "__commonJSMin", "u", "root", "compilers", "layer", "data", "dataMap", "meta", "compiler", "selector", "match", "matches", "element", "compileArgs", "result", "destructorOrDestructors", "elements", "dataList", "elementOrElements", "appliedCompilers", "require_css_transition", "__commonJSMin", "u", "e", "element", "lastFrameKebab", "options", "key", "event", "completedPropertyKebab", "oldTransition", "oldTransitionProperties", "oldTransitionFrameKebab", "require_destructor_pass", "__commonJSMin", "u", "fragment", "options", "cleanable", "destructors", "destructor", "selectOptions", "element", "require_event_emitter", "__commonJSMin", "u", "e", "event", "message", "messageArgs", "type", "args", "defaults", "options", "layer", "require_event_listener", "__commonJSMin", "u", "attributes", "map", "options", "event", "element", "args", "expectedArgCount", "data", "applyCallback", "key", "listeners", "require_event_listener_group", "__commonJSMin", "u", "unbindFns", "attrs", "listener", "fn", "element", "eventType", "args", "defaults", "callback", "elements", "eventTypes", "fixTypes", "options", "selector", "attributes", "require_field_watcher", "__commonJSMin", "u", "root", "options", "callback", "target", "unbindFn", "field", "rootOptions", "container", "fieldOptions", "values", "delay", "diff", "callbackOptions", "callbackReturnValues", "name", "value", "callbackDone", "args", "previous", "next", "changes", "keys", "key", "previousValue", "nextValue", "require_form_validator", "__commonJSMin", "u", "form", "event", "fieldOrForm", "guard", "callback", "options", "solutions", "solution", "origin", "field", "formGroup", "target", "simpleSelectors", "simpleSelector", "element", "containerWithAttr", "overrideOptions", "solutionDelays", "shortestDelay", "dirtySolutions", "dirtyOrigins", "dirtyFields", "dirtyNames", "dataMap", "dirtyRenderOptionsList", "renderingPromise", "headers", "names", "key", "value", "data", "require_focus_capsule", "__commonJSMin", "target", "cursorProps", "layer", "options", "rediscoveredElement", "focusedElement", "require_fragment_processor", "__commonJSMin", "u", "opt", "preprocessed", "result", "match", "array", "condition", "selector", "lookupOpts", "require_fragment_finder", "__commonJSMin", "u", "DESCENDANT_SELECTOR", "options", "preferOldElement", "simpleSelectors", "simpleSelector", "parts", "parent", "require_fragment_focus", "__commonJSMin", "u", "e", "PREVENT_SCROLL_OPTIONS", "opt", "element", "condition", "selector", "match", "autofocusElement", "hashTarget", "require_fragment_polling", "__commonJSMin", "e", "fragment", "options", "reloadOptions", "oldAbortable", "newLayer", "newFragment", "reason", "require_fragment_scrolling", "__commonJSMin", "u", "opt", "element", "selector", "match", "require_base", "__commonJSMin", "e", "u", "options", "option", "element", "args", "event", "hittableElement", "fn", "title", "metaTags", "location", "previousLocation", "part", "_part", "other", "focusedElement", "require_overlay", "__commonJSMin", "e", "u", "options", "name", "fn", "parentElement", "elementAttrs", "content", "part", "parent", "event", "element", "originClicked", "value", "closeOptions", "label", "id", "fieldSelector", "fieldsAnywhere", "fieldsInLayer", "field", "halt", "attribute", "closeFn", "selector", "origin", "parser", "eventTypes", "urlPattern", "location", "resolution", "closeValue", "destroyOptions", "boxDone", "backdropDone", "method", "verb", "require_overlay_with_tether", "__commonJSMin", "require_overlay_with_viewport", "__commonJSMin", "require_root", "__commonJSMin", "e", "_a", "options", "__publicField", "require_modal", "__commonJSMin", "_a", "__publicField", "require_popup", "__commonJSMin", "_a", "__publicField", "require_drawer", "__commonJSMin", "_a", "__publicField", "require_cover", "__commonJSMin", "_a", "__publicField", "require_layer_lookup", "__commonJSMin", "u", "e", "stack", "args", "options", "recursiveOptions", "results", "value", "element", "layer", "require_layer_stack", "__commonJSMin", "u", "layer", "options", "descendants", "dismissOptions", "descendant", "args", "fn", "value", "overlay", "index", "require_link_feedback_urls", "__commonJSMin", "link", "normalize", "href", "upHREF", "alias", "normalizedLocation", "require_link_preloader", "__commonJSMin", "u", "e", "link", "event", "eventTypes", "callback", "applyDelay", "delay", "onQueued", "request", "require_motion_controller", "__commonJSMin", "u", "e", "name", "cluster", "startMotion", "memory", "mutedAnimator", "promise", "elements", "element", "el", "eventAttrs", "isActive", "fn", "doForward", "event", "unbindFinish", "require_nonceable_callback", "__commonJSMin", "u", "e", "script", "nonce", "string", "match", "argNames", "callbackThis", "args", "thisArg", "wrappedScript", "allowedNonces", "element", "getPageNonce", "attribute", "matches", "attributeValue", "callback", "warn", "message", "pageNonce", "require_overlay_focus", "__commonJSMin", "e", "u", "layer", "event", "target", "focusOptions", "element", "child", "require_params", "__commonJSMin", "u", "e", "raw", "obj", "entry", "name", "value", "formData", "parts", "query", "values", "base", "separator", "object", "key", "valueElements", "valueElement", "part", "entries", "form", "container", "fields", "params", "field", "tagName", "type", "option", "file", "other", "url", "objects", "allParams", "require_progress_bar", "__commonJSMin", "e", "TRANSITION_DELAY", "diff", "nextStepDelay", "width", "require_render_options", "__commonJSMin", "u", "GLOBAL_DEFAULTS", "PRELOAD_OVERRIDES", "SHARED_KEYS", "CONTENT_KEYS", "LATE_KEYS", "navigateDefaults", "options", "preloadOverrides", "preprocess", "defaults", "finalize", "preprocessedOptions", "lateDefaults", "assertContentGiven", "contentKey", "failOverrides", "overrides", "key", "value", "unprefixed", "deriveFailOptions", "require_render_result", "__commonJSMin", "main", "extension", "mergeFinished", "require_request", "__commonJSMin", "u", "_a", "options", "layerLookupOptions", "steps", "selectors", "lookupOpts", "selector", "value", "match", "response", "log", "reason", "message", "responseAttrs", "methodFromResponse", "urlFromResponse", "args", "subtreeElements", "fragment", "subtreeElement", "name", "key", "csrfHeader", "csrfToken", "condition", "except", "testFn", "request", "pattern", "_request", "require_cache", "__commonJSMin", "u", "request", "influencingHeaders", "varyPart", "headerName", "cacheKey", "cachedRequest", "oldCacheKey", "response", "newCacheKey", "oldKey", "newKey", "headersInfluencingResponse", "previousInfluencingHeaders", "existingCachedRequest", "newRequest", "existingRequest", "options", "value", "condition", "testerOptions", "oldestKey", "fn", "tester", "results", "request1", "request2", "requestOrOptions", "require_queue", "__commonJSMin", "u", "request", "responseOrError", "timeUntilLate", "maxConcurrency", "args", "options", "except", "reason", "logOnce", "conditions", "tester", "list", "abortableRequests", "abortableRequest", "currentLate", "allForegroundRequests", "timerTolerance", "require_form_renderer", "__commonJSMin", "u", "e", "HTML_FORM_METHODS", "request", "action", "method", "paramsFromQuery", "contentType", "csrfParam", "csrfToken", "attrs", "require_xhr_renderer", "__commonJSMin", "CONTENT_TYPE_URL_ENCODED", "CONTENT_TYPE_FORM_DATA", "u", "_a", "request", "handlers", "xhr", "contentType", "headerName", "headerValue", "method", "require_response", "__commonJSMin", "u", "name", "influencingHeaders", "headerName", "header", "require_response_doc", "__commonJSMin", "u", "e", "_a", "document", "fragment", "content", "target", "origin", "cspNonces", "match", "originSelector", "matchingElement", "value", "parseFn", "node", "head", "fn", "selector", "steps", "step", "newElement", "selectEvent", "element", "brokenElements", "require_reveal_motion", "__commonJSMin", "e", "u", "element", "options", "viewportConfig", "viewportRect", "elementRect", "maxPixels", "originalScrollTop", "newScrollTop", "diff", "selector", "elements", "obstruction", "obstructionRect", "require_selector", "__commonJSMin", "u", "CSS_HAS_SUFFIX_PATTERN", "selector", "elementOrDocument", "options", "matchingInExternalDocument", "expandTargetLayer", "match", "layer", "expandedTargets", "target", "descendantSelector", "element", "parentElement", "filter", "root", "results", "require_tether", "__commonJSMin", "u", "e", "options", "element", "fn", "doScheduleSync", "elementBox", "elementMargin", "anchorBox", "left", "top", "targetLeft", "targetTop", "require_url_pattern", "__commonJSMin", "u", "fullPattern", "normalizeURL", "positiveList", "negativeList", "pattern", "list", "capture", "url", "reCode", "match", "type", "name", "doNormalize", "resolution", "group", "groupIndex", "value", "require_framework", "__commonJSMin", "readyState", "emitReset", "boot", "issue", "supportIssue", "mustBootManually", "unpolyScript", "onEvaled", "startExtension", "stopExtension", "isSupported", "feature", "require_event", "__commonJSMin", "u", "reset", "globalElement", "listener", "on", "args", "buildListenerGroup", "off", "options", "buildEmitter", "emit", "build", "props", "type", "event", "assertEmitted", "onEscape", "halt", "keyModifiers", "isUnmodified", "modifier", "fork", "originalEvent", "newType", "copyKeys", "newEvent", "key", "originalMethod", "executeEmitAttr", "element", "eventType", "eventProps", "forkedEvent", "inputDevices", "getInputDevice", "observeInputDevice", "newModality", "require_protocol", "__commonJSMin", "u", "headerize", "camel", "char", "extractHeader", "xhr", "shortHeader", "parseFn", "value", "targetFromXHR", "parseModifyCacheValue", "evictCacheFromXHR", "expireCacheFromXHR", "contextFromXHR", "methodFromXHR", "titleFromXHR", "eventPlansFromXHR", "acceptLayerFromXHR", "dismissLayerFromXHR", "initialRequestMethod", "locationFromXHR", "influencingHeadersFromResponse", "response", "varyHeaderValue", "config", "csrfHeader", "csrfParam", "csrfToken", "cspNonce", "cspNoncesFromHeader", "cspHeader", "nonces", "parts", "part", "noncePattern", "match", "wrapMethod", "method", "params", "require_log", "__commonJSMin", "u", "config", "printToStandard", "args", "printToStream", "printToWarn", "printToError", "stream", "trace", "message", "printToStreamStyled", "customStyles", "printUserEvent", "event", "color", "printBanner", "logo", "text", "enable", "disable", "require_script", "__commonJSMin", "u", "config", "SYSTEM_MACRO_PRIORITIES", "registeredCompilers", "registeredMacros", "registerCompiler", "args", "compiler", "buildCompiler", "insertCompiler", "registerMacro", "macro", "detectSystemMacroPriority", "macroSelector", "substr", "priority", "parseCompilerArgs", "defaults", "selector", "callback", "options", "queue", "newCompiler", "existingCompiler", "index", "layer", "compile", "fragment", "compilers", "registerDestructor", "element", "destructor", "destructors", "hello", "clean", "readData", "buildData", "rawJSON", "parsedJSON", "findAssets", "head", "assertAssetsOK", "newAssets", "renderOptions", "oldAssets", "oldHTML", "newHTML", "disableScript", "scriptElement", "disableScriptsInSubtree", "root", "reset", "require_history", "__commonJSMin", "u", "config", "previousLocation", "nextPreviousLocation", "reset", "trackCurrentLocation", "DEFAULT_NORMALIZE_OPTIONS", "normalizeURL", "url", "options", "currentLocation", "normalizeOptions", "ADDITIONAL_NORMALIZE_OPTIONS_FOR_COMPARISON", "isLocation", "replace", "location", "manipulate", "emitLocationChanged", "push", "props", "event", "method", "state", "buildState", "restoreStateOnPop", "onPop", "register", "findMetaTags", "head", "updateMetaTags", "newMetaTags", "oldMetaTags", "oldMetaTag", "newMetaTag", "link", "require_fragment", "__commonJSMin", "exports", "module", "require_fragment", "__commonJSMin", "u", "e", "upTagName", "element", "tagName", "config", "response", "defaultSkipResponse", "expiredResponse", "sourceOf", "options", "getSmart", "timeOf", "value", "etagOf", "render", "args", "parseTargetAndOptions", "navigate", "emitFragmentInserted", "emitFragmentKeep", "keepPlan", "oldElement", "newFragment", "newData", "renderOptions", "log", "callback", "emitFragmentDestroyed", "fragment", "parent", "isNotDestroying", "isAlive", "selector", "root", "getDumb", "getAll", "selectorString", "getSubtree", "contains", "selectorOrElement", "closest", "destroy", "markFragmentAsDestroying", "reload", "conditionalHeaders", "headers", "time", "etag", "visit", "url", "KEY_PATTERN", "successKey", "key", "match", "_", "prefix", "suffix", "failKey", "toTarget", "tryToTarget", "cannotTarget", "isTargetable", "untargetableMessage", "deriver", "target", "deriveTarget", "isGoodTarget", "deriveTargetFromPattern", "includePath", "excludeRaw", "id", "classNames", "attributes", "result", "className", "attributeName", "attributeValue", "goodClass", "goodClassesForTarget", "matchesPattern", "pattern", "str", "isGood", "klass", "badTargetClass", "MAIN_PSEUDO", "LAYER_PSEUDO", "ORIGIN_PSEUDO", "containsMainPseudo", "expandTargets", "targets", "layer", "expanded", "mode", "resolveMode", "replaced", "mainTarget", "firstSwappableTarget", "resolveOrigin", "modernResolveOrigin", "origin", "splitTarget", "parseTargetSteps", "defaultPlacement", "defaultMaybe", "steps", "simpleSelectors", "placement", "maybe", "_match", "customPlacement", "step", "hasAutoHistory", "newFragments", "vanillaSelector", "matches", "shouldRevalidate", "request", "targetForSteps", "bestSteps", "isContainedByRivalStep", "candidateStep", "rivalStep", "compressNestedSteps", "compressed", "abort", "testFn", "reason", "newLayer", "elements", "layers", "testFnWithAbortable", "onAborted", "guard", "event", "unsubscribe", "documentElement", "require_viewport", "__commonJSMin", "exports", "module", "require_viewport", "__commonJSMin", "u", "f", "config", "element", "inputDevice", "bodyShifter", "reveal", "options", "doFocus", "preventScroll", "force", "focusVisible", "removeFocusClasses", "relatedTarget", "tryFocus", "revealHash", "hash", "match", "firstHashTarget", "allSelector", "rootSelector", "closest", "target", "getSubtree", "getAround", "getAll", "getRoot", "rootWidth", "rootHeight", "isRoot", "rootHasReducedWidthFromScrollbar", "rootOverflowElement", "body", "html", "wasChosenAsOverflowingElement", "overflowY", "scrollbarWidth", "outerStyle", "outer", "width", "scrollTopKey", "viewport", "fixedElements", "root", "queryParts", "saveScroll", "args", "viewports", "parseOptions", "location", "tops", "getScrollTopsForSave", "key", "restoreScroll", "locationScrollTops", "setScrollTops", "saveFocus", "layer", "focusCapsule", "restoreFocus", "locationCapsule", "newStateCache", "resetScroll", "_options", "absolutize", "viewportRect", "originalRect", "boundsRect", "bounds", "moveBounds", "diffX", "diffY", "newElementRect", "pureHash", "selector", "value", "focusedElementWithin", "scopeElement", "focusedElement", "CURSOR_PROPS", "copyCursorProps", "from", "to", "userScrolled", "require_motion", "__commonJSMin", "u", "namedAnimations", "namedTransitions", "motionController", "config", "pickDefault", "registry", "reset", "isEnabled", "animate", "element", "animation", "options", "animationFn", "findAnimationFn", "willRun", "willAnimate", "runNow", "skipAnimate", "animationOrTransition", "applyConfig", "isNone", "animateNow", "lastFrame", "findNamedAnimation", "name", "finish", "morph", "oldElement", "newElement", "transitionObject", "transitionFn", "findTransitionFn", "willMorph", "beforeStart", "afterInsert", "beforeDetach", "afterDetach", "scrollNew", "viewport", "scrollTopBeforeReveal", "oldRemote", "trackable", "scrollTopAfterReveal", "swapElementsDirectly", "object", "composeTransitionFn", "namedTransition", "oldAnimation", "newAnimation", "oldAnimationFn", "newAnimationFn", "motionOptions", "parserOptions", "parser", "registerTransition", "transition", "fn", "registerAnimation", "registerOpacityAnimation", "from", "to", "translateCSS", "dx", "dy", "noTranslateCSS", "untranslatedBox", "registerMoveAnimations", "direction", "boxToTransform", "animationToName", "animationFromName", "box", "transform", "travelDistance", "require_network", "__commonJSMin", "exports", "module", "require_network", "__commonJSMin", "u", "config", "response", "request", "_response", "queue", "cache", "progressBar", "reset", "abortRequests", "makeRequest", "args", "options", "parseRequestOptions", "processRequest", "useCachedRequest", "queueRequest", "newRequest", "cachedRequest", "handleCaching", "responseOrError", "expireCache", "evictCache", "isBusy", "loadPage", "requestsAttrs", "registerAliasForRedirect", "isSafeMethod", "method", "onLate", "onRecover", "require_layer", "__commonJSMin", "exports", "module", "require_layer", "__commonJSMin", "u", "e", "LAYER_CLASSES", "config", "newConfig", "layer", "Class", "stack", "handlers", "mainTargets", "mode", "modeConfigs", "normalizeOptions", "options", "match", "openMethod", "shorthandMode", "build", "beforeNew", "configs", "handleDeprecatedConfig", "openCallbackAttr", "link", "attr", "closeCallbackAttr", "reset", "open", "ask", "resolve", "reject", "event", "anySelector", "optionToString", "option", "isWithinForeignOverlay", "element", "selector", "api", "require_link", "__commonJSMin", "exports", "module", "require_link", "__commonJSMin", "u", "linkPreloader", "lastMousedownTarget", "LINKS_WITH_LOCAL_HTML", "LINKS_WITH_REMOTE_HTML", "ATTRIBUTES_SUGGESTING_FOLLOW", "combineFollowableSelectors", "elementSelectors", "attributeSelectors", "elementSelector", "attrSelector", "config", "isPreloadDisabled", "link", "isFollowable", "willCache", "options", "parseRequestOptions", "reset", "follow", "followOptions", "parserOptions", "parser", "followURL", "followMethod", "preload", "issue", "preloadIssue", "guardEvent", "isSafe", "url", "makeFollowable", "makeClickable", "event", "forkEventAsUpClick", "shouldFollowEvent", "betterTargetSelector", "betterTarget", "isInstant", "linkOrDescendant", "element", "isInstantDisabled", "convertClicks", "layer", "didUserDragAway", "clickEvent", "originalEvent", "forwardedProps", "newEvent", "method", "area", "selector", "childLink", "areaAttrs", "areaClasses", "require_form", "__commonJSMin", "u", "ATTRIBUTES_SUGGESTING_SUBMIT", "config", "fieldSelector", "suffix", "field", "isField", "element", "findFields", "root", "fields", "outsideFieldSelector", "outsideFields", "findSubmitButtons", "submitButtonSelector", "submittingButton", "form", "selector", "focusedElement", "submit", "options", "submitOptions", "parserOptions", "getForm", "parser", "destinationOptions", "watchOptions", "disableContainer", "container", "focusFallback", "controls", "control", "findGroup", "raiseDisableStack", "lowerDisableStack", "disableWhile", "promise", "undoDisable", "handleDisableOption", "disable", "origin", "missingOption", "key", "getOrigin", "getOriginForm", "getScope", "containers", "params", "submitButton", "event", "button", "isSubmittable", "watch", "args", "callback", "watchCallbackFromElement", "watcher", "rawCallback", "autosubmit", "target", "_diff", "renderOptions", "getGroupSelectors", "findGroupSolution", "groupSelector", "group", "goodDerivedGroupTarget", "goodDerivedFieldTarget", "groupHasFieldTarget", "validate", "parseValidateArgs", "originOrTarget", "switcherValues", "value", "meta", "groupName", "checkedButton", "values", "switchTargets", "switcher", "targetSelector", "fieldValues", "switchTarget", "show", "findSwitcherForTarget", "hideValues", "parseSwitchTokens", "showValues", "str", "switchers", "elementOrSelector", "focusedField", "validatingFieldSelector", "fieldOrForm", "_event", "formOrField", "require_feedback", "__commonJSMin", "u", "config", "reset", "CLASS_ACTIVE", "CLASS_LOADING", "SELECTOR_LINK", "navSelector", "normalizeURL", "url", "linkURLs", "link", "updateFragment", "fragment", "layerOption", "links", "updateLinks", "updateLinksWithinNavs", "options", "navs", "nav", "getNormalizedLayerLocation", "layer", "layerLocation", "isCurrent", "currentClass", "findActivatableArea", "element", "showAroundRequest", "request", "clean", "fn", "activeElement", "getActiveElementFromRenderOptions", "updateLayerIfLocationChanged", "processedLocation", "onBrowserLocationChanged", "frontLayer", "_event", "newFragment", "event", "require_radio", "__commonJSMin", "e", "config", "hungrySteps", "renderOptions", "useHungry", "origin", "renderLayer", "steps", "hungrySelector", "layerPreference", "elementLayer", "hungries", "element", "selector", "ifLayer", "applicableLayers", "motionOptions", "selectEvent", "selectCallback", "step", "startPolling", "fragment", "options", "stopPolling", "pollOptions", "parser", "event", "require_rails", "__commonJSMin", "e", "isRails", "feature", "upAttribute", "dataAttribute", "link"]
}
